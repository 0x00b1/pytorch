#pragma once

#include <ATen/native/special/detail/gamma.h>
#include <ATen/native/special/detail/is_even_integer.h>
#include <ATen/native/special/detail/is_integer.h>
#include <ATen/native/special/detail/ln_gamma.h>
#include <ATen/native/special/detail/numeric_t.h>
#include <ATen/native/special/detail/riemann_zeta_summation.h>
#include <ATen/native/special/prime_number.h>
#include <ATen/native/special/sin_pi.h>
#include <c10/util/numbers.h>

namespace at {
namespace native {
namespace special {
namespace detail {
template<typename T1>
T1
riemann_zeta_m_1(T1 s) {
  using T2 = numeric_t<T1>;

  if (s == T2(1)) {
    return std::numeric_limits<T2>::infinity();
  }

  if (is_integer(s) && is_integer(s)() >= 0) {
    constexpr long double coefficients[121] = {
        -1.5L,                                          
        std::numeric_limits<long double>::infinity(),   
        6.449340668482264364724151666460251892177e-1L,  
        2.020569031595942853997381615114499907647e-1L,  
        8.232323371113819151600369654116790277462e-2L,  
        3.692775514336992633136548645703416805713e-2L,  
        1.734306198444913971451792979092052790186e-2L,  
        8.349277381922826839797549849796759599843e-3L,  
        4.077356197944339378685238508652465258950e-3L,  
        2.008392826082214417852769232412060485604e-3L,  
        9.945751278180853371459589003190170060214e-4L,  
        4.941886041194645587022825264699364686068e-4L,  
        2.460865533080482986379980477396709604160e-4L,  
        1.227133475784891467518365263573957142749e-4L,  
        6.124813505870482925854510513533374748177e-5L,  
        3.058823630702049355172851064506258762801e-5L,  
        1.528225940865187173257148763672202323739e-5L,  
        7.637197637899762273600293563029213088257e-6L,  
        3.817293264999839856461644621939730454694e-6L,  
        1.908212716553938925656957795101353258569e-6L,  
        9.539620338727961131520386834493459437919e-7L,  
        4.769329867878064631167196043730459664471e-7L,  
        2.384505027277329900036481867529949350419e-7L,  
        1.192199259653110730677887188823263872549e-7L,  
        5.960818905125947961244020793580122750393e-8L,  
        2.980350351465228018606370506936601184471e-8L,  
        1.490155482836504123465850663069862886482e-8L,  
        7.450711789835429491981004170604119454712e-9L,  
        3.725334024788457054819204018402423232885e-9L,  
        1.862659723513049006403909945416948061669e-9L,  
        9.313274324196681828717647350212198135677e-10L, 
        4.656629065033784072989233251220071062704e-10L, 
        2.328311833676505492001455975940495024831e-10L, 
        1.164155017270051977592973835456309516528e-10L, 
        5.820772087902700889243685989106305417368e-11L, 
        2.910385044497099686929425227884046410669e-11L, 
        1.455192189104198423592963224531842098334e-11L, 
        7.275959835057481014520869012338059265263e-12L, 
        3.637979547378651190237236355873273513051e-12L, 
        1.818989650307065947584832100730085030987e-12L, 
        9.094947840263889282533118386949087534482e-13L, 
        4.547473783042154026799112029488570339961e-13L, 
        2.273736845824652515226821577978691217250e-13L, 
        1.136868407680227849349104838025906441861e-13L, 
        5.684341987627585609277182967524068526363e-14L, 
        2.842170976889301855455073704942662033022e-14L, 
        1.421085482803160676983430714173953721447e-14L, 
        7.105427395210852712877354479956799457540e-15L, 
        3.552713691337113673298469534059343240771e-15L, 
        1.776356843579120327473349014400279865980e-15L, 
        8.881784210930815903096091386391386649172e-16L, 
        4.440892103143813364197770940268122986877e-16L, 
        2.220446050798041983999320094204660286072e-16L, 
        1.110223025141066133720544569921388238976e-16L, 
        5.551115124845481243723736590509454214979e-17L, 
        2.775557562136124172581632453854098189256e-17L, 
        1.387778780972523276283909490650087159020e-17L, 
        6.938893904544153697446085326249613606421e-18L, 
        3.469446952165922624744271496109153952849e-18L, 
        1.734723476047576572048972969937766807693e-18L, 
        8.673617380119933728342055067345929347336e-19L, 
        4.336808690020650487497023565906367637200e-19L, 
        2.168404344997219785013910168326102593523e-19L, 
        1.084202172494241406301271116539546929420e-19L, 
        5.421010862456645410918700404413613405660e-20L, 
        2.710505431223468831954621311921825336782e-20L, 
        1.355252715610116458148523399711726681995e-20L, 
        6.776263578045189097995298741000309894844e-21L, 
        3.388131789020796818085703100408435571778e-21L, 
        1.694065894509799165406492747048108912984e-21L, 
        8.470329472546998348246992605151870123760e-22L, 
        4.235164736272833347862270482171914722722e-22L, 
        2.117582368136194731844209444015663667353e-22L, 
        1.058791184068023385226500150767838272960e-22L, 
        5.293955920339870323813912246795908957429e-23L, 
        2.646977960169852961134116619883673563755e-23L, 
        1.323488980084899080309451049270121075322e-23L, 
        6.617444900424404067355245869046478332807e-24L, 
        3.308722450212171588946956563227359069812e-24L, 
        1.654361225106075646229923736818740547512e-24L, 
        8.271806125530344403671108096295678003592e-25L, 
        4.135903062765160926009383852215164090474e-25L, 
        2.067951531382576704395963965944918517449e-25L, 
        1.033975765691287099328403715492352137455e-25L, 
        5.169878828456431320410159441971315309917e-26L, 
        2.584939414228214268127816150081035315909e-26L, 
        1.292469707114106670038085128629065184730e-26L, 
        6.462348535570531803437454412518556478869e-27L, 
        3.231174267785265386134631538638949625204e-27L, 
        1.615587133892632521206406698623221009248e-27L, 
        8.077935669463162033155494313137423014210e-28L, 
        4.038967834731580825616620004023205489476e-28L, 
        2.019483917365790349161443228820936759716e-28L, 
        1.009741958682895153362818597460967711233e-28L, 
        5.048709793414475696133364781858743133105e-29L, 
        2.524354896707237824529247247973459828381e-29L, 
        1.262177448353618904396004317475305931953e-29L, 
        6.310887241768094495295138721816048328696e-30L, 
        3.155443620884047239436836171504799139404e-30L, 
        1.577721810442023616297279256834389142642e-30L, 
        7.888609052210118067801840968499904004972e-31L, 
        3.944304526105059027058642826413931148366e-31L, 
        1.972152263052529513529321413206965574183e-31L, 
        9.860761315262647567646607066034827870915e-32L, 
        4.930380657631323783823303533017413935458e-32L, 
        2.465190328815661891911651766508706967729e-32L, 
        1.232595164407830945955825883254353483864e-32L, 
        6.162975822039154729779129416271767419322e-33L, 
        3.081487911019577364889564708135883709661e-33L, 
        1.540743955509788682444782354067941854830e-33L, 
        7.888609052210118067801840968499904004972e-31L, 
        3.851859888774471706111955885169854637076e-34L, 
        1.925929944387235853055977942584927318538e-34L, 
        9.629649721936179265279889712924636592691e-35L, 
        4.814824860968089632639944856462318296345e-35L, 
        2.407412430484044816319972428231159148173e-35L, 
        1.203706215242022408159986214115579574086e-35L, 
        6.018531076210112040799931070577897870432e-36L, 
        3.009265538105056020399965535288948935216e-36L, 
        1.504632769052528010199982767644474467608e-36L, 
        7.523163845262640050999913838222372338039e-37L, 
    };

    if (is_integer(s)() < static_cast<int>(121)) {
      return T1(coefficients[is_integer(s)()]);
    } else {
      return T1(0);
    }
  } else if (std::abs(s - is_integer(s)()) < T2(100) * std::numeric_limits<T2>::epsilon()) {

    constexpr long double coefficients[21] = {
        +0.5772156649015328606065120900824024310421593359L,
        -0.0728158454836767248605863758749013191377363383L,
        -0.0096903631928723184845303860352125293590658061L,
        +0.0020538344203033458661600465427533842857158044L,
        +0.0023253700654673000574681701775260680009044694L,
        +0.0007933238173010627017533348774444448307315394L,
        -0.0002387693454301996098724218419080042777837151L,
        -0.0005272895670577510460740975054788582819962534L,
        -0.0003521233538030395096020521650012087417291805L,
        -0.0000343947744180880481779146237982273906207895L,
        +0.0002053328149090647946837222892370653029598537L,
        +0.0002701844395439035266729020820679556738278420L,
        +0.0001672729121051401933535015433411834466078066L,
        -0.0000274638066037601588600076036933551815267853L,
        -0.0002092092620592999458371396973445849578315442L,
        -0.0002834686553202414466429344749971269770687029L,
        -0.0001996968583089697747077845632032403919157649L,
        +0.0000262770371099183366994665976305101228160786L,
        +0.0003073684081492528265927547519486256455238112L,
        +0.0005036054530473556290555964377171600353212698L,
        +0.0004663435615115594494005948244335505251131434L,
    };

    auto p = T1(1);
    auto q = T1(1) / (s - T1(1)) + coefficients[0];

    for (unsigned int k = 1; k < 21; ++k) {
      p = p * (-(s - T1(1)) / k);
      q = q + (coefficients[k] * p);

      if (std::abs(coefficients[k] * p) < std::numeric_limits<T2>::epsilon() * std::abs(q)) {
        break;
      }
    }

    return q - T1(1);
  } else if (std::real(s) > T2(0)) {
    auto a = T1(0);
    auto b = T2(0.25L);

    for (auto j = 1; j < 10000; j++) {
      bool c = false;
      auto d = T2(1);
      auto e = T1(0);

      for (auto k = 1; k <= j; k++) {
        d = d * (-T2(j - k + 1) / T2(k));

        if (std::abs(d) > std::exp(std::numeric_limits<T2>::max_exponent10 * std::log(T2(10)) - T2(1))) {
          c = true;

          break;
        }

        e = e + (d * std::pow(T1(1 + k), -s));
      }

      if (c) {
        break;
      }

      e = e * b;
      a = a + e;

      if (std::abs(e) < std::numeric_limits<T2>::epsilon() * std::abs(a) || (std::abs(e) < std::numeric_limits<T2>::epsilon() && std::abs(a) < T2(100) * std::numeric_limits<T2>::epsilon())) {
        break;
      }

      b = b * T2(0.5L);
    }

    return (a + (std::pow(T1(2), T1(1) - s))) / (T1(1) - std::pow(T1(2), T1(1) - s));
  } else {
    return std::pow(T2(2) * c10::numbers::pi_v<T2>, s) * sin_pi(T2{0.5L} * s) * gamma(T1(1) - s) * (T2(1) + riemann_zeta_m_1(T1(1) - s)) / c10::numbers::pi_v<T2> - T2(1);
  }
}
}
}
}
}
