#pragma once

namespace at {
namespace native {
namespace special {
namespace detail {
template<typename T1>
T1
gamma_reciprocal_series(T1 x) {
  using T2 = numeric_t<T1>;

  static constexpr long double series[31] = {
      +0.0000000000000000000000000000000000000000L,
      +1.0000000000000000000000000000000000000000L,
      +0.5772156649015328606065120900824024310422L,
      -0.6558780715202538810770195151453904812798L,
      -0.0420026350340952355290039348754298187114L,
      +0.1665386113822914895017007951021052357178L,
      -0.0421977345555443367482083012891873913017L,
      -0.0096219715278769735621149216723481989754L,
      +0.0072189432466630995423950103404465727099L,
      -0.0011651675918590651121139710840183886668L,
      -0.0002152416741149509728157299630536478065L,
      +0.0001280502823881161861531986263281643234L,
      -0.0000201348547807882386556893914210218184L,
      -0.0000012504934821426706573453594738330922L,
      +0.0000011330272319816958823741296203307449L,
      -0.0000002056338416977607103450154130020573L,
      +0.0000000061160951044814158178624986828553L,
      +0.0000000050020076444692229300556650480600L,
      -0.0000000011812745704870201445881265654365L,
      +0.0000000001043426711691100510491540332312L,
      +0.0000000000077822634399050712540499373114L,
      -0.0000000000036968056186422057081878158781L,
      +0.0000000000005100370287454475979015481323L,
      -0.0000000000000205832605356650678322242954L,
      -0.0000000000000053481225394230179823700173L,
      +0.0000000000000012267786282382607901588938L,
      -0.0000000000000001181259301697458769513765L,
      +0.0000000000000000011866922547516003325798L,
      +0.0000000000000000014123806553180317815558L,
      -0.0000000000000000002298745684435370206592L,
      +0.0000000000000000000171440632192733743338L,
  };

  auto p = T1(1);
  auto q = T1(0);

  for (auto j = 1; j < 31; j++) {
    p = p * x;

    const auto r = T1(series[j]) * p;

    q = q + r;

    if (std::abs(r) < std::numeric_limits<T2>::epsilon()) {
      break;
    }
  }

  return q;
}
}
}
}
}
