// TODO: digamma
// TODO: erf
// TODO: erfc
// TODO: exp_erfc
// TODO: gamma
// TODO: inverse_erf
// TODO: inverse_erfc
// TODO: polygamma
// TODO: sinc

#include <ATen/native/special_functions.h>

#include <type_traits>

#include <ATen/ATen.h>
#include <ATen/Dispatch.h>
#include <ATen/MemoryOverlap.h>
#include <ATen/NativeFunctions.h>
#include <ATen/native/TensorIterator.h>
#include <ATen/ExpandUtils.h>
#include <ATen/RedispatchFunctions.h>
#include <torch/library.h>

namespace at {
namespace meta {
TORCH_META_FUNC(special_airy_ai)                                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_airy_bi)                                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_associated_laguerre_polynomial_l)         (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_associated_legendre_p)                    (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_associated_legendre_q)                    (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_bell_polynomial_b)                        (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bernoulli_number)                         (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_bernoulli_polynomial_b)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bessel_j)                                 (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bessel_j_0)                               (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_bessel_j_1)                               (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_bessel_y)                                 (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bessel_y_0)                               (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_bessel_y_1)                               (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_beta)                                     (const Tensor &a, const Tensor &b)                                    { build_borrowing_binary_float_op (maybe_get_output(), a, b       ); }
TORCH_META_FUNC(special_binomial_coefficient)                     (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bose_einstein_integral_g)                 (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bulirsch_elliptic_integral_cel)           (const Tensor &k, const Tensor &p, const Tensor &a, const Tensor &b)  { build_quaternary_op             (maybe_get_output(), p, k, a, b ); }
TORCH_META_FUNC(special_bulirsch_elliptic_integral_el1)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_bulirsch_elliptic_integral_el2)           (const Tensor &x, const Tensor &k, const Tensor &a, const Tensor &b)  { build_quaternary_op             (maybe_get_output(), x, k, a, b ); }
TORCH_META_FUNC(special_bulirsch_elliptic_integral_el3)           (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_carlson_elliptic_r_c)                     (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_carlson_elliptic_r_d)                     (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_carlson_elliptic_r_f)                     (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_carlson_elliptic_r_g)                     (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_carlson_elliptic_r_j)                     (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &p)  { build_quaternary_op             (maybe_get_output(), x, y, z, p ); }
TORCH_META_FUNC(special_chebyshev_polynomial_t)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_chebyshev_polynomial_u)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_chebyshev_polynomial_v)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_chebyshev_polynomial_w)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_clausen_cl)                               (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_clausen_sl)                               (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_complete_carlson_elliptic_r_f)            (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_complete_carlson_elliptic_r_g)            (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_complete_elliptic_integral_e)             (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_complete_elliptic_integral_k)             (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_complete_elliptic_integral_pi)            (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_complete_legendre_elliptic_integral_d)    (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_confluent_hypergeometric_0_f_1)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_cos_pi)                                   (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_cosh_pi)                                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_cosine_integral_ci)                       (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_debye_d)                                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_dilogarithm_li_2)                         (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_dirichlet_beta)                           (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_dirichlet_eta)                            (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_dirichlet_lambda)                         (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_double_factorial)                         (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_exp_airy_ai)                              (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_exp_airy_bi)                              (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_exp_modified_bessel_i)                    (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_exp_modified_bessel_k)                    (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_exp_modified_bessel_k_0)                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_exp_modified_bessel_k_1)                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_exponential_integral_e)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_exponential_integral_ei)                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_factorial)                                (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_falling_factorial)                        (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_fermi_dirac_integral_f)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_fresnel_integral_c)                       (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_fresnel_integral_s)                       (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_gauss_hypergeometric_2_f_1)               (const Tensor &a, const Tensor &b, const Tensor &c, const Tensor &z)  { build_quaternary_op             (maybe_get_output(), a, b, c, z ); }
TORCH_META_FUNC(special_gegenbauer_polynomial_c)                  (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_hankel_h_1)                               (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_hankel_h_2)                               (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_harmonic_number)                          (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_hermite_polynomial_h)                     (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_hermite_polynomial_he)                    (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_heuman_lambda)                            (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_hurwitz_zeta)                             (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_hyperbolic_cosine_integral_chi)           (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_hyperbolic_sine_integral_shi)             (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_incomplete_beta)                          (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_incomplete_elliptic_integral_e)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_incomplete_elliptic_integral_f)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_incomplete_elliptic_integral_pi)          (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_incomplete_legendre_elliptic_integral_d)  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_jacobi_polynomial_p)                      (const Tensor &n, const Tensor &a, const Tensor &b, const Tensor &x)  { build_quaternary_op             (maybe_get_output(), n, a, b, x ); }
TORCH_META_FUNC(special_jacobi_theta_1)                           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_jacobi_theta_2)                           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_jacobi_theta_3)                           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_jacobi_theta_4)                           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_jacobi_zeta)                              (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_kummer_confluent_hypergeometric_1_f_1)    (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_laguerre_polynomial_l)                    (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_lah_number)                               (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_legendre_polynomial_p)                    (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_legendre_q)                               (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_ln_binomial_coefficient)                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_ln_double_factorial)                      (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_ln_factorial)                             (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_ln_falling_factorial)                     (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_ln_gamma)                                 (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_ln_gamma_sign)                            (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_ln_rising_factorial)                      (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_logarithmic_integral_li)                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_lower_incomplete_gamma)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_modified_bessel_i)                        (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_modified_bessel_i_0)                      (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_modified_bessel_i_1)                      (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_modified_bessel_k)                        (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_modified_bessel_k_0)                      (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_modified_bessel_k_1)                      (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_neville_theta_c)                          (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_neville_theta_d)                          (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_neville_theta_n)                          (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_neville_theta_s)                          (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_nome_q)                                   (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_owens_t)                                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_polar_pi)                                 (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_polylogarithm_li)                         (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_prime_number)                             (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_radial_polynomial_r)                      (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_reciprocal_gamma)                         (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_riemann_zeta)                             (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_rising_factorial)                         (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_shifted_chebyshev_polynomial_t)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_shifted_chebyshev_polynomial_u)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_shifted_chebyshev_polynomial_v)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_shifted_chebyshev_polynomial_w)           (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_sin_pi)                                   (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_sinc_pi)                                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_sinh_pi)                                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_sinhc)                                    (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_sinhc_pi)                                 (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_spherical_bessel_j)                       (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_spherical_bessel_j_0)                     (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_spherical_bessel_y)                       (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_spherical_hankel_h_1)                     (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_spherical_hankel_h_2)                     (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_spherical_harmonic_y)                     (const Tensor &l, const Tensor &m, const Tensor &t, const Tensor &p)  { build_quaternary_op             (maybe_get_output(), l, m, t, p ); }
TORCH_META_FUNC(special_spherical_legendre_y)                     (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_spherical_modified_bessel_i)              (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_spherical_modified_bessel_k)              (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_stirling_number_1)                        (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_stirling_number_2)                        (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_tan_pi)                                   (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_tanh_pi)                                  (const Tensor &x)                                                     { build_borrowing_unary_float_op  (maybe_get_output(), x          ); }
TORCH_META_FUNC(special_theta_1)                                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_theta_2)                                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_theta_3)                                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_theta_4)                                  (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_tricomi_confluent_hypergeometric_u)       (const Tensor &a, const Tensor &b, const Tensor &c)                   { build_ternary_op                (maybe_get_output(), a, b, c    ); }
TORCH_META_FUNC(special_upper_incomplete_gamma)                   (const Tensor &n, const Tensor &x)                                    { build_borrowing_binary_float_op (maybe_get_output(), n, x       ); }
TORCH_META_FUNC(special_zernike_polynomial_z)                     (const Tensor &n, const Tensor &m, const Tensor &r, const Tensor &p)  { build_quaternary_op             (maybe_get_output(), n, m, r, p ); }
} // namespace meta

namespace native {
DEFINE_DISPATCH(special_airy_ai_stub); 
DEFINE_DISPATCH(special_airy_bi_stub);
DEFINE_DISPATCH(special_associated_laguerre_polynomial_l_stub);
DEFINE_DISPATCH(special_associated_legendre_p_stub);
DEFINE_DISPATCH(special_associated_legendre_q_stub);
DEFINE_DISPATCH(special_bell_polynomial_b_stub);
DEFINE_DISPATCH(special_bernoulli_number_stub);
DEFINE_DISPATCH(special_bernoulli_polynomial_b_stub);
DEFINE_DISPATCH(special_bessel_j_0_stub);
DEFINE_DISPATCH(special_bessel_j_1_stub);
DEFINE_DISPATCH(special_bessel_j_stub);
DEFINE_DISPATCH(special_bessel_y_0_stub);
DEFINE_DISPATCH(special_bessel_y_1_stub);
DEFINE_DISPATCH(special_bessel_y_stub);
DEFINE_DISPATCH(special_beta_stub);
DEFINE_DISPATCH(special_binomial_coefficient_stub);
DEFINE_DISPATCH(special_bose_einstein_integral_g_stub);
DEFINE_DISPATCH(special_bulirsch_elliptic_integral_cel_stub);
DEFINE_DISPATCH(special_bulirsch_elliptic_integral_el1_stub);
DEFINE_DISPATCH(special_bulirsch_elliptic_integral_el2_stub);
DEFINE_DISPATCH(special_bulirsch_elliptic_integral_el3_stub);
DEFINE_DISPATCH(special_carlson_elliptic_r_c_stub);
DEFINE_DISPATCH(special_carlson_elliptic_r_d_stub);
DEFINE_DISPATCH(special_carlson_elliptic_r_f_stub);
DEFINE_DISPATCH(special_carlson_elliptic_r_g_stub);
DEFINE_DISPATCH(special_carlson_elliptic_r_j_stub);
DEFINE_DISPATCH(special_chebyshev_polynomial_t_stub);
DEFINE_DISPATCH(special_chebyshev_polynomial_u_stub);
DEFINE_DISPATCH(special_chebyshev_polynomial_v_stub);
DEFINE_DISPATCH(special_chebyshev_polynomial_w_stub);
DEFINE_DISPATCH(special_clausen_cl_stub);
DEFINE_DISPATCH(special_clausen_sl_stub);
DEFINE_DISPATCH(special_complete_carlson_elliptic_r_f_stub);
DEFINE_DISPATCH(special_complete_carlson_elliptic_r_g_stub);
DEFINE_DISPATCH(special_complete_elliptic_integral_e_stub);
DEFINE_DISPATCH(special_complete_elliptic_integral_k_stub);
DEFINE_DISPATCH(special_complete_elliptic_integral_pi_stub);
DEFINE_DISPATCH(special_complete_legendre_elliptic_integral_d_stub);
DEFINE_DISPATCH(special_confluent_hypergeometric_0_f_1_stub);
DEFINE_DISPATCH(special_cos_pi_stub);
DEFINE_DISPATCH(special_cosh_pi_stub);
DEFINE_DISPATCH(special_cosine_integral_ci_stub);
DEFINE_DISPATCH(special_debye_d_stub);
DEFINE_DISPATCH(special_dilogarithm_li_2_stub);
DEFINE_DISPATCH(special_dirichlet_beta_stub);
DEFINE_DISPATCH(special_dirichlet_eta_stub);
DEFINE_DISPATCH(special_dirichlet_lambda_stub);
DEFINE_DISPATCH(special_double_factorial_stub);
DEFINE_DISPATCH(special_exp_airy_ai_stub);
DEFINE_DISPATCH(special_exp_airy_bi_stub);
DEFINE_DISPATCH(special_exp_modified_bessel_i_stub);
DEFINE_DISPATCH(special_exp_modified_bessel_k_0_stub);
DEFINE_DISPATCH(special_exp_modified_bessel_k_1_stub);
DEFINE_DISPATCH(special_exp_modified_bessel_k_stub);
DEFINE_DISPATCH(special_exponential_integral_e_stub);
DEFINE_DISPATCH(special_exponential_integral_ei_stub);
DEFINE_DISPATCH(special_factorial_stub);
DEFINE_DISPATCH(special_falling_factorial_stub);
DEFINE_DISPATCH(special_fermi_dirac_integral_f_stub);
DEFINE_DISPATCH(special_fresnel_integral_c_stub);
DEFINE_DISPATCH(special_fresnel_integral_s_stub);
DEFINE_DISPATCH(special_gauss_hypergeometric_2_f_1_stub);
DEFINE_DISPATCH(special_gegenbauer_polynomial_c_stub);
DEFINE_DISPATCH(special_hankel_h_1_stub);
DEFINE_DISPATCH(special_hankel_h_2_stub);
DEFINE_DISPATCH(special_harmonic_number_stub);
DEFINE_DISPATCH(special_hermite_polynomial_h_stub);
DEFINE_DISPATCH(special_hermite_polynomial_he_stub);
DEFINE_DISPATCH(special_heuman_lambda_stub);
DEFINE_DISPATCH(special_hurwitz_zeta_stub);
DEFINE_DISPATCH(special_hyperbolic_cosine_integral_chi_stub);
DEFINE_DISPATCH(special_hyperbolic_sine_integral_shi_stub);
DEFINE_DISPATCH(special_incomplete_beta_stub);
DEFINE_DISPATCH(special_incomplete_elliptic_integral_e_stub);
DEFINE_DISPATCH(special_incomplete_elliptic_integral_f_stub);
DEFINE_DISPATCH(special_incomplete_elliptic_integral_pi_stub);
DEFINE_DISPATCH(special_incomplete_legendre_elliptic_integral_d_stub);
DEFINE_DISPATCH(special_jacobi_polynomial_p_stub);
DEFINE_DISPATCH(special_jacobi_theta_1_stub);
DEFINE_DISPATCH(special_jacobi_theta_2_stub);
DEFINE_DISPATCH(special_jacobi_theta_3_stub);
DEFINE_DISPATCH(special_jacobi_theta_4_stub);
DEFINE_DISPATCH(special_jacobi_zeta_stub);
DEFINE_DISPATCH(special_kummer_confluent_hypergeometric_1_f_1_stub);
DEFINE_DISPATCH(special_laguerre_polynomial_l_stub);
DEFINE_DISPATCH(special_lah_number_stub);
DEFINE_DISPATCH(special_legendre_polynomial_p_stub);
DEFINE_DISPATCH(special_legendre_q_stub);
DEFINE_DISPATCH(special_ln_binomial_coefficient_stub);
DEFINE_DISPATCH(special_ln_double_factorial_stub);
DEFINE_DISPATCH(special_ln_factorial_stub);
DEFINE_DISPATCH(special_ln_falling_factorial_stub);
DEFINE_DISPATCH(special_ln_gamma_sign_stub);
DEFINE_DISPATCH(special_ln_gamma_stub);
DEFINE_DISPATCH(special_ln_rising_factorial_stub);
DEFINE_DISPATCH(special_logarithmic_integral_li_stub);
DEFINE_DISPATCH(special_lower_incomplete_gamma_stub);
DEFINE_DISPATCH(special_modified_bessel_i_0_stub);
DEFINE_DISPATCH(special_modified_bessel_i_1_stub);
DEFINE_DISPATCH(special_modified_bessel_i_stub);
DEFINE_DISPATCH(special_modified_bessel_k_0_stub);
DEFINE_DISPATCH(special_modified_bessel_k_1_stub);
DEFINE_DISPATCH(special_modified_bessel_k_stub);
DEFINE_DISPATCH(special_neville_theta_c_stub);
DEFINE_DISPATCH(special_neville_theta_d_stub);
DEFINE_DISPATCH(special_neville_theta_n_stub);
DEFINE_DISPATCH(special_neville_theta_s_stub);
DEFINE_DISPATCH(special_nome_q_stub);
DEFINE_DISPATCH(special_owens_t_stub);
DEFINE_DISPATCH(special_polar_pi_stub);
DEFINE_DISPATCH(special_polylogarithm_li_stub);
DEFINE_DISPATCH(special_prime_number_stub);
DEFINE_DISPATCH(special_radial_polynomial_r_stub);
DEFINE_DISPATCH(special_reciprocal_gamma_stub);
DEFINE_DISPATCH(special_riemann_zeta_stub);
DEFINE_DISPATCH(special_rising_factorial_stub);
DEFINE_DISPATCH(special_shifted_chebyshev_polynomial_t_stub);
DEFINE_DISPATCH(special_shifted_chebyshev_polynomial_u_stub);
DEFINE_DISPATCH(special_shifted_chebyshev_polynomial_v_stub);
DEFINE_DISPATCH(special_shifted_chebyshev_polynomial_w_stub);
DEFINE_DISPATCH(special_sin_pi_stub);
DEFINE_DISPATCH(special_sinc_pi_stub);
DEFINE_DISPATCH(special_sinh_pi_stub);
DEFINE_DISPATCH(special_sinhc_pi_stub);
DEFINE_DISPATCH(special_sinhc_stub);
DEFINE_DISPATCH(special_spherical_bessel_j_0_stub);
DEFINE_DISPATCH(special_spherical_bessel_j_stub);
DEFINE_DISPATCH(special_spherical_bessel_y_stub);
DEFINE_DISPATCH(special_spherical_hankel_h_1_stub);
DEFINE_DISPATCH(special_spherical_hankel_h_2_stub);
DEFINE_DISPATCH(special_spherical_harmonic_y_stub);
DEFINE_DISPATCH(special_spherical_legendre_y_stub);
DEFINE_DISPATCH(special_spherical_modified_bessel_i_stub);
DEFINE_DISPATCH(special_spherical_modified_bessel_k_stub);
DEFINE_DISPATCH(special_stirling_number_1_stub);
DEFINE_DISPATCH(special_stirling_number_2_stub);
DEFINE_DISPATCH(special_tan_pi_stub);
DEFINE_DISPATCH(special_tanh_pi_stub);
DEFINE_DISPATCH(special_theta_1_stub);
DEFINE_DISPATCH(special_theta_2_stub);
DEFINE_DISPATCH(special_theta_3_stub);
DEFINE_DISPATCH(special_theta_4_stub);
DEFINE_DISPATCH(special_tricomi_confluent_hypergeometric_u_stub);
DEFINE_DISPATCH(special_upper_incomplete_gamma_stub);
DEFINE_DISPATCH(special_zernike_polynomial_z_stub);

TORCH_IMPL_FUNC(special_airy_ai_out)                                  (const Tensor &x, const Tensor &output)                                                     { special_airy_ai_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_airy_bi_out)                                  (const Tensor &x, const Tensor &output)                                                     { special_airy_bi_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_associated_laguerre_polynomial_l_out)         (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_associated_laguerre_polynomial_l_stub         (device_type(), *this); }
TORCH_IMPL_FUNC(special_associated_legendre_p_out)                    (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_associated_legendre_p_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_associated_legendre_q_out)                    (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_associated_legendre_q_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_bell_polynomial_b_out)                        (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_bell_polynomial_b_stub                        (device_type(), *this); }
TORCH_IMPL_FUNC(special_bernoulli_number_out)                         (const Tensor &x, const Tensor &output)                                                     { special_bernoulli_number_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_bernoulli_polynomial_b_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_bernoulli_polynomial_b_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_bessel_j_0_out)                               (const Tensor &x, const Tensor &output)                                                     { special_bessel_j_0_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_bessel_j_1_out)                               (const Tensor &x, const Tensor &output)                                                     { special_bessel_j_1_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_bessel_j_out)                                 (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_bessel_j_stub                                 (device_type(), *this); }
TORCH_IMPL_FUNC(special_bessel_y_0_out)                               (const Tensor &x, const Tensor &output)                                                     { special_bessel_y_0_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_bessel_y_1_out)                               (const Tensor &x, const Tensor &output)                                                     { special_bessel_y_1_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_bessel_y_out)                                 (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_bessel_y_stub                                 (device_type(), *this); }
TORCH_IMPL_FUNC(special_beta_out)                                     (const Tensor &a, const Tensor &b, const Tensor &output)                                    { special_beta_stub                                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_binomial_coefficient_out)                     (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_binomial_coefficient_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_bose_einstein_integral_g_out)                 (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_bose_einstein_integral_g_stub                 (device_type(), *this); }
TORCH_IMPL_FUNC(special_bulirsch_elliptic_integral_cel_out)           (const Tensor &k, const Tensor &p, const Tensor &a, const Tensor &b, const Tensor &output)  { special_bulirsch_elliptic_integral_cel_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_bulirsch_elliptic_integral_el1_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_bulirsch_elliptic_integral_el1_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_bulirsch_elliptic_integral_el2_out)           (const Tensor &x, const Tensor &k, const Tensor &a, const Tensor &b, const Tensor &output)  { special_bulirsch_elliptic_integral_el2_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_bulirsch_elliptic_integral_el3_out)           (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_bulirsch_elliptic_integral_el3_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_carlson_elliptic_r_c_out)                     (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_carlson_elliptic_r_c_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_carlson_elliptic_r_d_out)                     (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_carlson_elliptic_r_d_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_carlson_elliptic_r_f_out)                     (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_carlson_elliptic_r_f_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_carlson_elliptic_r_g_out)                     (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_carlson_elliptic_r_g_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_carlson_elliptic_r_j_out)                     (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &p, const Tensor &output)  { special_carlson_elliptic_r_j_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_chebyshev_polynomial_t_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_chebyshev_polynomial_t_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_chebyshev_polynomial_u_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_chebyshev_polynomial_u_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_chebyshev_polynomial_v_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_chebyshev_polynomial_v_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_chebyshev_polynomial_w_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_chebyshev_polynomial_w_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_clausen_cl_out)                               (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_clausen_cl_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_clausen_sl_out)                               (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_clausen_sl_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_complete_carlson_elliptic_r_f_out)            (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_complete_carlson_elliptic_r_f_stub            (device_type(), *this); }
TORCH_IMPL_FUNC(special_complete_carlson_elliptic_r_g_out)            (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_complete_carlson_elliptic_r_g_stub            (device_type(), *this); }
TORCH_IMPL_FUNC(special_complete_elliptic_integral_e_out)             (const Tensor &x, const Tensor &output)                                                     { special_complete_elliptic_integral_e_stub             (device_type(), *this); }
TORCH_IMPL_FUNC(special_complete_elliptic_integral_k_out)             (const Tensor &x, const Tensor &output)                                                     { special_complete_elliptic_integral_k_stub             (device_type(), *this); }
TORCH_IMPL_FUNC(special_complete_elliptic_integral_pi_out)            (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_complete_elliptic_integral_pi_stub            (device_type(), *this); }
TORCH_IMPL_FUNC(special_complete_legendre_elliptic_integral_d_out)    (const Tensor &x, const Tensor &output)                                                     { special_complete_legendre_elliptic_integral_d_stub    (device_type(), *this); }
TORCH_IMPL_FUNC(special_confluent_hypergeometric_0_f_1_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_confluent_hypergeometric_0_f_1_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_cos_pi_out)                                   (const Tensor &x, const Tensor &output)                                                     { special_cos_pi_stub                                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_cosh_pi_out)                                  (const Tensor &x, const Tensor &output)                                                     { special_cosh_pi_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_cosine_integral_ci_out)                       (const Tensor &x, const Tensor &output)                                                     { special_cosine_integral_ci_stub                       (device_type(), *this); }
TORCH_IMPL_FUNC(special_debye_d_out)                                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_debye_d_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_dilogarithm_li_2_out)                         (const Tensor &x, const Tensor &output)                                                     { special_dilogarithm_li_2_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_dirichlet_beta_out)                           (const Tensor &x, const Tensor &output)                                                     { special_dirichlet_beta_stub                           (device_type(), *this); }
TORCH_IMPL_FUNC(special_dirichlet_eta_out)                            (const Tensor &x, const Tensor &output)                                                     { special_dirichlet_eta_stub                            (device_type(), *this); }
TORCH_IMPL_FUNC(special_dirichlet_lambda_out)                         (const Tensor &x, const Tensor &output)                                                     { special_dirichlet_lambda_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_double_factorial_out)                         (const Tensor &x, const Tensor &output)                                                     { special_double_factorial_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_exp_airy_ai_out)                              (const Tensor &x, const Tensor &output)                                                     { special_exp_airy_ai_stub                              (device_type(), *this); }
TORCH_IMPL_FUNC(special_exp_airy_bi_out)                              (const Tensor &x, const Tensor &output)                                                     { special_exp_airy_bi_stub                              (device_type(), *this); }
TORCH_IMPL_FUNC(special_exp_modified_bessel_i_out)                    (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_exp_modified_bessel_i_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_exp_modified_bessel_k_0_out)                  (const Tensor &x, const Tensor &output)                                                     { special_exp_modified_bessel_k_0_stub                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_exp_modified_bessel_k_1_out)                  (const Tensor &x, const Tensor &output)                                                     { special_exp_modified_bessel_k_1_stub                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_exp_modified_bessel_k_out)                    (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_exp_modified_bessel_k_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_exponential_integral_e_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_exponential_integral_e_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_exponential_integral_ei_out)                  (const Tensor &x, const Tensor &output)                                                     { special_exponential_integral_ei_stub                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_factorial_out)                                (const Tensor &x, const Tensor &output)                                                     { special_factorial_stub                                (device_type(), *this); }
TORCH_IMPL_FUNC(special_falling_factorial_out)                        (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_falling_factorial_stub                        (device_type(), *this); }
TORCH_IMPL_FUNC(special_fermi_dirac_integral_f_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_fermi_dirac_integral_f_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_fresnel_integral_c_out)                       (const Tensor &x, const Tensor &output)                                                     { special_fresnel_integral_c_stub                       (device_type(), *this); }
TORCH_IMPL_FUNC(special_fresnel_integral_s_out)                       (const Tensor &x, const Tensor &output)                                                     { special_fresnel_integral_s_stub                       (device_type(), *this); }
TORCH_IMPL_FUNC(special_gauss_hypergeometric_2_f_1_out)               (const Tensor &a, const Tensor &b, const Tensor &c, const Tensor &z, const Tensor &output)  { special_gauss_hypergeometric_2_f_1_stub               (device_type(), *this); }
TORCH_IMPL_FUNC(special_gegenbauer_polynomial_c_out)                  (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_gegenbauer_polynomial_c_stub                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_hankel_h_1_out)                               (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_hankel_h_1_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_hankel_h_2_out)                               (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_hankel_h_2_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_harmonic_number_out)                          (const Tensor &x, const Tensor &output)                                                     { special_harmonic_number_stub                          (device_type(), *this); }
TORCH_IMPL_FUNC(special_hermite_polynomial_h_out)                     (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_hermite_polynomial_h_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_hermite_polynomial_he_out)                    (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_hermite_polynomial_he_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_heuman_lambda_out)                            (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_heuman_lambda_stub                            (device_type(), *this); }
TORCH_IMPL_FUNC(special_hurwitz_zeta_out)                             (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_hurwitz_zeta_stub                             (device_type(), *this); }
TORCH_IMPL_FUNC(special_hyperbolic_cosine_integral_chi_out)           (const Tensor &x, const Tensor &output)                                                     { special_hyperbolic_cosine_integral_chi_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_hyperbolic_sine_integral_shi_out)             (const Tensor &x, const Tensor &output)                                                     { special_hyperbolic_sine_integral_shi_stub             (device_type(), *this); }
TORCH_IMPL_FUNC(special_incomplete_beta_out)                          (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_incomplete_beta_stub                          (device_type(), *this); }
TORCH_IMPL_FUNC(special_incomplete_elliptic_integral_e_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_incomplete_elliptic_integral_e_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_incomplete_elliptic_integral_f_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_incomplete_elliptic_integral_f_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_incomplete_elliptic_integral_pi_out)          (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_incomplete_elliptic_integral_pi_stub          (device_type(), *this); }
TORCH_IMPL_FUNC(special_incomplete_legendre_elliptic_integral_d_out)  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_incomplete_legendre_elliptic_integral_d_stub  (device_type(), *this); }
TORCH_IMPL_FUNC(special_jacobi_polynomial_p_out)                      (const Tensor &n, const Tensor &a, const Tensor &b, const Tensor &x, const Tensor &output)  { special_jacobi_polynomial_p_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_jacobi_theta_1_out)                           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_jacobi_theta_1_stub                           (device_type(), *this); }
TORCH_IMPL_FUNC(special_jacobi_theta_2_out)                           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_jacobi_theta_2_stub                           (device_type(), *this); }
TORCH_IMPL_FUNC(special_jacobi_theta_3_out)                           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_jacobi_theta_3_stub                           (device_type(), *this); }
TORCH_IMPL_FUNC(special_jacobi_theta_4_out)                           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_jacobi_theta_4_stub                           (device_type(), *this); }
TORCH_IMPL_FUNC(special_jacobi_zeta_out)                              (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_jacobi_zeta_stub                              (device_type(), *this); }
TORCH_IMPL_FUNC(special_kummer_confluent_hypergeometric_1_f_1_out)    (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_kummer_confluent_hypergeometric_1_f_1_stub    (device_type(), *this); }
TORCH_IMPL_FUNC(special_laguerre_polynomial_l_out)                    (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_laguerre_polynomial_l_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_lah_number_out)                               (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_lah_number_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_legendre_polynomial_p_out)                    (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_legendre_polynomial_p_stub                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_legendre_q_out)                               (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_legendre_q_stub                               (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_binomial_coefficient_out)                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_ln_binomial_coefficient_stub                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_double_factorial_out)                      (const Tensor &x, const Tensor &output)                                                     { special_ln_double_factorial_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_factorial_out)                             (const Tensor &x, const Tensor &output)                                                     { special_ln_factorial_stub                             (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_falling_factorial_out)                     (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_ln_falling_factorial_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_gamma_out)                                 (const Tensor &x, const Tensor &output)                                                     { special_ln_gamma_stub                                 (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_gamma_sign_out)                            (const Tensor &x, const Tensor &output)                                                     { special_ln_gamma_sign_stub                            (device_type(), *this); }
TORCH_IMPL_FUNC(special_ln_rising_factorial_out)                      (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_ln_rising_factorial_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_logarithmic_integral_li_out)                  (const Tensor &x, const Tensor &output)                                                     { special_logarithmic_integral_li_stub                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_lower_incomplete_gamma_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_lower_incomplete_gamma_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_modified_bessel_i_0_out)                      (const Tensor &x, const Tensor &output)                                                     { special_modified_bessel_i_0_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_modified_bessel_i_1_out)                      (const Tensor &x, const Tensor &output)                                                     { special_modified_bessel_i_1_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_modified_bessel_i_out)                        (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_modified_bessel_i_stub                        (device_type(), *this); }
TORCH_IMPL_FUNC(special_modified_bessel_k_0_out)                      (const Tensor &x, const Tensor &output)                                                     { special_modified_bessel_k_0_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_modified_bessel_k_1_out)                      (const Tensor &x, const Tensor &output)                                                     { special_modified_bessel_k_1_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_modified_bessel_k_out)                        (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_modified_bessel_k_stub                        (device_type(), *this); }
TORCH_IMPL_FUNC(special_neville_theta_c_out)                          (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_neville_theta_c_stub                          (device_type(), *this); }
TORCH_IMPL_FUNC(special_neville_theta_d_out)                          (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_neville_theta_d_stub                          (device_type(), *this); }
TORCH_IMPL_FUNC(special_neville_theta_n_out)                          (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_neville_theta_n_stub                          (device_type(), *this); }
TORCH_IMPL_FUNC(special_neville_theta_s_out)                          (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_neville_theta_s_stub                          (device_type(), *this); }
TORCH_IMPL_FUNC(special_nome_q_out)                                   (const Tensor &x, const Tensor &output)                                                     { special_nome_q_stub                                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_owens_t_out)                                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_owens_t_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_polar_pi_out)                                 (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_polar_pi_stub                                 (device_type(), *this); }
TORCH_IMPL_FUNC(special_polylogarithm_li_out)                         (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_polylogarithm_li_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_prime_number_out)                             (const Tensor &x, const Tensor &output)                                                     { special_prime_number_stub                             (device_type(), *this); }
TORCH_IMPL_FUNC(special_radial_polynomial_r_out)                      (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_radial_polynomial_r_stub                      (device_type(), *this); }
TORCH_IMPL_FUNC(special_reciprocal_gamma_out)                         (const Tensor &x, const Tensor &output)                                                     { special_reciprocal_gamma_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_riemann_zeta_out)                             (const Tensor &x, const Tensor &output)                                                     { special_riemann_zeta_stub                             (device_type(), *this); }
TORCH_IMPL_FUNC(special_rising_factorial_out)                         (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_rising_factorial_stub                         (device_type(), *this); }
TORCH_IMPL_FUNC(special_shifted_chebyshev_polynomial_t_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_shifted_chebyshev_polynomial_t_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_shifted_chebyshev_polynomial_u_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_shifted_chebyshev_polynomial_u_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_shifted_chebyshev_polynomial_v_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_shifted_chebyshev_polynomial_v_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_shifted_chebyshev_polynomial_w_out)           (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_shifted_chebyshev_polynomial_w_stub           (device_type(), *this); }
TORCH_IMPL_FUNC(special_sin_pi_out)                                   (const Tensor &x, const Tensor &output)                                                     { special_sin_pi_stub                                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_sinc_pi_out)                                  (const Tensor &x, const Tensor &output)                                                     { special_sinc_pi_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_sinh_pi_out)                                  (const Tensor &x, const Tensor &output)                                                     { special_sinh_pi_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_sinhc_out)                                    (const Tensor &x, const Tensor &output)                                                     { special_sinhc_stub                                    (device_type(), *this); }
TORCH_IMPL_FUNC(special_sinhc_pi_out)                                 (const Tensor &x, const Tensor &output)                                                     { special_sinhc_pi_stub                                 (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_bessel_j_0_out)                     (const Tensor &x, const Tensor &output)                                                     { special_spherical_bessel_j_0_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_bessel_j_out)                       (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_spherical_bessel_j_stub                       (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_bessel_y_out)                       (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_spherical_bessel_y_stub                       (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_hankel_h_1_out)                     (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_spherical_hankel_h_1_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_hankel_h_2_out)                     (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_spherical_hankel_h_2_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_harmonic_y_out)                     (const Tensor &l, const Tensor &m, const Tensor &t, const Tensor &p, const Tensor &output)  { special_spherical_harmonic_y_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_legendre_y_out)                     (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_spherical_legendre_y_stub                     (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_modified_bessel_i_out)              (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_spherical_modified_bessel_i_stub              (device_type(), *this); }
TORCH_IMPL_FUNC(special_spherical_modified_bessel_k_out)              (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_spherical_modified_bessel_k_stub              (device_type(), *this); }
TORCH_IMPL_FUNC(special_stirling_number_1_out)                        (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_stirling_number_1_stub                        (device_type(), *this); }
TORCH_IMPL_FUNC(special_stirling_number_2_out)                        (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_stirling_number_2_stub                        (device_type(), *this); }
TORCH_IMPL_FUNC(special_tan_pi_out)                                   (const Tensor &x, const Tensor &output)                                                     { special_tan_pi_stub                                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_tanh_pi_out)                                  (const Tensor &x, const Tensor &output)                                                     { special_tanh_pi_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_theta_1_out)                                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_theta_1_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_theta_2_out)                                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_theta_2_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_theta_3_out)                                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_theta_3_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_theta_4_out)                                  (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_theta_4_stub                                  (device_type(), *this); }
TORCH_IMPL_FUNC(special_tricomi_confluent_hypergeometric_u_out)       (const Tensor &x, const Tensor &y, const Tensor &z, const Tensor &output)                   { special_tricomi_confluent_hypergeometric_u_stub       (device_type(), *this); }
TORCH_IMPL_FUNC(special_upper_incomplete_gamma_out)                   (const Tensor &n, const Tensor &x, const Tensor &output)                                    { special_upper_incomplete_gamma_stub                   (device_type(), *this); }
TORCH_IMPL_FUNC(special_zernike_polynomial_z_out)                     (const Tensor &n, const Tensor &m, const Tensor &r, const Tensor &p, const Tensor &output)  { special_zernike_polynomial_z_stub                     (device_type(), *this); }

Tensor  special_bell_polynomial_b                           (const Tensor &n, const Scalar &x)                                                    { return at::special_bell_polynomial_b                           (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_bell_polynomial_b                           (const Scalar &n, const Tensor &x)                                                    { return at::special_bell_polynomial_b                           (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_bell_polynomial_b_out                       (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_bell_polynomial_b_out                       (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_bell_polynomial_b_out                       (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_bell_polynomial_b_out                       (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_bernoulli_polynomial_b                      (const Tensor &n, const Scalar &x)                                                    { return at::special_bernoulli_polynomial_b                      (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_bernoulli_polynomial_b                      (const Scalar &n, const Tensor &x)                                                    { return at::special_bernoulli_polynomial_b                      (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_bernoulli_polynomial_b_out                  (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_bernoulli_polynomial_b_out                  (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_bernoulli_polynomial_b_out                  (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_bernoulli_polynomial_b_out                  (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_bessel_j                                    (const Tensor &v, const Scalar &z)                                                    { return at::special_bessel_j                                    (        wrapped_scalar_tensor(z), v                                                                           ); }
Tensor  special_bessel_j                                    (const Scalar &v, const Tensor &z)                                                    { return at::special_bessel_j                                    (        z,                        wrapped_scalar_tensor(v)                                                    ); }
Tensor& special_bessel_j_out                                (const Scalar &v, const Tensor &z, Tensor &output)                                    { return at::special_bessel_j_out                                (output, wrapped_scalar_tensor(v), z                                                                           ); }
Tensor& special_bessel_j_out                                (const Tensor &v, const Scalar &z, Tensor &output)                                    { return at::special_bessel_j_out                                (output, v,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_bessel_y                                    (const Tensor &v, const Scalar &z)                                                    { return at::special_bessel_y                                    (        wrapped_scalar_tensor(z), v                                                                           ); }
Tensor  special_bessel_y                                    (const Scalar &v, const Tensor &z)                                                    { return at::special_bessel_y                                    (        z,                        wrapped_scalar_tensor(v)                                                    ); }
Tensor& special_bessel_y_out                                (const Scalar &v, const Tensor &z, Tensor &output)                                    { return at::special_bessel_y_out                                (output, wrapped_scalar_tensor(v), z                                                                           ); }
Tensor& special_bessel_y_out                                (const Tensor &v, const Scalar &z, Tensor &output)                                    { return at::special_bessel_y_out                                (output, v,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_beta                                        (const Tensor &a, const Scalar &b)                                                    { return at::special_beta                                        (        wrapped_scalar_tensor(b), a                                                                           ); }
Tensor  special_beta                                        (const Scalar &a, const Tensor &b)                                                    { return at::special_beta                                        (        b,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_beta_out                                    (const Scalar &a, const Tensor &b, Tensor &output)                                    { return at::special_beta_out                                    (output, b,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_beta_out                                    (const Tensor &a, const Scalar &b, Tensor &output)                                    { return at::special_beta_out                                    (output, wrapped_scalar_tensor(b), a                                                                           ); }
Tensor  special_binomial_coefficient                        (const Tensor &n, const Scalar &x)                                                    { return at::special_binomial_coefficient                        (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_binomial_coefficient                        (const Scalar &n, const Tensor &x)                                                    { return at::special_binomial_coefficient                        (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_binomial_coefficient_out                    (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_binomial_coefficient_out                    (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_binomial_coefficient_out                    (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_binomial_coefficient_out                    (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_bose_einstein_integral_g                    (const Tensor &s, const Scalar &x)                                                    { return at::special_bose_einstein_integral_g                    (        wrapped_scalar_tensor(x), s                                                                           ); }
Tensor  special_bose_einstein_integral_g                    (const Scalar &s, const Tensor &x)                                                    { return at::special_bose_einstein_integral_g                    (        x,                        wrapped_scalar_tensor(s)                                                    ); }
Tensor& special_bose_einstein_integral_g_out                (const Scalar &s, const Tensor &x, Tensor &output)                                    { return at::special_bose_einstein_integral_g_out                (output, wrapped_scalar_tensor(s), x                                                                           ); }
Tensor& special_bose_einstein_integral_g_out                (const Tensor &s, const Scalar &x, Tensor &output)                                    { return at::special_bose_einstein_integral_g_out                (output, s,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_bulirsch_elliptic_integral_el1              (const Tensor &n, const Scalar &x)                                                    { return at::special_bulirsch_elliptic_integral_el1              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_bulirsch_elliptic_integral_el1              (const Scalar &n, const Tensor &x)                                                    { return at::special_bulirsch_elliptic_integral_el1              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_bulirsch_elliptic_integral_el1_out          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_bulirsch_elliptic_integral_el1_out          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_bulirsch_elliptic_integral_el1_out          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_bulirsch_elliptic_integral_el1_out          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_carlson_elliptic_r_c                        (const Tensor &x, const Scalar &y)                                                    { return at::special_carlson_elliptic_r_c                        (        x,                        wrapped_scalar_tensor(y)                                                    ); }
Tensor  special_carlson_elliptic_r_c                        (const Scalar &x, const Tensor &y)                                                    { return at::special_carlson_elliptic_r_c                        (        wrapped_scalar_tensor(x), y                                                                           ); }
Tensor& special_carlson_elliptic_r_c_out                    (const Scalar &x, const Tensor &y, Tensor &output)                                    { return at::special_carlson_elliptic_r_c_out                    (output, y,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor& special_carlson_elliptic_r_c_out                    (const Tensor &x, const Scalar &y, Tensor &output)                                    { return at::special_carlson_elliptic_r_c_out                    (output, wrapped_scalar_tensor(y), x                                                                           ); }
Tensor  special_chebyshev_polynomial_t                      (const Tensor &n, const Scalar &x)                                                    { return at::special_chebyshev_polynomial_t                      (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_chebyshev_polynomial_t                      (const Scalar &n, const Tensor &x)                                                    { return at::special_chebyshev_polynomial_t                      (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_chebyshev_polynomial_t_out                  (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_t_out                  (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_chebyshev_polynomial_t_out                  (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_t_out                  (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_chebyshev_polynomial_u                      (const Tensor &n, const Scalar &x)                                                    { return at::special_chebyshev_polynomial_u                      (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_chebyshev_polynomial_u                      (const Scalar &n, const Tensor &x)                                                    { return at::special_chebyshev_polynomial_u                      (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_chebyshev_polynomial_u_out                  (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_u_out                  (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_chebyshev_polynomial_u_out                  (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_u_out                  (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_chebyshev_polynomial_v                      (const Tensor &n, const Scalar &x)                                                    { return at::special_chebyshev_polynomial_v                      (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_chebyshev_polynomial_v                      (const Scalar &n, const Tensor &x)                                                    { return at::special_chebyshev_polynomial_v                      (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_chebyshev_polynomial_v_out                  (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_v_out                  (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_chebyshev_polynomial_v_out                  (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_v_out                  (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_chebyshev_polynomial_w                      (const Tensor &n, const Scalar &x)                                                    { return at::special_chebyshev_polynomial_w                      (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_chebyshev_polynomial_w                      (const Scalar &n, const Tensor &x)                                                    { return at::special_chebyshev_polynomial_w                      (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_chebyshev_polynomial_w_out                  (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_w_out                  (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_chebyshev_polynomial_w_out                  (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_chebyshev_polynomial_w_out                  (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_clausen_cl                                  (const Tensor &n, const Scalar &x)                                                    { return at::special_clausen_cl                                  (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_clausen_cl                                  (const Scalar &n, const Tensor &x)                                                    { return at::special_clausen_cl                                  (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_clausen_cl_out                              (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_clausen_cl_out                              (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_clausen_cl_out                              (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_clausen_cl_out                              (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_clausen_sl                                  (const Tensor &n, const Scalar &x)                                                    { return at::special_clausen_sl                                  (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_clausen_sl                                  (const Scalar &n, const Tensor &x)                                                    { return at::special_clausen_sl                                  (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_clausen_sl_out                              (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_clausen_sl_out                              (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_clausen_sl_out                              (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_clausen_sl_out                              (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_complete_carlson_elliptic_r_f               (const Tensor &y, const Scalar &z)                                                    { return at::special_complete_carlson_elliptic_r_f               (        wrapped_scalar_tensor(z), y                                                                           ); }
Tensor  special_complete_carlson_elliptic_r_f               (const Scalar &y, const Tensor &z)                                                    { return at::special_complete_carlson_elliptic_r_f               (        z,                        wrapped_scalar_tensor(y)                                                    ); }
Tensor& special_complete_carlson_elliptic_r_f_out           (const Scalar &y, const Tensor &z, Tensor &output)                                    { return at::special_complete_carlson_elliptic_r_f_out           (output, z,                        wrapped_scalar_tensor(y)                                                    ); }
Tensor& special_complete_carlson_elliptic_r_f_out           (const Tensor &y, const Scalar &z, Tensor &output)                                    { return at::special_complete_carlson_elliptic_r_f_out           (output, wrapped_scalar_tensor(z), y                                                                           ); }
Tensor  special_complete_carlson_elliptic_r_g               (const Tensor &y, const Scalar &z)                                                    { return at::special_complete_carlson_elliptic_r_g               (        wrapped_scalar_tensor(z), y                                                                           ); }
Tensor  special_complete_carlson_elliptic_r_g               (const Scalar &y, const Tensor &z)                                                    { return at::special_complete_carlson_elliptic_r_g               (        z,                        wrapped_scalar_tensor(y)                                                    ); }
Tensor& special_complete_carlson_elliptic_r_g_out           (const Scalar &y, const Tensor &z, Tensor &output)                                    { return at::special_complete_carlson_elliptic_r_g_out           (output, z,                        wrapped_scalar_tensor(y)                                                    ); }
Tensor& special_complete_carlson_elliptic_r_g_out           (const Tensor &y, const Scalar &z, Tensor &output)                                    { return at::special_complete_carlson_elliptic_r_g_out           (output, wrapped_scalar_tensor(z), y                                                                           ); }
Tensor  special_complete_elliptic_integral_pi               (const Tensor &a, const Scalar &k)                                                    { return at::special_complete_elliptic_integral_pi               (        wrapped_scalar_tensor(k), a                                                                           ); }
Tensor  special_complete_elliptic_integral_pi               (const Scalar &a, const Tensor &k)                                                    { return at::special_complete_elliptic_integral_pi               (        k,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_complete_elliptic_integral_pi_out           (const Scalar &a, const Tensor &k, Tensor &output)                                    { return at::special_complete_elliptic_integral_pi_out           (output, wrapped_scalar_tensor(a), k                                                                           ); }
Tensor& special_complete_elliptic_integral_pi_out           (const Tensor &a, const Scalar &k, Tensor &output)                                    { return at::special_complete_elliptic_integral_pi_out           (output, a,                        wrapped_scalar_tensor(k)                                                    ); }
Tensor  special_confluent_hypergeometric_0_f_1              (const Tensor &n, const Scalar &x)                                                    { return at::special_confluent_hypergeometric_0_f_1              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_confluent_hypergeometric_0_f_1              (const Scalar &n, const Tensor &x)                                                    { return at::special_confluent_hypergeometric_0_f_1              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_confluent_hypergeometric_0_f_1_out          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_confluent_hypergeometric_0_f_1_out          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_confluent_hypergeometric_0_f_1_out          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_confluent_hypergeometric_0_f_1_out          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_debye_d                                     (const Tensor &n, const Scalar &x)                                                    { return at::special_debye_d                                     (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_debye_d                                     (const Scalar &n, const Tensor &x)                                                    { return at::special_debye_d                                     (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_debye_d_out                                 (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_debye_d_out                                 (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_debye_d_out                                 (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_debye_d_out                                 (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_exp_modified_bessel_i                       (const Tensor &n, const Scalar &x)                                                    { return at::special_exp_modified_bessel_i                       (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_exp_modified_bessel_i                       (const Scalar &n, const Tensor &x)                                                    { return at::special_exp_modified_bessel_i                       (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_exp_modified_bessel_i_out                   (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_exp_modified_bessel_i_out                   (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_exp_modified_bessel_i_out                   (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_exp_modified_bessel_i_out                   (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_exp_modified_bessel_k                       (const Tensor &n, const Scalar &x)                                                    { return at::special_exp_modified_bessel_k                       (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_exp_modified_bessel_k                       (const Scalar &n, const Tensor &x)                                                    { return at::special_exp_modified_bessel_k                       (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_exp_modified_bessel_k_out                   (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_exp_modified_bessel_k_out                   (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_exp_modified_bessel_k_out                   (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_exp_modified_bessel_k_out                   (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_exponential_integral_e                      (const Tensor &n, const Scalar &x)                                                    { return at::special_exponential_integral_e                      (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_exponential_integral_e                      (const Scalar &n, const Tensor &x)                                                    { return at::special_exponential_integral_e                      (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_exponential_integral_e_out                  (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_exponential_integral_e_out                  (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_exponential_integral_e_out                  (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_exponential_integral_e_out                  (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_falling_factorial                           (const Tensor &n, const Scalar &x)                                                    { return at::special_falling_factorial                           (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_falling_factorial                           (const Scalar &n, const Tensor &x)                                                    { return at::special_falling_factorial                           (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_falling_factorial_out                       (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_falling_factorial_out                       (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_falling_factorial_out                       (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_falling_factorial_out                       (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_fermi_dirac_integral_f                      (const Tensor &s, const Scalar &x)                                                    { return at::special_fermi_dirac_integral_f                      (        wrapped_scalar_tensor(x), s                                                                           ); }
Tensor  special_fermi_dirac_integral_f                      (const Scalar &s, const Tensor &x)                                                    { return at::special_fermi_dirac_integral_f                      (        x,                        wrapped_scalar_tensor(s)                                                    ); }
Tensor& special_fermi_dirac_integral_f_out                  (const Scalar &s, const Tensor &x, Tensor &output)                                    { return at::special_fermi_dirac_integral_f_out                  (output, wrapped_scalar_tensor(s), x                                                                           ); }
Tensor& special_fermi_dirac_integral_f_out                  (const Tensor &s, const Scalar &x, Tensor &output)                                    { return at::special_fermi_dirac_integral_f_out                  (output, s,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_hankel_h_1                                  (const Tensor &v, const Scalar &z)                                                    { return at::special_hankel_h_1                                  (        wrapped_scalar_tensor(z), v                                                                           ); }
Tensor  special_hankel_h_1                                  (const Scalar &v, const Tensor &z)                                                    { return at::special_hankel_h_1                                  (        z,                        wrapped_scalar_tensor(v)                                                    ); }
Tensor& special_hankel_h_1_out                              (const Scalar &v, const Tensor &z, Tensor &output)                                    { return at::special_hankel_h_1_out                              (output, wrapped_scalar_tensor(v), z                                                                           ); }
Tensor& special_hankel_h_1_out                              (const Tensor &v, const Scalar &z, Tensor &output)                                    { return at::special_hankel_h_1_out                              (output, v,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_hankel_h_2                                  (const Tensor &v, const Scalar &z)                                                    { return at::special_hankel_h_2                                  (        wrapped_scalar_tensor(z), v                                                                           ); }
Tensor  special_hankel_h_2                                  (const Scalar &v, const Tensor &z)                                                    { return at::special_hankel_h_2                                  (        z,                        wrapped_scalar_tensor(v)                                                    ); }
Tensor& special_hankel_h_2_out                              (const Scalar &v, const Tensor &z, Tensor &output)                                    { return at::special_hankel_h_2_out                              (output, wrapped_scalar_tensor(v), z                                                                           ); }
Tensor& special_hankel_h_2_out                              (const Tensor &v, const Scalar &z, Tensor &output)                                    { return at::special_hankel_h_2_out                              (output, v,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_hermite_polynomial_h                        (const Tensor &n, const Scalar &x)                                                    { return at::special_hermite_polynomial_h                        (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_hermite_polynomial_h                        (const Scalar &n, const Tensor &x)                                                    { return at::special_hermite_polynomial_h                        (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_hermite_polynomial_h_out                    (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_hermite_polynomial_h_out                    (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_hermite_polynomial_h_out                    (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_hermite_polynomial_h_out                    (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_hermite_polynomial_he                       (const Tensor &n, const Scalar &x)                                                    { return at::special_hermite_polynomial_he                       (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_hermite_polynomial_he                       (const Scalar &n, const Tensor &x)                                                    { return at::special_hermite_polynomial_he                       (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_hermite_polynomial_he_out                   (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_hermite_polynomial_he_out                   (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_hermite_polynomial_he_out                   (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_hermite_polynomial_he_out                   (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_heuman_lambda                               (const Tensor &n, const Scalar &x)                                                    { return at::special_heuman_lambda                               (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_heuman_lambda                               (const Scalar &n, const Tensor &x)                                                    { return at::special_heuman_lambda                               (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_heuman_lambda_out                           (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_heuman_lambda_out                           (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_heuman_lambda_out                           (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_heuman_lambda_out                           (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_hurwitz_zeta                                (const Tensor &s, const Scalar &a)                                                    { return at::special_hurwitz_zeta                                (        wrapped_scalar_tensor(a), s                                                                           ); }
Tensor  special_hurwitz_zeta                                (const Scalar &s, const Tensor &a)                                                    { return at::special_hurwitz_zeta                                (        a,                        wrapped_scalar_tensor(s)                                                    ); }
Tensor& special_hurwitz_zeta_out                            (const Scalar &s, const Tensor &a, Tensor &output)                                    { return at::special_hurwitz_zeta_out                            (output, wrapped_scalar_tensor(s), a                                                                           ); }
Tensor& special_hurwitz_zeta_out                            (const Tensor &s, const Scalar &a, Tensor &output)                                    { return at::special_hurwitz_zeta_out                            (output, s,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor  special_incomplete_elliptic_integral_e              (const Tensor &a, const Scalar &k)                                                    { return at::special_incomplete_elliptic_integral_e              (        wrapped_scalar_tensor(k), a                                                                           ); }
Tensor  special_incomplete_elliptic_integral_e              (const Scalar &a, const Tensor &k)                                                    { return at::special_incomplete_elliptic_integral_e              (        k,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_incomplete_elliptic_integral_e_out          (const Scalar &a, const Tensor &k, Tensor &output)                                    { return at::special_incomplete_elliptic_integral_e_out          (output, wrapped_scalar_tensor(a), k                                                                           ); }
Tensor& special_incomplete_elliptic_integral_e_out          (const Tensor &a, const Scalar &k, Tensor &output)                                    { return at::special_incomplete_elliptic_integral_e_out          (output, a,                        wrapped_scalar_tensor(k)                                                    ); }
Tensor  special_incomplete_elliptic_integral_f              (const Tensor &a, const Scalar &k)                                                    { return at::special_incomplete_elliptic_integral_f              (        wrapped_scalar_tensor(k), a                                                                           ); }
Tensor  special_incomplete_elliptic_integral_f              (const Scalar &a, const Tensor &k)                                                    { return at::special_incomplete_elliptic_integral_f              (        k,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_incomplete_elliptic_integral_f_out          (const Scalar &a, const Tensor &k, Tensor &output)                                    { return at::special_incomplete_elliptic_integral_f_out          (output, wrapped_scalar_tensor(a), k                                                                           ); }
Tensor& special_incomplete_elliptic_integral_f_out          (const Tensor &a, const Scalar &k, Tensor &output)                                    { return at::special_incomplete_elliptic_integral_f_out          (output, a,                        wrapped_scalar_tensor(k)                                                    ); }
Tensor  special_incomplete_legendre_elliptic_integral_d     (const Tensor &n, const Scalar &x)                                                    { return at::special_incomplete_legendre_elliptic_integral_d     (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_incomplete_legendre_elliptic_integral_d     (const Scalar &n, const Tensor &x)                                                    { return at::special_incomplete_legendre_elliptic_integral_d     (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_incomplete_legendre_elliptic_integral_d_out (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_incomplete_legendre_elliptic_integral_d_out (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_incomplete_legendre_elliptic_integral_d_out (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_incomplete_legendre_elliptic_integral_d_out (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_jacobi_theta_1                              (const Tensor &n, const Scalar &x)                                                    { return at::special_jacobi_theta_1                              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_jacobi_theta_1                              (const Scalar &n, const Tensor &x)                                                    { return at::special_jacobi_theta_1                              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_jacobi_theta_1_out                          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_jacobi_theta_1_out                          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_jacobi_theta_1_out                          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_jacobi_theta_1_out                          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_jacobi_theta_2                              (const Tensor &n, const Scalar &x)                                                    { return at::special_jacobi_theta_2                              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_jacobi_theta_2                              (const Scalar &n, const Tensor &x)                                                    { return at::special_jacobi_theta_2                              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_jacobi_theta_2_out                          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_jacobi_theta_2_out                          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_jacobi_theta_2_out                          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_jacobi_theta_2_out                          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_jacobi_theta_3                              (const Tensor &n, const Scalar &x)                                                    { return at::special_jacobi_theta_3                              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_jacobi_theta_3                              (const Scalar &n, const Tensor &x)                                                    { return at::special_jacobi_theta_3                              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_jacobi_theta_3_out                          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_jacobi_theta_3_out                          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_jacobi_theta_3_out                          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_jacobi_theta_3_out                          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_jacobi_theta_4                              (const Tensor &n, const Scalar &x)                                                    { return at::special_jacobi_theta_4                              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_jacobi_theta_4                              (const Scalar &n, const Tensor &x)                                                    { return at::special_jacobi_theta_4                              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_jacobi_theta_4_out                          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_jacobi_theta_4_out                          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_jacobi_theta_4_out                          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_jacobi_theta_4_out                          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_jacobi_zeta                                 (const Tensor &n, const Scalar &x)                                                    { return at::special_jacobi_zeta                                 (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_jacobi_zeta                                 (const Scalar &n, const Tensor &x)                                                    { return at::special_jacobi_zeta                                 (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_jacobi_zeta_out                             (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_jacobi_zeta_out                             (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_jacobi_zeta_out                             (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_jacobi_zeta_out                             (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_laguerre_polynomial_l                       (const Tensor &n, const Scalar &x)                                                    { return at::special_laguerre_polynomial_l                       (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_laguerre_polynomial_l                       (const Scalar &n, const Tensor &x)                                                    { return at::special_laguerre_polynomial_l                       (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_laguerre_polynomial_l_out                   (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_laguerre_polynomial_l_out                   (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_laguerre_polynomial_l_out                   (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_laguerre_polynomial_l_out                   (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_lah_number                                  (const Tensor &n, const Scalar &x)                                                    { return at::special_lah_number                                  (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_lah_number                                  (const Scalar &n, const Tensor &x)                                                    { return at::special_lah_number                                  (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_lah_number_out                              (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_lah_number_out                              (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_lah_number_out                              (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_lah_number_out                              (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_legendre_polynomial_p                       (const Tensor &n, const Scalar &x)                                                    { return at::special_legendre_polynomial_p                       (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_legendre_polynomial_p                       (const Scalar &n, const Tensor &x)                                                    { return at::special_legendre_polynomial_p                       (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_legendre_polynomial_p_out                   (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_legendre_polynomial_p_out                   (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_legendre_polynomial_p_out                   (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_legendre_polynomial_p_out                   (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_legendre_q                                  (const Tensor &n, const Scalar &x)                                                    { return at::special_legendre_q                                  (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_legendre_q                                  (const Scalar &n, const Tensor &x)                                                    { return at::special_legendre_q                                  (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_legendre_q_out                              (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_legendre_q_out                              (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_legendre_q_out                              (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_legendre_q_out                              (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_ln_binomial_coefficient                     (const Tensor &n, const Scalar &x)                                                    { return at::special_ln_binomial_coefficient                     (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_ln_binomial_coefficient                     (const Scalar &n, const Tensor &x)                                                    { return at::special_ln_binomial_coefficient                     (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_ln_binomial_coefficient_out                 (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_ln_binomial_coefficient_out                 (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_ln_binomial_coefficient_out                 (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_ln_binomial_coefficient_out                 (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_ln_falling_factorial                        (const Tensor &n, const Scalar &x)                                                    { return at::special_ln_falling_factorial                        (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_ln_falling_factorial                        (const Scalar &n, const Tensor &x)                                                    { return at::special_ln_falling_factorial                        (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_ln_falling_factorial_out                    (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_ln_falling_factorial_out                    (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_ln_falling_factorial_out                    (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_ln_falling_factorial_out                    (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_ln_rising_factorial                         (const Tensor &n, const Scalar &x)                                                    { return at::special_ln_rising_factorial                         (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_ln_rising_factorial                         (const Scalar &n, const Tensor &x)                                                    { return at::special_ln_rising_factorial                         (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_ln_rising_factorial_out                     (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_ln_rising_factorial_out                     (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_ln_rising_factorial_out                     (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_ln_rising_factorial_out                     (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_lower_incomplete_gamma                      (const Tensor &a, const Scalar &z)                                                    { return at::special_lower_incomplete_gamma                      (        wrapped_scalar_tensor(z), a                                                                           ); }
Tensor  special_lower_incomplete_gamma                      (const Scalar &a, const Tensor &z)                                                    { return at::special_lower_incomplete_gamma                      (        z,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_lower_incomplete_gamma_out                  (const Scalar &a, const Tensor &z, Tensor &output)                                    { return at::special_lower_incomplete_gamma_out                  (output, wrapped_scalar_tensor(a), z                                                                           ); }
Tensor& special_lower_incomplete_gamma_out                  (const Tensor &a, const Scalar &z, Tensor &output)                                    { return at::special_lower_incomplete_gamma_out                  (output, a,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_modified_bessel_i                           (const Tensor &v, const Scalar &z)                                                    { return at::special_modified_bessel_i                           (        wrapped_scalar_tensor(z), v                                                                           ); }
Tensor  special_modified_bessel_i                           (const Scalar &v, const Tensor &z)                                                    { return at::special_modified_bessel_i                           (        z,                        wrapped_scalar_tensor(v)                                                    ); }
Tensor& special_modified_bessel_i_out                       (const Scalar &v, const Tensor &z, Tensor &output)                                    { return at::special_modified_bessel_i_out                       (output, wrapped_scalar_tensor(v), z                                                                           ); }
Tensor& special_modified_bessel_i_out                       (const Tensor &v, const Scalar &z, Tensor &output)                                    { return at::special_modified_bessel_i_out                       (output, v,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_modified_bessel_k                           (const Tensor &v, const Scalar &z)                                                    { return at::special_modified_bessel_k                           (        wrapped_scalar_tensor(z), v                                                                           ); }
Tensor  special_modified_bessel_k                           (const Scalar &v, const Tensor &z)                                                    { return at::special_modified_bessel_k                           (        z,                        wrapped_scalar_tensor(v)                                                    ); }
Tensor& special_modified_bessel_k_out                       (const Scalar &v, const Tensor &z, Tensor &output)                                    { return at::special_modified_bessel_k_out                       (output, wrapped_scalar_tensor(v), z                                                                           ); }
Tensor& special_modified_bessel_k_out                       (const Tensor &v, const Scalar &z, Tensor &output)                                    { return at::special_modified_bessel_k_out                       (output, v,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_neville_theta_c                             (const Tensor &z, const Scalar &q)                                                    { return at::special_neville_theta_c                             (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_neville_theta_c                             (const Scalar &z, const Tensor &q)                                                    { return at::special_neville_theta_c                             (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_neville_theta_c_out                         (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_neville_theta_c_out                         (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_neville_theta_c_out                         (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_neville_theta_c_out                         (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_neville_theta_d                             (const Tensor &z, const Scalar &q)                                                    { return at::special_neville_theta_d                             (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_neville_theta_d                             (const Scalar &z, const Tensor &q)                                                    { return at::special_neville_theta_d                             (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_neville_theta_d_out                         (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_neville_theta_d_out                         (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_neville_theta_d_out                         (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_neville_theta_d_out                         (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_neville_theta_n                             (const Tensor &z, const Scalar &q)                                                    { return at::special_neville_theta_n                             (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_neville_theta_n                             (const Scalar &z, const Tensor &q)                                                    { return at::special_neville_theta_n                             (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_neville_theta_n_out                         (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_neville_theta_n_out                         (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_neville_theta_n_out                         (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_neville_theta_n_out                         (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_neville_theta_s                             (const Tensor &z, const Scalar &q)                                                    { return at::special_neville_theta_s                             (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_neville_theta_s                             (const Scalar &z, const Tensor &q)                                                    { return at::special_neville_theta_s                             (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_neville_theta_s_out                         (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_neville_theta_s_out                         (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_neville_theta_s_out                         (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_neville_theta_s_out                         (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_owens_t                                     (const Tensor &n, const Scalar &x)                                                    { return at::special_owens_t                                     (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_owens_t                                     (const Scalar &n, const Tensor &x)                                                    { return at::special_owens_t                                     (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_owens_t_out                                 (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_owens_t_out                                 (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_owens_t_out                                 (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_owens_t_out                                 (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_polar_pi                                    (const Tensor &n, const Scalar &x)                                                    { return at::special_polar_pi                                    (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_polar_pi                                    (const Scalar &n, const Tensor &x)                                                    { return at::special_polar_pi                                    (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_polar_pi_out                                (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_polar_pi_out                                (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_polar_pi_out                                (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_polar_pi_out                                (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_polylogarithm_li                            (const Tensor &s, const Scalar &z)                                                    { return at::special_polylogarithm_li                            (        s,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_polylogarithm_li                            (const Scalar &s, const Tensor &z)                                                    { return at::special_polylogarithm_li                            (        wrapped_scalar_tensor(s), z                                                                           ); }
Tensor& special_polylogarithm_li_out                        (const Scalar &s, const Tensor &z, Tensor &output)                                    { return at::special_polylogarithm_li_out                        (output, wrapped_scalar_tensor(s), z                                                                           ); }
Tensor& special_polylogarithm_li_out                        (const Tensor &s, const Scalar &z, Tensor &output)                                    { return at::special_polylogarithm_li_out                        (output, s,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_rising_factorial                            (const Tensor &n, const Scalar &x)                                                    { return at::special_rising_factorial                            (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_rising_factorial                            (const Scalar &n, const Tensor &x)                                                    { return at::special_rising_factorial                            (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_rising_factorial_out                        (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_rising_factorial_out                        (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_rising_factorial_out                        (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_rising_factorial_out                        (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_shifted_chebyshev_polynomial_t              (const Tensor &n, const Scalar &x)                                                    { return at::special_shifted_chebyshev_polynomial_t              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_shifted_chebyshev_polynomial_t              (const Scalar &n, const Tensor &x)                                                    { return at::special_shifted_chebyshev_polynomial_t              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_shifted_chebyshev_polynomial_t_out          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_t_out          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_shifted_chebyshev_polynomial_t_out          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_t_out          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_shifted_chebyshev_polynomial_u              (const Tensor &n, const Scalar &x)                                                    { return at::special_shifted_chebyshev_polynomial_u              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_shifted_chebyshev_polynomial_u              (const Scalar &n, const Tensor &x)                                                    { return at::special_shifted_chebyshev_polynomial_u              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_shifted_chebyshev_polynomial_u_out          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_u_out          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_shifted_chebyshev_polynomial_u_out          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_u_out          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_shifted_chebyshev_polynomial_v              (const Tensor &n, const Scalar &x)                                                    { return at::special_shifted_chebyshev_polynomial_v              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_shifted_chebyshev_polynomial_v              (const Scalar &n, const Tensor &x)                                                    { return at::special_shifted_chebyshev_polynomial_v              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_shifted_chebyshev_polynomial_v_out          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_v_out          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_shifted_chebyshev_polynomial_v_out          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_v_out          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_shifted_chebyshev_polynomial_w              (const Tensor &n, const Scalar &x)                                                    { return at::special_shifted_chebyshev_polynomial_w              (        wrapped_scalar_tensor(x), n                                                                           ); }
Tensor  special_shifted_chebyshev_polynomial_w              (const Scalar &n, const Tensor &x)                                                    { return at::special_shifted_chebyshev_polynomial_w              (        x,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_shifted_chebyshev_polynomial_w_out          (const Scalar &n, const Tensor &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_w_out          (output, wrapped_scalar_tensor(n), x                                                                           ); }
Tensor& special_shifted_chebyshev_polynomial_w_out          (const Tensor &n, const Scalar &x, Tensor &output)                                    { return at::special_shifted_chebyshev_polynomial_w_out          (output, n,                        wrapped_scalar_tensor(x)                                                    ); }
Tensor  special_spherical_bessel_j                          (const Tensor &n, const Scalar &z)                                                    { return at::special_spherical_bessel_j                          (        wrapped_scalar_tensor(z), n                                                                           ); }
Tensor  special_spherical_bessel_j                          (const Scalar &n, const Tensor &z)                                                    { return at::special_spherical_bessel_j                          (        z,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_spherical_bessel_j_out                      (const Scalar &n, const Tensor &z, Tensor &output)                                    { return at::special_spherical_bessel_j_out                      (output, wrapped_scalar_tensor(n), z                                                                           ); }
Tensor& special_spherical_bessel_j_out                      (const Tensor &n, const Scalar &z, Tensor &output)                                    { return at::special_spherical_bessel_j_out                      (output, n,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_spherical_bessel_y                          (const Tensor &n, const Scalar &z)                                                    { return at::special_spherical_bessel_y                          (        wrapped_scalar_tensor(z), n                                                                           ); }
Tensor  special_spherical_bessel_y                          (const Scalar &n, const Tensor &z)                                                    { return at::special_spherical_bessel_y                          (        z,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_spherical_bessel_y_out                      (const Scalar &n, const Tensor &z, Tensor &output)                                    { return at::special_spherical_bessel_y_out                      (output, wrapped_scalar_tensor(n), z                                                                           ); }
Tensor& special_spherical_bessel_y_out                      (const Tensor &n, const Scalar &z, Tensor &output)                                    { return at::special_spherical_bessel_y_out                      (output, n,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_spherical_hankel_h_1                        (const Tensor &n, const Scalar &z)                                                    { return at::special_spherical_hankel_h_1                        (        wrapped_scalar_tensor(z), n                                                                           ); }
Tensor  special_spherical_hankel_h_1                        (const Scalar &n, const Tensor &z)                                                    { return at::special_spherical_hankel_h_1                        (        z,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_spherical_hankel_h_1_out                    (const Scalar &n, const Tensor &z, Tensor &output)                                    { return at::special_spherical_hankel_h_1_out                    (output, wrapped_scalar_tensor(n), z                                                                           ); }
Tensor& special_spherical_hankel_h_1_out                    (const Tensor &n, const Scalar &z, Tensor &output)                                    { return at::special_spherical_hankel_h_1_out                    (output, n,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_spherical_hankel_h_2                        (const Tensor &n, const Scalar &z)                                                    { return at::special_spherical_hankel_h_2                        (        wrapped_scalar_tensor(z), n                                                                           ); }
Tensor  special_spherical_hankel_h_2                        (const Scalar &n, const Tensor &z)                                                    { return at::special_spherical_hankel_h_2                        (        z,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_spherical_hankel_h_2_out                    (const Scalar &n, const Tensor &z, Tensor &output)                                    { return at::special_spherical_hankel_h_2_out                    (output, wrapped_scalar_tensor(n), z                                                                           ); }
Tensor& special_spherical_hankel_h_2_out                    (const Tensor &n, const Scalar &z, Tensor &output)                                    { return at::special_spherical_hankel_h_2_out                    (output, n,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_spherical_modified_bessel_i                 (const Tensor &n, const Scalar &z)                                                    { return at::special_spherical_modified_bessel_i                 (        wrapped_scalar_tensor(z), n                                                                           ); }
Tensor  special_spherical_modified_bessel_i                 (const Scalar &n, const Tensor &z)                                                    { return at::special_spherical_modified_bessel_i                 (        z,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_spherical_modified_bessel_i_out             (const Scalar &n, const Tensor &z, Tensor &output)                                    { return at::special_spherical_modified_bessel_i_out             (output, wrapped_scalar_tensor(n), z                                                                           ); }
Tensor& special_spherical_modified_bessel_i_out             (const Tensor &n, const Scalar &z, Tensor &output)                                    { return at::special_spherical_modified_bessel_i_out             (output, n,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_spherical_modified_bessel_k                 (const Tensor &n, const Scalar &z)                                                    { return at::special_spherical_modified_bessel_k                 (        wrapped_scalar_tensor(z), n                                                                           ); }
Tensor  special_spherical_modified_bessel_k                 (const Scalar &n, const Tensor &z)                                                    { return at::special_spherical_modified_bessel_k                 (        z,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_spherical_modified_bessel_k_out             (const Scalar &n, const Tensor &z, Tensor &output)                                    { return at::special_spherical_modified_bessel_k_out             (output, wrapped_scalar_tensor(n), z                                                                           ); }
Tensor& special_spherical_modified_bessel_k_out             (const Tensor &n, const Scalar &z, Tensor &output)                                    { return at::special_spherical_modified_bessel_k_out             (output, n,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_stirling_number_1                           (const Tensor &n, const Scalar &k)                                                    { return at::special_stirling_number_1                           (        wrapped_scalar_tensor(k), n                                                                           ); }
Tensor  special_stirling_number_1                           (const Scalar &n, const Tensor &k)                                                    { return at::special_stirling_number_1                           (        k,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_stirling_number_1_out                       (const Scalar &n, const Tensor &k, Tensor &output)                                    { return at::special_stirling_number_1_out                       (output, wrapped_scalar_tensor(n), k                                                                           ); }
Tensor& special_stirling_number_1_out                       (const Tensor &n, const Scalar &k, Tensor &output)                                    { return at::special_stirling_number_1_out                       (output, n,                        wrapped_scalar_tensor(k)                                                    ); }
Tensor  special_stirling_number_2                           (const Tensor &n, const Scalar &k)                                                    { return at::special_stirling_number_2                           (        wrapped_scalar_tensor(k), n                                                                           ); }
Tensor  special_stirling_number_2                           (const Scalar &n, const Tensor &k)                                                    { return at::special_stirling_number_2                           (        k,                        wrapped_scalar_tensor(n)                                                    ); }
Tensor& special_stirling_number_2_out                       (const Scalar &n, const Tensor &k, Tensor &output)                                    { return at::special_stirling_number_2_out                       (output, wrapped_scalar_tensor(n), k                                                                           ); }
Tensor& special_stirling_number_2_out                       (const Tensor &n, const Scalar &k, Tensor &output)                                    { return at::special_stirling_number_2_out                       (output, n,                        wrapped_scalar_tensor(k)                                                    ); }
Tensor  special_theta_1                                     (const Tensor &z, const Scalar &q)                                                    { return at::special_theta_1                                     (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_theta_1                                     (const Scalar &z, const Tensor &q)                                                    { return at::special_theta_1                                     (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_theta_1_out                                 (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_theta_1_out                                 (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_theta_1_out                                 (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_theta_1_out                                 (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_theta_2                                     (const Tensor &z, const Scalar &q)                                                    { return at::special_theta_2                                     (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_theta_2                                     (const Scalar &z, const Tensor &q)                                                    { return at::special_theta_2                                     (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_theta_2_out                                 (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_theta_2_out                                 (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_theta_2_out                                 (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_theta_2_out                                 (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_theta_3                                     (const Tensor &z, const Scalar &q)                                                    { return at::special_theta_3                                     (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_theta_3                                     (const Scalar &z, const Tensor &q)                                                    { return at::special_theta_3                                     (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_theta_3_out                                 (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_theta_3_out                                 (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_theta_3_out                                 (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_theta_3_out                                 (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_theta_4                                     (const Tensor &z, const Scalar &q)                                                    { return at::special_theta_4                                     (        wrapped_scalar_tensor(q), z                                                                           ); }
Tensor  special_theta_4                                     (const Scalar &z, const Tensor &q)                                                    { return at::special_theta_4                                     (        q,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor& special_theta_4_out                                 (const Scalar &z, const Tensor &q, Tensor &output)                                    { return at::special_theta_4_out                                 (output, wrapped_scalar_tensor(z), q                                                                           ); }
Tensor& special_theta_4_out                                 (const Tensor &z, const Scalar &q, Tensor &output)                                    { return at::special_theta_4_out                                 (output, z,                        wrapped_scalar_tensor(q)                                                    ); }
Tensor  special_upper_incomplete_gamma                      (const Tensor &a, const Scalar &z)                                                    { return at::special_upper_incomplete_gamma                      (        wrapped_scalar_tensor(z), a                                                                           ); }
Tensor  special_upper_incomplete_gamma                      (const Scalar &a, const Tensor &z)                                                    { return at::special_upper_incomplete_gamma                      (        z,                        wrapped_scalar_tensor(a)                                                    ); }
Tensor& special_upper_incomplete_gamma_out                  (const Scalar &a, const Tensor &z, Tensor &output)                                    { return at::special_upper_incomplete_gamma_out                  (output, wrapped_scalar_tensor(a), z                                                                           ); }
Tensor& special_upper_incomplete_gamma_out                  (const Tensor &a, const Scalar &z, Tensor &output)                                    { return at::special_upper_incomplete_gamma_out                  (output, a,                        wrapped_scalar_tensor(z)                                                    ); }
Tensor  special_associated_laguerre_polynomial_l            (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_associated_laguerre_polynomial_l            (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_laguerre_polynomial_l            (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_associated_laguerre_polynomial_l            (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_laguerre_polynomial_l            (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_associated_laguerre_polynomial_l            (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_laguerre_polynomial_l            (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_associated_laguerre_polynomial_l            (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_laguerre_polynomial_l            (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_associated_laguerre_polynomial_l            (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_laguerre_polynomial_l            (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_associated_laguerre_polynomial_l            (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_associated_laguerre_polynomial_l_out        (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_associated_laguerre_polynomial_l_out        (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_laguerre_polynomial_l_out        (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_associated_laguerre_polynomial_l_out        (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_associated_laguerre_polynomial_l_out        (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_associated_laguerre_polynomial_l_out        (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_laguerre_polynomial_l_out        (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_associated_laguerre_polynomial_l_out        (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_associated_laguerre_polynomial_l_out        (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_associated_laguerre_polynomial_l_out        (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_laguerre_polynomial_l_out        (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_associated_laguerre_polynomial_l_out        (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_legendre_p                       (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_associated_legendre_p                       (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_legendre_p                       (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_associated_legendre_p                       (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_legendre_p                       (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_associated_legendre_p                       (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_legendre_p                       (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_associated_legendre_p                       (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_legendre_p                       (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_associated_legendre_p                       (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_legendre_p                       (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_associated_legendre_p                       (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_associated_legendre_p_out                   (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_associated_legendre_p_out                   (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_legendre_p_out                   (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_associated_legendre_p_out                   (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_associated_legendre_p_out                   (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_associated_legendre_p_out                   (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_legendre_p_out                   (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_associated_legendre_p_out                   (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_associated_legendre_p_out                   (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_associated_legendre_p_out                   (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_legendre_p_out                   (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_associated_legendre_p_out                   (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_legendre_q                       (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_associated_legendre_q                       (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_legendre_q                       (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_associated_legendre_q                       (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_legendre_q                       (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_associated_legendre_q                       (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_legendre_q                       (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_associated_legendre_q                       (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_associated_legendre_q                       (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_associated_legendre_q                       (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_associated_legendre_q                       (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_associated_legendre_q                       (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_associated_legendre_q_out                   (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_associated_legendre_q_out                   (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_legendre_q_out                   (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_associated_legendre_q_out                   (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_associated_legendre_q_out                   (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_associated_legendre_q_out                   (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_legendre_q_out                   (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_associated_legendre_q_out                   (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_associated_legendre_q_out                   (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_associated_legendre_q_out                   (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_associated_legendre_q_out                   (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_associated_legendre_q_out                   (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_bulirsch_elliptic_integral_el3              (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_bulirsch_elliptic_integral_el3              (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_bulirsch_elliptic_integral_el3              (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_bulirsch_elliptic_integral_el3              (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_bulirsch_elliptic_integral_el3              (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_bulirsch_elliptic_integral_el3              (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_bulirsch_elliptic_integral_el3              (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_bulirsch_elliptic_integral_el3              (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_bulirsch_elliptic_integral_el3              (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_bulirsch_elliptic_integral_el3              (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_bulirsch_elliptic_integral_el3              (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_bulirsch_elliptic_integral_el3              (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_bulirsch_elliptic_integral_el3_out          (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_bulirsch_elliptic_integral_el3_out          (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_bulirsch_elliptic_integral_el3_out          (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_bulirsch_elliptic_integral_el3_out          (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_bulirsch_elliptic_integral_el3_out          (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_bulirsch_elliptic_integral_el3_out          (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_bulirsch_elliptic_integral_el3_out          (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_bulirsch_elliptic_integral_el3_out          (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_bulirsch_elliptic_integral_el3_out          (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_bulirsch_elliptic_integral_el3_out          (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_bulirsch_elliptic_integral_el3_out          (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_bulirsch_elliptic_integral_el3_out          (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_d                        (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_d                        (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_d                        (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_d                        (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_d                        (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_d                        (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_d                        (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_d                        (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_d                        (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_d                        (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_d                        (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_d                        (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_carlson_elliptic_r_d_out                    (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_d_out                    (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_d_out                    (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_d_out                    (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_carlson_elliptic_r_d_out                    (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_d_out                    (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_d_out                    (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_d_out                    (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_carlson_elliptic_r_d_out                    (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_d_out                    (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_d_out                    (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_d_out                    (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_f                        (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_f                        (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_f                        (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_f                        (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_f                        (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_f                        (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_f                        (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_f                        (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_f                        (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_f                        (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_f                        (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_f                        (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_carlson_elliptic_r_f_out                    (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_f_out                    (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_f_out                    (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_f_out                    (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_carlson_elliptic_r_f_out                    (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_f_out                    (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_f_out                    (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_f_out                    (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_carlson_elliptic_r_f_out                    (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_f_out                    (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_f_out                    (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_f_out                    (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_g                        (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_g                        (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_g                        (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_g                        (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_g                        (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_g                        (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_g                        (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_carlson_elliptic_r_g                        (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_carlson_elliptic_r_g                        (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_g                        (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_carlson_elliptic_r_g                        (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_carlson_elliptic_r_g                        (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_carlson_elliptic_r_g_out                    (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_g_out                    (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_g_out                    (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_g_out                    (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_carlson_elliptic_r_g_out                    (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_g_out                    (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_g_out                    (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_g_out                    (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_carlson_elliptic_r_g_out                    (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_carlson_elliptic_r_g_out                    (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_carlson_elliptic_r_g_out                    (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_carlson_elliptic_r_g_out                    (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_gegenbauer_polynomial_c                     (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_gegenbauer_polynomial_c                     (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_gegenbauer_polynomial_c                     (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_gegenbauer_polynomial_c                     (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_gegenbauer_polynomial_c                     (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_gegenbauer_polynomial_c                     (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_gegenbauer_polynomial_c                     (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_gegenbauer_polynomial_c                     (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_gegenbauer_polynomial_c                     (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_gegenbauer_polynomial_c                     (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_gegenbauer_polynomial_c                     (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_gegenbauer_polynomial_c                     (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_gegenbauer_polynomial_c_out                 (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_gegenbauer_polynomial_c_out                 (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_gegenbauer_polynomial_c_out                 (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_gegenbauer_polynomial_c_out                 (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_gegenbauer_polynomial_c_out                 (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_gegenbauer_polynomial_c_out                 (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_gegenbauer_polynomial_c_out                 (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_gegenbauer_polynomial_c_out                 (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_gegenbauer_polynomial_c_out                 (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_gegenbauer_polynomial_c_out                 (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_gegenbauer_polynomial_c_out                 (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_gegenbauer_polynomial_c_out                 (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_incomplete_beta                             (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_incomplete_beta                             (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_incomplete_beta                             (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_incomplete_beta                             (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_incomplete_beta                             (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_incomplete_beta                             (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_incomplete_beta                             (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_incomplete_beta                             (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_incomplete_beta                             (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_incomplete_beta                             (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_incomplete_beta                             (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_incomplete_beta                             (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_incomplete_beta_out                         (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_incomplete_beta_out                         (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_incomplete_beta_out                         (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_incomplete_beta_out                         (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_incomplete_beta_out                         (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_incomplete_beta_out                         (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_incomplete_beta_out                         (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_incomplete_beta_out                         (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_incomplete_beta_out                         (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_incomplete_beta_out                         (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_incomplete_beta_out                         (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_incomplete_beta_out                         (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_incomplete_elliptic_integral_pi             (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_incomplete_elliptic_integral_pi             (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_incomplete_elliptic_integral_pi             (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_incomplete_elliptic_integral_pi             (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_incomplete_elliptic_integral_pi             (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_incomplete_elliptic_integral_pi             (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_incomplete_elliptic_integral_pi             (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_incomplete_elliptic_integral_pi             (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_incomplete_elliptic_integral_pi             (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_incomplete_elliptic_integral_pi             (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_incomplete_elliptic_integral_pi             (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_incomplete_elliptic_integral_pi             (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_incomplete_elliptic_integral_pi_out         (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_incomplete_elliptic_integral_pi_out         (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_incomplete_elliptic_integral_pi_out         (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_incomplete_elliptic_integral_pi_out         (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_incomplete_elliptic_integral_pi_out         (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_incomplete_elliptic_integral_pi_out         (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_incomplete_elliptic_integral_pi_out         (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_incomplete_elliptic_integral_pi_out         (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_incomplete_elliptic_integral_pi_out         (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_incomplete_elliptic_integral_pi_out         (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_incomplete_elliptic_integral_pi_out         (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_incomplete_elliptic_integral_pi_out         (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_kummer_confluent_hypergeometric_1_f_1       (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_kummer_confluent_hypergeometric_1_f_1       (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_kummer_confluent_hypergeometric_1_f_1       (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_kummer_confluent_hypergeometric_1_f_1       (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_kummer_confluent_hypergeometric_1_f_1       (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_kummer_confluent_hypergeometric_1_f_1       (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_kummer_confluent_hypergeometric_1_f_1       (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_kummer_confluent_hypergeometric_1_f_1       (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_kummer_confluent_hypergeometric_1_f_1       (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_kummer_confluent_hypergeometric_1_f_1       (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_kummer_confluent_hypergeometric_1_f_1       (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_kummer_confluent_hypergeometric_1_f_1       (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_kummer_confluent_hypergeometric_1_f_1_out   (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_kummer_confluent_hypergeometric_1_f_1_out   (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_kummer_confluent_hypergeometric_1_f_1_out   (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_kummer_confluent_hypergeometric_1_f_1_out   (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_kummer_confluent_hypergeometric_1_f_1_out   (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_kummer_confluent_hypergeometric_1_f_1_out   (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_kummer_confluent_hypergeometric_1_f_1_out   (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_kummer_confluent_hypergeometric_1_f_1_out   (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_kummer_confluent_hypergeometric_1_f_1_out   (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_kummer_confluent_hypergeometric_1_f_1_out   (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_kummer_confluent_hypergeometric_1_f_1_out   (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_kummer_confluent_hypergeometric_1_f_1_out   (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_radial_polynomial_r                         (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_radial_polynomial_r                         (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_radial_polynomial_r                         (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_radial_polynomial_r                         (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_radial_polynomial_r                         (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_radial_polynomial_r                         (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_radial_polynomial_r                         (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_radial_polynomial_r                         (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_radial_polynomial_r                         (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_radial_polynomial_r                         (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_radial_polynomial_r                         (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_radial_polynomial_r                         (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_radial_polynomial_r_out                     (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_radial_polynomial_r_out                     (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_radial_polynomial_r_out                     (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_radial_polynomial_r_out                     (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_radial_polynomial_r_out                     (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_radial_polynomial_r_out                     (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_radial_polynomial_r_out                     (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_radial_polynomial_r_out                     (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_radial_polynomial_r_out                     (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_radial_polynomial_r_out                     (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_radial_polynomial_r_out                     (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_radial_polynomial_r_out                     (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_spherical_legendre_y                        (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_spherical_legendre_y                        (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_spherical_legendre_y                        (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_spherical_legendre_y                        (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_spherical_legendre_y                        (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_spherical_legendre_y                        (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_spherical_legendre_y                        (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_spherical_legendre_y                        (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_spherical_legendre_y                        (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_spherical_legendre_y                        (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_spherical_legendre_y                        (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_spherical_legendre_y                        (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_spherical_legendre_y_out                    (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_spherical_legendre_y_out                    (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_spherical_legendre_y_out                    (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_spherical_legendre_y_out                    (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_spherical_legendre_y_out                    (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_spherical_legendre_y_out                    (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_spherical_legendre_y_out                    (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_spherical_legendre_y_out                    (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_spherical_legendre_y_out                    (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_spherical_legendre_y_out                    (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_spherical_legendre_y_out                    (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_spherical_legendre_y_out                    (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_tricomi_confluent_hypergeometric_u          (const Tensor &x, const Scalar &y, const Scalar &z)                                   { return at::special_tricomi_confluent_hypergeometric_u          (        x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor  special_tricomi_confluent_hypergeometric_u          (const Tensor &x, const Tensor &y, const Scalar &z)                                   { return at::special_tricomi_confluent_hypergeometric_u          (        x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_tricomi_confluent_hypergeometric_u          (const Tensor &x, const Scalar &y, const Tensor &z)                                   { return at::special_tricomi_confluent_hypergeometric_u          (        x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_tricomi_confluent_hypergeometric_u          (const Scalar &x, const Tensor &y, const Scalar &z)                                   { return at::special_tricomi_confluent_hypergeometric_u          (        wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor  special_tricomi_confluent_hypergeometric_u          (const Scalar &x, const Scalar &y, const Tensor &z)                                   { return at::special_tricomi_confluent_hypergeometric_u          (        wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_tricomi_confluent_hypergeometric_u          (const Scalar &x, const Tensor &y, const Tensor &z)                                   { return at::special_tricomi_confluent_hypergeometric_u          (        wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_tricomi_confluent_hypergeometric_u_out      (const Tensor &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_tricomi_confluent_hypergeometric_u_out      (output, x,                        y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_tricomi_confluent_hypergeometric_u_out      (const Tensor &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_tricomi_confluent_hypergeometric_u_out      (output, x,                        wrapped_scalar_tensor(y), z                                                 ); }
Tensor& special_tricomi_confluent_hypergeometric_u_out      (const Tensor &x, const Scalar &y, const Scalar &z, Tensor &output)                   { return at::special_tricomi_confluent_hypergeometric_u_out      (output, x,                        wrapped_scalar_tensor(y), wrapped_scalar_tensor(z)                          ); }
Tensor& special_tricomi_confluent_hypergeometric_u_out      (const Scalar &x, const Tensor &y, const Tensor &z, Tensor &output)                   { return at::special_tricomi_confluent_hypergeometric_u_out      (output, wrapped_scalar_tensor(x), y,                        z                                                 ); }
Tensor& special_tricomi_confluent_hypergeometric_u_out      (const Scalar &x, const Tensor &y, const Scalar &z, Tensor &output)                   { return at::special_tricomi_confluent_hypergeometric_u_out      (output, wrapped_scalar_tensor(x), y,                        wrapped_scalar_tensor(z)                          ); }
Tensor& special_tricomi_confluent_hypergeometric_u_out      (const Scalar &x, const Scalar &y, const Tensor &z, Tensor &output)                   { return at::special_tricomi_confluent_hypergeometric_u_out      (output, wrapped_scalar_tensor(x), wrapped_scalar_tensor(y), z                                                 ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_cel              (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_cel              (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_cel_out          (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_cel_out          (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_bulirsch_elliptic_integral_el2              (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_bulirsch_elliptic_integral_el2              (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_bulirsch_elliptic_integral_el2_out          (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_bulirsch_elliptic_integral_el2_out          (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_carlson_elliptic_r_j                        (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_carlson_elliptic_r_j                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_carlson_elliptic_r_j_out                    (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_carlson_elliptic_r_j_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_gauss_hypergeometric_2_f_1                  (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_gauss_hypergeometric_2_f_1                  (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_gauss_hypergeometric_2_f_1_out              (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_gauss_hypergeometric_2_f_1_out              (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_jacobi_polynomial_p                         (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_jacobi_polynomial_p                         (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_jacobi_polynomial_p_out                     (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_jacobi_polynomial_p_out                     (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_spherical_harmonic_y                        (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_spherical_harmonic_y                        (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_spherical_harmonic_y                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_spherical_harmonic_y_out                    (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_spherical_harmonic_y_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor  special_zernike_polynomial_z                        (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor  special_zernike_polynomial_z                        (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d)                  { return at::special_zernike_polynomial_z                        (        wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Tensor &a, const Scalar &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, a,                        wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Tensor &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), b,                        c,                        d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Tensor &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), b,                        c,                        wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Tensor &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Tensor &b, const Scalar &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), b,                        wrapped_scalar_tensor(c), wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Scalar &b, const Tensor &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        d                       ); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Scalar &b, const Tensor &c, const Scalar &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), c,                        wrapped_scalar_tensor(d)); }
Tensor& special_zernike_polynomial_z_out                    (const Scalar &a, const Scalar &b, const Scalar &c, const Tensor &d, Tensor &output)  { return at::special_zernike_polynomial_z_out                    (output, wrapped_scalar_tensor(a), wrapped_scalar_tensor(b), wrapped_scalar_tensor(c), d                       ); }
} // namespace native
} // namespace at
