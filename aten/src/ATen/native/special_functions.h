#pragma once

#include <ATen/core/TensorBase.h>
#include <ATen/native/DispatchStub.h>
#include <c10/core/Scalar.h>

namespace at {
struct TensorIterator;
struct TensorIteratorBase;
namespace native {
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_airy_ai_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_airy_bi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_associated_laguerre_polynomial_l_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_associated_legendre_p_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_associated_legendre_q_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bell_polynomial_b_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bernoulli_number_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bernoulli_polynomial_b_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bessel_j_0_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bessel_j_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bessel_j_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bessel_y_0_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bessel_y_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bessel_y_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_beta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_binomial_coefficient_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bose_einstein_integral_g_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bulirsch_elliptic_integral_cel_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bulirsch_elliptic_integral_el1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bulirsch_elliptic_integral_el2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_bulirsch_elliptic_integral_el3_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_carlson_elliptic_r_c_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_carlson_elliptic_r_d_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_carlson_elliptic_r_f_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_carlson_elliptic_r_g_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_carlson_elliptic_r_j_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_chebyshev_polynomial_t_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_chebyshev_polynomial_u_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_chebyshev_polynomial_v_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_chebyshev_polynomial_w_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_clausen_cl_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_clausen_sl_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_complete_carlson_elliptic_r_f_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_complete_carlson_elliptic_r_g_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_complete_elliptic_integral_e_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_complete_elliptic_integral_k_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_complete_elliptic_integral_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_complete_legendre_elliptic_integral_d_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_confluent_hypergeometric_0_f_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_cos_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_cosh_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_cosine_integral_ci_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_debye_d_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_dilogarithm_li_2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_dirichlet_beta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_dirichlet_eta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_dirichlet_lambda_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_double_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exp_airy_ai_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exp_airy_bi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exp_modified_bessel_i_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exp_modified_bessel_k_0_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exp_modified_bessel_k_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exp_modified_bessel_k_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exponential_integral_e_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_exponential_integral_ei_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_falling_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_fermi_dirac_integral_f_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_fresnel_integral_c_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_fresnel_integral_s_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_gauss_hypergeometric_2_f_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_gegenbauer_polynomial_c_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hankel_h_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hankel_h_2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_harmonic_number_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hermite_polynomial_h_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hermite_polynomial_he_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_heuman_lambda_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hurwitz_zeta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hyperbolic_cosine_integral_chi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_hyperbolic_sine_integral_shi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_incomplete_beta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_incomplete_elliptic_integral_e_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_incomplete_elliptic_integral_f_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_incomplete_elliptic_integral_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_incomplete_legendre_elliptic_integral_d_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_jacobi_polynomial_p_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_jacobi_theta_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_jacobi_theta_2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_jacobi_theta_3_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_jacobi_theta_4_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_jacobi_zeta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_kummer_confluent_hypergeometric_1_f_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_laguerre_polynomial_l_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_lah_number_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_legendre_polynomial_p_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_legendre_q_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_binomial_coefficient_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_double_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_falling_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_gamma_sign_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_gamma_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_ln_rising_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_logarithmic_integral_li_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_lower_incomplete_gamma_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_modified_bessel_i_0_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_modified_bessel_i_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_modified_bessel_i_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_modified_bessel_k_0_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_modified_bessel_k_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_modified_bessel_k_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_neville_theta_c_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_neville_theta_d_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_neville_theta_n_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_neville_theta_s_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_nome_q_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_owens_t_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_polar_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_polygamma_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_polylogarithm_li_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_prime_number_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_radial_polynomial_r_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_reciprocal_gamma_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_riemann_zeta_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_rising_factorial_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_shifted_chebyshev_polynomial_t_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_shifted_chebyshev_polynomial_u_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_shifted_chebyshev_polynomial_v_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_shifted_chebyshev_polynomial_w_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_sin_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_sinc_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_sinh_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_sinhc_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_sinhc_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_bessel_j_0_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_bessel_j_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_bessel_y_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_hankel_h_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_hankel_h_2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_harmonic_y_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_legendre_y_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_modified_bessel_i_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_spherical_modified_bessel_k_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_stirling_number_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_stirling_number_2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_tan_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_tanh_pi_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_theta_1_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_theta_2_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_theta_3_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_theta_4_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_tricomi_confluent_hypergeometric_u_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_upper_incomplete_gamma_stub);
DECLARE_DISPATCH(void(*)(TensorIteratorBase&), special_zernike_polynomial_z_stub);
} // namespace native
} // namespace at
