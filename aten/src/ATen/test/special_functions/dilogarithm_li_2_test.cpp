#include <gtest/gtest.h>
#include <ATen/native/special_functions/dilogarithm_li_2.h>

template<typename T1>
struct dilogarithm_li_2_fixture {
  T1 f0;
  T1 x;
  T1 f;
};

const dilogarithm_li_2_fixture<double> fixture_0001[45] = {
    {-4.1982778868581043, -10.000000000000000, 0.0},
    {-4.1378595698085165, -9.7500000000000000, 0.0},
    {-4.0764759702627735, -9.5000000000000000, 0.0},
    {-4.0140903713193570, -9.2500000000000000, 0.0},
    {-3.9506637782441563, -9.0000000000000000, 0.0},
    {-3.8861547188822385, -8.7500000000000000, 0.0},
    {-3.8205190211678008, -8.5000000000000000, 0.0},
    {-3.7537095644470124, -8.2500000000000000, 0.0},
    {-3.6856760007574056, -8.0000000000000000, 0.0},
    {-3.6163644415187579, -7.7500000000000000, 0.0},
    {-3.5457171042558460, -7.5000000000000000, 0.0},
    {-3.4736719129571010, -7.2500000000000000, 0.0},
    {-3.4001620444283858, -7.0000000000000000, 0.0},
    {-3.3251154114686625, -6.7500000000000000, 0.0},
    {-3.2484540717954049, -6.5000000000000000, 0.0},
    {-3.1700935492807281, -6.2500000000000000, 0.0},
    {-3.0899420510880309, -6.0000000000000000, 0.0},
    {-3.0078995605434260, -5.7500000000000000, 0.0},
    {-2.9238567807919029, -5.5000000000000000, 0.0},
    {-2.8376938981442601, -5.2500000000000000, 0.0},
    {-2.7492791260608072, -5.0000000000000000, 0.0},
    {-2.6584669803084551, -4.7500000000000000, 0.0},
    {-2.5650962220765550, -4.5000000000000000, 0.0},
    {-2.4689873874722430, -4.2500000000000000, 0.0},
    {-2.3699397969983651, -4.0000000000000000, 0.0},
    {-2.2677279046461170, -3.7500000000000000, 0.0},
    {-2.1620967990779754, -3.5000000000000000, 0.0},
    {-2.0527566029048092, -3.2500000000000000, 0.0},
    {-1.9393754207667084, -3.0000000000000000, 0.0},
    {-1.8215703477370619, -2.7500000000000000, 0.0},
    {-1.6988958419950144, -2.5000000000000000, 0.0},
    {-1.5708284488702069, -2.2500000000000000, 0.0},
    {-1.4367463668836815, -2.0000000000000000, 0.0},
    {-1.2959015448891098, -1.7500000000000000, 0.0},
    {-1.1473806603755707, -1.5000000000000000, 0.0},
    {-0.99004900126010376, -1.2500000000000000, 0.0},
    {-0.82246703342411320, -1.0000000000000000, 0.0},
    {-0.64276126883997886, -0.75000000000000000, 0.0},
    {-0.44841420692364631, -0.50000000000000000, 0.0},
    {-0.23590029768626336, -0.25000000000000000, 0.0},
    {0.0000000000000000, 0.0000000000000000, 0.0},
    {0.26765263908273251, 0.25000000000000000, 0.0},
    {0.58224052646501256, 0.50000000000000000, 0.0},
    {0.97846939293030599, 0.75000000000000000, 0.0},
    {1.6449340668482264, 1.0000000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const dilogarithm_li_2_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::dilogarithm_li_2(fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(dilogarithm_li_2_test, GSL) {
  test(fixture_0001, tolerance_0001);
}