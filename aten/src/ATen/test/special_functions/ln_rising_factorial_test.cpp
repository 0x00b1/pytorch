#include <gtest/gtest.h>
#include <ATen/native/special_functions/ln_rising_factorial.h>

template<typename T1>
struct log_rising_factorial_fixture {
  T1 f0;
  T1 a;
  T1 x;
  T1 f;
};

const log_rising_factorial_fixture<double> fixture_0001[7] = {
    {-1.3862943611198906, 0.25000000000000000, 1.0000000000000000, 0.0},
    {-1.1631508098056809, 0.25000000000000000, 2.0000000000000000, 0.0},
    {2.2733533856886194, 0.25000000000000000, 5.0000000000000000, 0.0},
    {12.080001146777969, 0.25000000000000000, 10.000000000000000, 0.0},
    {38.796088073219273, 0.25000000000000000, 20.000000000000000, 0.0},
    {144.25384907163405, 0.25000000000000000, 50.000000000000000, 0.0},
    {358.99653711306615, 0.25000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0002[7] = {
    {-0.69314718055994529, 0.50000000000000000, 1.0000000000000000, 0.0},
    {-0.28768207245178090, 0.50000000000000000, 2.0000000000000000, 0.0},
    {3.3854490246940161, 0.50000000000000000, 5.0000000000000000, 0.0},
    {13.368260276479063, 0.50000000000000000, 10.000000000000000, 0.0},
    {40.259136031606097, 0.50000000000000000, 20.000000000000000, 0.0},
    {145.94689054779593, 0.50000000000000000, 50.000000000000000, 0.0},
    {360.86317552485292, 0.50000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0002 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0003[7] = {
    {-0.28768207245178090, 0.75000000000000000, 1.0000000000000000, 0.0},
    {0.27193371548364176, 0.75000000000000000, 2.0000000000000000, 0.0},
    {4.1634350851909909, 0.75000000000000000, 5.0000000000000000, 0.0},
    {14.316191273629222, 0.75000000000000000, 10.000000000000000, 0.0},
    {41.378734830523598, 0.75000000000000000, 20.000000000000000, 0.0},
    {147.29460839722435, 0.75000000000000000, 50.000000000000000, 0.0},
    {362.38386534180256, 0.75000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0004[7] = {
    {0.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.0},
    {0.69314718055994529, 1.0000000000000000, 2.0000000000000000, 0.0},
    {4.7874917427820458, 1.0000000000000000, 5.0000000000000000, 0.0},
    {15.104412573075516, 1.0000000000000000, 10.000000000000000, 0.0},
    {42.335616460753485, 1.0000000000000000, 20.000000000000000, 0.0},
    {148.47776695177302, 1.0000000000000000, 50.000000000000000, 0.0},
    {363.73937555556347, 1.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0004 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0005[7] = {
    {0.22314355131420976, 1.2500000000000000, 1.0000000000000000, 0.0},
    {1.0340737675305385, 1.2500000000000000, 2.0000000000000000, 0.0},
    {5.3178758234120425, 1.2500000000000000, 5.0000000000000000, 0.0},
    {15.793573213482277, 1.2500000000000000, 10.000000000000000, 0.0},
    {43.190537227891710, 1.2500000000000000, 20.000000000000000, 0.0},
    {149.55715397969311, 1.2500000000000000, 50.000000000000000, 0.0},
    {364.99049854037276, 1.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0006[7] = {
    {0.40546510810816438, 1.5000000000000000, 1.0000000000000000, 0.0},
    {1.3217558399823195, 1.5000000000000000, 2.0000000000000000, 0.0},
    {5.7833442974923868, 1.5000000000000000, 5.0000000000000000, 0.0},
    {16.412782714202486, 1.5000000000000000, 10.000000000000000, 0.0},
    {43.972708098310406, 1.5000000000000000, 20.000000000000000, 0.0},
    {150.56201106463718, 1.5000000000000000, 50.000000000000000, 0.0},
    {366.16648043291201, 1.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0006 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0007[7] = {
    {0.55961578793542266, 1.7500000000000000, 1.0000000000000000, 0.0},
    {1.5712166996139025, 1.7500000000000000, 2.0000000000000000, 0.0},
    {6.2003170124520315, 1.7500000000000000, 5.0000000000000000, 0.0},
    {16.978779100654677, 1.7500000000000000, 10.000000000000000, 0.0},
    {44.698963149652087, 1.7500000000000000, 20.000000000000000, 0.0},
    {151.50920208759803, 1.7500000000000000, 50.000000000000000, 0.0},
    {367.28418961508112, 1.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0008[7] = {
    {0.69314718055994529, 2.0000000000000000, 1.0000000000000000, 0.0},
    {1.7917594692280550, 2.0000000000000000, 2.0000000000000000, 0.0},
    {6.5792512120101012, 2.0000000000000000, 5.0000000000000000, 0.0},
    {17.502307845873887, 2.0000000000000000, 10.000000000000000, 0.0},
    {45.380138898476908, 2.0000000000000000, 20.000000000000000, 0.0},
    {152.40959258449735, 2.0000000000000000, 50.000000000000000, 0.0},
    {368.35449607240474, 2.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0008 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0009[7] = {
    {0.81093021621632877, 2.2500000000000000, 1.0000000000000000, 0.0},
    {1.9895852125579747, 2.2500000000000000, 2.0000000000000000, 0.0},
    {6.9273137358461430, 2.2500000000000000, 5.0000000000000000, 0.0},
    {17.990797790818498, 2.2500000000000000, 10.000000000000000, 0.0},
    {46.023750571947929, 2.2500000000000000, 20.000000000000000, 0.0},
    {153.27072604639741, 2.2500000000000000, 50.000000000000000, 0.0},
    {369.38494769504518, 2.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0010[7] = {
    {0.91629073187415511, 2.5000000000000000, 1.0000000000000000, 0.0},
    {2.1690537003695232, 2.5000000000000000, 2.0000000000000000, 0.0},
    {7.2496813662858139, 2.5000000000000000, 5.0000000000000000, 0.0},
    {18.449664641463528, 2.5000000000000000, 10.000000000000000, 0.0},
    {46.635295925335861, 2.5000000000000000, 20.000000000000000, 0.0},
    {154.09812776419872, 2.5000000000000000, 50.000000000000000, 0.0},
    {370.38107412328566, 2.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0010 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0011[7] = {
    {1.0116009116784799, 2.7500000000000000, 1.0000000000000000, 0.0},
    {2.3333567516607996, 2.7500000000000000, 2.0000000000000000, 0.0},
    {7.5502437294010472, 2.7500000000000000, 5.0000000000000000, 0.0},
    {18.883016553309421, 2.7500000000000000, 10.000000000000000, 0.0},
    {47.218961119251361, 2.7500000000000000, 20.000000000000000, 0.0},
    {154.89601073180808, 2.7500000000000000, 50.000000000000000, 0.0},
    {371.34709265146842, 2.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0011 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0012[7] = {
    {1.0986122886681098, 3.0000000000000000, 1.0000000000000000, 0.0},
    {2.4849066497880004, 3.0000000000000000, 2.0000000000000000, 0.0},
    {7.8320141805054693, 3.0000000000000000, 5.0000000000000000, 0.0},
    {19.294067315101941, 3.0000000000000000, 10.000000000000000, 0.0},
    {47.778034171275280, 3.0000000000000000, 20.000000000000000, 0.0},
    {155.66768912251885, 3.0000000000000000, 50.000000000000000, 0.0},
    {372.28632170512907, 3.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0012 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0013[7] = {
    {1.1786549963416462, 3.2500000000000000, 1.0000000000000000, 0.0},
    {2.6255739792779713, 3.2500000000000000, 2.0000000000000000, 0.0},
    {8.0973849884963975, 3.2500000000000000, 5.0000000000000000, 0.0},
    {19.685393511592903, 3.2500000000000000, 10.000000000000000, 0.0},
    {48.315162364343848, 3.2500000000000000, 20.000000000000000, 0.0},
    {156.41583572102601, 3.2500000000000000, 50.000000000000000, 0.0},
    {373.20143827375176, 3.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0013 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0014[7] = {
    {1.2527629684953681, 3.5000000000000000, 1.0000000000000000, 0.0},
    {2.7568403652716422, 3.5000000000000000, 2.0000000000000000, 0.0},
    {8.3482936549539239, 3.5000000000000000, 5.0000000000000000, 0.0},
    {20.059102553897628, 3.5000000000000000, 10.000000000000000, 0.0},
    {48.832520502672075, 3.5000000000000000, 20.000000000000000, 0.0},
    {157.14265020192212, 3.5000000000000000, 50.000000000000000, 0.0},
    {374.09464618998999, 3.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0014 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0015[7] = {
    {1.3217558399823195, 3.7500000000000000, 1.0000000000000000, 0.0},
    {2.8799004580288692, 3.7500000000000000, 2.0000000000000000, 0.0},
    {8.5863356610878228, 3.7500000000000000, 5.0000000000000000, 0.0},
    {20.416946913235375, 3.7500000000000000, 10.000000000000000, 0.0},
    {49.331925352969840, 3.7500000000000000, 20.000000000000000, 0.0},
    {157.84997359248578, 3.7500000000000000, 50.000000000000000, 0.0},
    {374.96779059316628, 3.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0015 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0016[7] = {
    {1.3862943611198906, 4.0000000000000000, 1.0000000000000000, 0.0},
    {2.9957322735539909, 4.0000000000000000, 2.0000000000000000, 0.0},
    {8.8128434335171946, 4.0000000000000000, 5.0000000000000000, 0.0},
    {20.760404383895366, 4.0000000000000000, 10.000000000000000, 0.0},
    {49.814916098536315, 4.0000000000000000, 20.000000000000000, 0.0},
    {158.53936874740285, 4.0000000000000000, 50.000000000000000, 0.0},
    {375.82243840469062, 4.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0016 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0017[7] = {
    {1.4469189829363254, 4.2500000000000000, 1.0000000000000000, 0.0},
    {3.1051470595398580, 4.2500000000000000, 2.0000000000000000, 0.0},
    {9.0289431925013410, 4.2500000000000000, 5.0000000000000000, 0.0},
    {21.090736067683487, 4.2500000000000000, 10.000000000000000, 0.0},
    {50.282812500035568, 4.2500000000000000, 20.000000000000000, 0.0},
    {159.21217852927390, 4.2500000000000000, 50.000000000000000, 0.0},
    {376.65993650925122, 4.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0017 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0018[7] = {
    {1.5040773967762742, 4.5000000000000000, 1.0000000000000000, 0.0},
    {3.2088254890146990, 4.5000000000000000, 2.0000000000000000, 0.0},
    {9.2355968499548258, 4.5000000000000000, 5.0000000000000000, 0.0},
    {21.409029270846641, 4.5000000000000000, 10.000000000000000, 0.0},
    {50.736757955326823, 4.5000000000000000, 20.000000000000000, 0.0},
    {159.86956888732874, 4.5000000000000000, 50.000000000000000, 0.0},
    {377.48145483420006, 4.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0018 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0019[7] = {
    {1.5581446180465499, 4.7500000000000000, 1.0000000000000000, 0.0},
    {3.3073444728558088, 4.7500000000000000, 2.0000000000000000, 0.0},
    {9.4336335214750253, 4.7500000000000000, 5.0000000000000000, 0.0},
    {21.716229897365636, 4.7500000000000000, 10.000000000000000, 0.0},
    {51.177752043468168, 4.7500000000000000, 20.000000000000000, 0.0},
    {160.51256141951123, 4.7500000000000000, 50.000000000000000, 0.0},
    {378.28801891229477, 4.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0019 = 2.5000000000000020e-13;

const log_rising_factorial_fixture<double> fixture_0020[7] = {
    {1.6094379124341003, 5.0000000000000000, 1.0000000000000000, 0.0},
    {3.4011973816621555, 5.0000000000000000, 2.0000000000000000, 0.0},
    {9.6237736497335238, 5.0000000000000000, 5.0000000000000000, 0.0},
    {22.013167352390735, 5.0000000000000000, 10.000000000000000, 0.0},
    {51.606675567764377, 5.0000000000000000, 20.000000000000000, 0.0},
    {161.14205843284725, 5.0000000000000000, 50.000000000000000, 0.0},
    {379.08053494271206, 5.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0020 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const log_rising_factorial_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::ln_rising_factorial(fixture.a, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(LnRisingFactorial, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
  test(fixture_0011, tolerance_0011);
  test(fixture_0012, tolerance_0012);
  test(fixture_0013, tolerance_0013);
  test(fixture_0014, tolerance_0014);
  test(fixture_0015, tolerance_0015);
  test(fixture_0016, tolerance_0016);
  test(fixture_0017, tolerance_0017);
  test(fixture_0018, tolerance_0018);
  test(fixture_0019, tolerance_0019);
  test(fixture_0020, tolerance_0020);
}
