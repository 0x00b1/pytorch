#include <gtest/gtest.h>
#include <ATen/native/special_functions/airy_ai.h>

template<typename T1>
struct airy_ai_fixture {
  T1 f0;
  T1 x;
  T1 f;
};

const airy_ai_fixture<double> fixture_0001[41] = {
    {0.040241238486444071, -10.000000000000000, 0.0},
    {0.31910324771912801, -9.5000000000000000, 0.0},
    {-0.022133721547341240, -9.0000000000000000, 0.0},
    {-0.33029023763020882, -8.5000000000000000, 0.0},
    {-0.052705050356385910, -8.0000000000000000, 0.0},
    {0.32177571638064789, -7.5000000000000000, 0.0},
    {0.18428083525050609, -7.0000000000000000, 0.0},
    {-0.23802030199711663, -6.5000000000000000, 0.0},
    {-0.32914517362982321, -6.0000000000000000, 0.0},
    {0.017781541276574383, -5.5000000000000000, 0.0},
    {0.35076100902411411, -5.0000000000000000, 0.0},
    {0.29215278105595921, -4.5000000000000000, 0.0},
    {-0.070265532949289680, -4.0000000000000000, 0.0},
    {-0.37553382314043182, -3.5000000000000000, 0.0},
    {-0.37881429367765823, -3.0000000000000000, 0.0},
    {-0.11232506769296607, -2.5000000000000000, 0.0},
    {0.22740742820168561, -2.0000000000000000, 0.0},
    {0.46425657774886947, -1.5000000000000000, 0.0},
    {0.53556088329235207, -1.0000000000000000, 0.0},
    {0.47572809161053958, -0.50000000000000000, 0.0},
    {0.35502805388781722, 0.0000000000000000, 0.0},
    {0.23169360648083348, 0.50000000000000000, 0.0},
    {0.13529241631288141, 1.0000000000000000, 0.0},
    {0.071749497008105428, 1.5000000000000000, 0.0},
    {0.034924130423274372, 2.0000000000000000, 0.0},
    {0.015725923380470481, 2.5000000000000000, 0.0},
    {0.0065911393574607175, 3.0000000000000000, 0.0},
    {0.0025840987869896349, 3.5000000000000000, 0.0},
    {0.00095156385120480195, 4.0000000000000000, 0.0},
    {0.00033025032351430934, 4.5000000000000000, 0.0},
    {0.00010834442813607434, 5.0000000000000000, 0.0},
    {3.3685311908599812e-05, 5.5000000000000000, 0.0},
    {9.9476943602528973e-06, 6.0000000000000000, 0.0},
    {2.7958823432049148e-06, 6.5000000000000000, 0.0},
    {7.4921288639971570e-07, 7.0000000000000000, 0.0},
    {1.9172560675134295e-07, 7.5000000000000000, 0.0},
    {4.6922076160992236e-08, 8.0000000000000000, 0.0},
    {1.0997009755195515e-08, 8.5000000000000000, 0.0},
    {2.4711684308724904e-09, 9.0000000000000000, 0.0},
    {5.3302637046174900e-10, 9.5000000000000000, 0.0},
    {1.1047532552898652e-10, 10.000000000000000, 0.0},
};

const double tolerance_0001 = 5.0000000000000029e-12;

template<typename T1, unsigned int T2>
void
test(const airy_ai_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::airy_ai(fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(AiryAiTest, GSL) {
  test(fixture_0001, tolerance_0001);
}
