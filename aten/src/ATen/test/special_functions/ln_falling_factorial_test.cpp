#include <gtest/gtest.h>
#include <ATen/native/special_functions/ln_falling_factorial.h>

template<typename T1>
struct ln_falling_factorial_fixture {
  T1 f0;
  T1 a;
  T1 x;
  T1 f;
};

const ln_falling_factorial_fixture<double> fixture_0001[8] = {
    {0.0000000000000000, 0.25000000000000000, 0.0000000000000000, 0.0},
    {-1.3862943611198906, 0.25000000000000000, 1.0000000000000000, 0.0},
    {-1.6739764335716716, 0.25000000000000000, 2.0000000000000000, 0.0},
    {1.2189961060245504, 0.25000000000000000, 5.0000000000000000, 0.0},
    {10.652629627499577, 0.25000000000000000, 10.000000000000000, 0.0},
    {37.009286978056579, 0.25000000000000000, 20.000000000000000, 0.0},
    {142.00130357249986, 0.25000000000000000, 50.000000000000000, 0.0},
    {356.39490392491268, 0.25000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0002[8] = {
    {0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0},
    {-0.69314718055994529, 0.50000000000000000, 1.0000000000000000, 0.0},
    {-1.3862943611198906, 0.50000000000000000, 2.0000000000000000, 0.0},
    {1.1882244473577968, 0.50000000000000000, 5.0000000000000000, 0.0},
    {10.423821297312623, 0.50000000000000000, 10.000000000000000, 0.0},
    {36.595574385476453, 0.50000000000000000, 20.000000000000000, 0.0},
    {141.35177069766135, 0.50000000000000000, 50.000000000000000, 0.0},
    {355.56987070012843, 0.50000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0002 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0003[8] = {
    {0.0000000000000000, 0.75000000000000000, 0.0000000000000000, 0.0},
    {-0.28768207245178090, 0.75000000000000000, 1.0000000000000000, 0.0},
    {-1.6739764335716716, 0.75000000000000000, 2.0000000000000000, 0.0},
    {0.53875233030051306, 0.75000000000000000, 5.0000000000000000, 0.0},
    {9.5676955228018539, 0.75000000000000000, 10.000000000000000, 0.0},
    {35.550894940033700, 0.75000000000000000, 20.000000000000000, 0.0},
    {140.06925763156417, 0.75000000000000000, 50.000000000000000, 0.0},
    {354.11121312104706, 0.75000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0004[8] = {
    {0.0000000000000000, 1.2500000000000000, 0.0000000000000000, 0.0},
    {0.22314355131420976, 1.2500000000000000, 1.0000000000000000, 0.0},
    {-1.1631508098056809, 1.2500000000000000, 2.0000000000000000, 0.0},
    {0.12038381735644083, 1.2500000000000000, 5.0000000000000000, 0.0},
    {8.7067194784442634, 1.2500000000000000, 10.000000000000000, 0.0},
    {34.301236776954369, 1.2500000000000000, 20.000000000000000, 0.0},
    {138.33774192637020, 1.2500000000000000, 50.000000000000000, 0.0},
    {352.02545607244571, 1.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0004 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0005[8] = {
    {0.0000000000000000, 1.5000000000000000, 0.0000000000000000, 0.0},
    {0.40546510810816438, 1.5000000000000000, 1.0000000000000000, 0.0},
    {-0.28768207245178090, 1.5000000000000000, 2.0000000000000000, 0.0},
    {0.34092658697059319, 1.5000000000000000, 5.0000000000000000, 0.0},
    {8.6892202419245166, 1.5000000000000000, 10.000000000000000, 0.0},
    {34.083268761500335, 1.5000000000000000, 20.000000000000000, 0.0},
    {137.87567200782607, 1.5000000000000000, 50.000000000000000, 0.0},
    {351.38527926005855, 1.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0006[8] = {
    {0.0000000000000000, 1.7500000000000000, 0.0000000000000000, 0.0},
    {0.55961578793542266, 1.7500000000000000, 1.0000000000000000, 0.0},
    {0.27193371548364176, 1.7500000000000000, 2.0000000000000000, 0.0},
    {-0.080286878105710335, 1.7500000000000000, 5.0000000000000000, 0.0},
    {8.0170981103906875, 1.7500000000000000, 10.000000000000000, 0.0},
    {33.206345647940623, 1.7500000000000000, 20.000000000000000, 0.0},
    {136.75247759171458, 1.7500000000000000, 50.000000000000000, 0.0},
    {350.08331365823312, 1.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0006 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0007[3] = {
    {0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0},
    {0.69314718055994529, 2.0000000000000000, 1.0000000000000000, 0.0},
    {0.69314718055994529, 2.0000000000000000, 2.0000000000000000, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0008[8] = {
    {0.0000000000000000, 2.2500000000000000, 0.0000000000000000, 0.0},
    {0.81093021621632877, 2.2500000000000000, 1.0000000000000000, 0.0},
    {1.0340737675305385, 2.2500000000000000, 2.0000000000000000, 0.0},
    {-0.080286878105710335, 2.2500000000000000, 5.0000000000000000, 0.0},
    {7.4699568512953363, 2.2500000000000000, 10.000000000000000, 0.0},
    {32.235781477249269, 2.2500000000000000, 20.000000000000000, 0.0},
    {135.28269307565981, 2.2500000000000000, 50.000000000000000, 0.0},
    {348.25397308979655, 2.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0008 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0009[8] = {
    {0.0000000000000000, 2.5000000000000000, 0.0000000000000000, 0.0},
    {0.91629073187415511, 2.5000000000000000, 1.0000000000000000, 0.0},
    {1.3217558399823195, 2.5000000000000000, 2.0000000000000000, 0.0},
    {0.34092658697059319, 2.5000000000000000, 5.0000000000000000, 0.0},
    {7.5906079532564066, 2.5000000000000000, 10.000000000000000, 0.0},
    {32.137358612445027, 2.5000000000000000, 20.000000000000000, 0.0},
    {134.93123302865962, 2.5000000000000000, 50.000000000000000, 0.0},
    {347.72171761392889, 2.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0010[8] = {
    {0.0000000000000000, 2.7500000000000000, 0.0000000000000000, 0.0},
    {1.0116009116784799, 2.7500000000000000, 1.0000000000000000, 0.0},
    {1.5712166996139025, 2.7500000000000000, 2.0000000000000000, 0.0},
    {0.12038381735644083, 2.7500000000000000, 5.0000000000000000, 0.0},
    {7.0476975532025836, 2.7500000000000000, 10.000000000000000, 0.0},
    {31.370134416141731, 2.7500000000000000, 20.000000000000000, 0.0},
    {133.90862584945333, 2.7500000000000000, 50.000000000000000, 0.0},
    {346.51762958741307, 2.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0010 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0011[3] = {
    {0.0000000000000000, 3.0000000000000000, 0.0000000000000000, 0.0},
    {1.0986122886681098, 3.0000000000000000, 1.0000000000000000, 0.0},
    {1.7917594692280550, 3.0000000000000000, 2.0000000000000000, 0.0},
};

const double tolerance_0011 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0012[8] = {
    {0.0000000000000000, 3.2500000000000000, 0.0000000000000000, 0.0},
    {1.1786549963416462, 3.2500000000000000, 1.0000000000000000, 0.0},
    {1.9895852125579749, 3.2500000000000000, 2.0000000000000000, 0.0},
    {0.53875233030051306, 3.2500000000000000, 5.0000000000000000, 0.0},
    {6.7390693427525443, 3.2500000000000000, 10.000000000000000, 0.0},
    {30.596038215319844, 3.2500000000000000, 20.000000000000000, 0.0},
    {132.61653381626675, 3.2500000000000000, 50.000000000000000, 0.0},
    {344.86049775422828, 3.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0012 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0013[8] = {
    {0.0000000000000000, 3.5000000000000000, 0.0000000000000000, 0.0},
    {1.2527629684953681, 3.5000000000000000, 1.0000000000000000, 0.0},
    {2.1690537003695232, 3.5000000000000000, 2.0000000000000000, 0.0},
    {1.1882244473577968, 3.5000000000000000, 5.0000000000000000, 0.0},
    {6.9715687448501837, 3.5000000000000000, 10.000000000000000, 0.0},
    {30.586761200033855, 3.5000000000000000, 20.000000000000000, 0.0},
    {132.34454368456167, 3.5000000000000000, 50.000000000000000, 0.0},
    {344.40493757407933, 3.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0013 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0014[8] = {
    {0.0000000000000000, 3.7500000000000000, 0.0000000000000000, 0.0},
    {1.3217558399823195, 3.7500000000000000, 1.0000000000000000, 0.0},
    {2.3333567516607996, 3.7500000000000000, 2.0000000000000000, 0.0},
    {1.2189961060245504, 3.7500000000000000, 5.0000000000000000, 0.0},
    {6.5368719294365931, 3.7500000000000000, 10.000000000000000, 0.0},
    {29.903797347348302, 3.7500000000000000, 20.000000000000000, 0.0},
    {131.39632022547721, 3.7500000000000000, 50.000000000000000, 0.0},
    {343.27243645422749, 3.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0014 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0015[3] = {
    {0.0000000000000000, 4.0000000000000000, 0.0000000000000000, 0.0},
    {1.3862943611198906, 4.0000000000000000, 1.0000000000000000, 0.0},
    {2.4849066497880004, 4.0000000000000000, 2.0000000000000000, 0.0},
};

const double tolerance_0015 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0016[8] = {
    {0.0000000000000000, 4.2500000000000000, 0.0000000000000000, 0.0},
    {1.4469189829363254, 4.2500000000000000, 1.0000000000000000, 0.0},
    {2.6255739792779718, 4.2500000000000000, 2.0000000000000000, 0.0},
    {2.2733533856886194, 4.2500000000000000, 5.0000000000000000, 0.0},
    {6.4367884708796108, 4.2500000000000000, 10.000000000000000, 0.0},
    {29.286116832984526, 4.2500000000000000, 20.000000000000000, 0.0},
    {130.24026100748154, 4.2500000000000000, 50.000000000000000, 0.0},
    {341.74567610910384, 4.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0016 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0017[8] = {
    {0.0000000000000000, 4.5000000000000000, 0.0000000000000000, 0.0},
    {1.5040773967762742, 4.5000000000000000, 1.0000000000000000, 0.0},
    {2.7568403652716422, 4.5000000000000000, 2.0000000000000000, 0.0},
    {3.3854490246940161, 4.5000000000000000, 5.0000000000000000, 0.0},
    {6.7708980493880322, 4.5000000000000000, 10.000000000000000, 0.0},
    {29.349998572884928, 4.5000000000000000, 20.000000000000000, 0.0},
    {130.03090875538106, 4.5000000000000000, 50.000000000000000, 0.0},
    {341.34988872336891, 4.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0017 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0018[8] = {
    {0.0000000000000000, 4.7500000000000000, 0.0000000000000000, 0.0},
    {1.5581446180465499, 4.7500000000000000, 1.0000000000000000, 0.0},
    {2.8799004580288692, 4.7500000000000000, 2.0000000000000000, 0.0},
    {4.1634350851909909, 4.7500000000000000, 5.0000000000000000, 0.0},
    {6.4367884708796108, 4.7500000000000000, 10.000000000000000, 0.0},
    {28.737362462341434, 4.7500000000000000, 20.000000000000000, 0.0},
    {129.14226217337782, 4.7500000000000000, 50.000000000000000, 0.0},
    {340.27407605826721, 4.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0018 = 2.5000000000000020e-13;

const ln_falling_factorial_fixture<double> fixture_0019[4] = {
    {0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0},
    {1.6094379124341003, 5.0000000000000000, 1.0000000000000000, 0.0},
    {2.9957322735539909, 5.0000000000000000, 2.0000000000000000, 0.0},
    {4.7874917427820458, 5.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0019 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const ln_falling_factorial_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::ln_falling_factorial(fixture.a, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(LnFallingFactorialTest, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
  test(fixture_0011, tolerance_0011);
  test(fixture_0012, tolerance_0012);
  test(fixture_0013, tolerance_0013);
  test(fixture_0014, tolerance_0014);
  test(fixture_0015, tolerance_0015);
  test(fixture_0016, tolerance_0016);
  test(fixture_0017, tolerance_0017);
  test(fixture_0018, tolerance_0018);
  test(fixture_0019, tolerance_0019);
}