#include <gtest/gtest.h>
#include <ATen/native/special_functions/lower_incomplete_gamma.h>

template<typename T1>
struct lower_incomplete_gamma_fixture {
  T1 f0;
  T1 a;
  T1 x;
  T1 f;
};

const lower_incomplete_gamma_fixture<double> fixture_0001[11] = {
    {0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0},
    {1.2100356193111088, 0.50000000000000000, 0.50000000000000000, 0.0},
    {1.4936482656248540, 0.50000000000000000, 1.0000000000000000, 0.0},
    {1.6248713377014197, 0.50000000000000000, 1.5000000000000000, 0.0},
    {1.6918067329451982, 0.50000000000000000, 2.0000000000000000, 0.0},
    {1.7275268983055081, 0.50000000000000000, 2.5000000000000000, 0.0},
    {1.7470973415820525, 0.50000000000000000, 3.0000000000000000, 0.0},
    {1.7580066299159907, 0.50000000000000000, 3.5000000000000000, 0.0},
    {1.7641627815248433, 0.50000000000000000, 4.0000000000000000, 0.0},
    {1.7676685869765310, 0.50000000000000000, 4.5000000000000000, 0.0},
    {1.7696792476451033, 0.50000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const lower_incomplete_gamma_fixture<double> fixture_0002[11] = {
    {0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0},
    {0.39346934028736658, 1.0000000000000000, 0.50000000000000000, 0.0},
    {0.63212055882855767, 1.0000000000000000, 1.0000000000000000, 0.0},
    {0.77686983985157021, 1.0000000000000000, 1.5000000000000000, 0.0},
    {0.86466471676338730, 1.0000000000000000, 2.0000000000000000, 0.0},
    {0.91791500137610116, 1.0000000000000000, 2.5000000000000000, 0.0},
    {0.95021293163213605, 1.0000000000000000, 3.0000000000000000, 0.0},
    {0.96980261657768152, 1.0000000000000000, 3.5000000000000000, 0.0},
    {0.98168436111126578, 1.0000000000000000, 4.0000000000000000, 0.0},
    {0.98889100346175773, 1.0000000000000000, 4.5000000000000000, 0.0},
    {0.99326205300091452, 1.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0002 = 1.0000000000000008e-12;

const lower_incomplete_gamma_fixture<double> fixture_0003[11] = {
    {0.0000000000000000, 1.5000000000000000, 0.0000000000000000, 0.0},
    {0.17613586717520105, 1.5000000000000000, 0.50000000000000000, 0.0},
    {0.37894469164098471, 1.5000000000000000, 1.0000000000000000, 0.0},
    {0.53915814955613639, 1.5000000000000000, 1.5000000000000000, 0.0},
    {0.65451037345177732, 1.5000000000000000, 2.0000000000000000, 0.0},
    {0.73397567046110035, 1.5000000000000000, 2.5000000000000000, 0.0},
    {0.78731493881798065, 1.5000000000000000, 3.0000000000000000, 0.0},
    {0.82250918358631386, 1.5000000000000000, 3.5000000000000000, 0.0},
    {0.84545011298495332, 1.5000000000000000, 4.0000000000000000, 0.0},
    {0.86026855313515838, 1.5000000000000000, 4.5000000000000000, 0.0},
    {0.86977311630380583, 1.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const lower_incomplete_gamma_fixture<double> fixture_0004[11] = {
    {0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0},
    {0.090204010431049864, 2.0000000000000000, 0.50000000000000000, 0.0},
    {0.26424111765711533, 2.0000000000000000, 1.0000000000000000, 0.0},
    {0.44217459962892541, 2.0000000000000000, 1.5000000000000000, 0.0},
    {0.59399415029016189, 2.0000000000000000, 2.0000000000000000, 0.0},
    {0.71270250481635422, 2.0000000000000000, 2.5000000000000000, 0.0},
    {0.80085172652854419, 2.0000000000000000, 3.0000000000000000, 0.0},
    {0.86411177459956678, 2.0000000000000000, 3.5000000000000000, 0.0},
    {0.90842180555632912, 2.0000000000000000, 4.0000000000000000, 0.0},
    {0.93890051903966731, 2.0000000000000000, 4.5000000000000000, 0.0},
    {0.95957231800548715, 2.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0004 = 1.0000000000000008e-12;

const lower_incomplete_gamma_fixture<double> fixture_0005[11] = {
    {0.0000000000000000, 2.5000000000000000, 0.0000000000000000, 0.0},
    {0.049762829522624882, 2.5000000000000000, 0.50000000000000000, 0.0},
    {0.20053759629003473, 2.5000000000000000, 1.0000000000000000, 0.0},
    {0.39882094539234464, 2.5000000000000000, 1.5000000000000000, 0.0},
    {0.59897957413602232, 2.5000000000000000, 2.0000000000000000, 0.0},
    {0.77649405896251644, 2.5000000000000000, 2.5000000000000000, 0.0},
    {0.92227121230783404, 2.5000000000000000, 3.0000000000000000, 0.0},
    {1.0360343155785856, 2.5000000000000000, 3.5000000000000000, 0.0},
    {1.1216500583675566, 2.5000000000000000, 4.0000000000000000, 0.0},
    {1.1843569981137558, 2.5000000000000000, 4.5000000000000000, 0.0},
    {1.2293271368619796, 2.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const lower_incomplete_gamma_fixture<double> fixture_0006[11] = {
    {0.0000000000000000, 3.0000000000000000, 0.0000000000000000, 0.0},
    {0.028775355933941375, 3.0000000000000000, 0.50000000000000000, 0.0},
    {0.16060279414278839, 3.0000000000000000, 1.0000000000000000, 0.0},
    {0.38230633892388372, 3.0000000000000000, 1.5000000000000000, 0.0},
    {0.64664716763387309, 3.0000000000000000, 2.0000000000000000, 0.0},
    {0.91237376823334093, 3.0000000000000000, 2.5000000000000000, 0.0},
    {1.1536198377463129, 3.0000000000000000, 3.0000000000000000, 0.0},
    {1.3583056022757318, 3.0000000000000000, 3.5000000000000000, 0.0},
    {1.5237933888929114, 3.0000000000000000, 4.0000000000000000, 0.0},
    {1.6528438581799278, 3.0000000000000000, 4.5000000000000000, 0.0},
    {1.7506959610338377, 3.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0006 = 1.0000000000000008e-12;

const lower_incomplete_gamma_fixture<double> fixture_0007[11] = {
    {0.0000000000000000, 3.5000000000000000, 0.0000000000000000, 0.0},
    {0.017186588186473853, 3.5000000000000000, 0.50000000000000000, 0.0},
    {0.13346454955364451, 3.5000000000000000, 1.0000000000000000, 0.0},
    {0.38217794506807151, 3.5000000000000000, 1.5000000000000000, 0.0},
    {0.73187696325676832, 3.5000000000000000, 2.0000000000000000, 0.0},
    {1.1300615305834556, 3.5000000000000000, 2.5000000000000000, 0.0},
    {1.5295744430121743, 3.5000000000000000, 3.0000000000000000, 0.0},
    {1.8980326796433657, 3.5000000000000000, 3.5000000000000000, 0.0},
    {2.2180247014793975, 3.5000000000000000, 4.0000000000000000, 0.0},
    {2.4836862531339721, 3.5000000000000000, 4.5000000000000000, 0.0},
    {2.6966551541863035, 3.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const lower_incomplete_gamma_fixture<double> fixture_0008[11] = {
    {0.0000000000000000, 4.0000000000000000, 0.0000000000000000, 0.0},
    {0.010509735337744942, 4.0000000000000000, 0.50000000000000000, 0.0},
    {0.11392894125692285, 4.0000000000000000, 1.0000000000000000, 0.0},
    {0.39385472627070056, 4.0000000000000000, 1.5000000000000000, 0.0},
    {0.85725923700871776, 4.0000000000000000, 2.0000000000000000, 0.0},
    {1.4545432012016042, 4.0000000000000000, 2.5000000000000000, 0.0},
    {2.1166086673066125, 4.0000000000000000, 3.0000000000000000, 0.0},
    {2.7802039925952897, 4.0000000000000000, 3.5000000000000000, 0.0},
    {3.3991792777997465, 4.0000000000000000, 4.0000000000000000, 0.0},
    {3.9462242649924537, 4.0000000000000000, 4.5000000000000000, 0.0},
    {4.4098445082158300, 4.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0008 = 1.0000000000000008e-12;

const lower_incomplete_gamma_fixture<double> fixture_0009[11] = {
    {0.0000000000000000, 4.5000000000000000, 0.0000000000000000, 0.0},
    {0.0065428158426143086, 4.5000000000000000, 0.50000000000000000, 0.0},
    {0.099246482266313482, 4.5000000000000000, 1.0000000000000000, 0.0},
    {0.41531118011906520, 4.5000000000000000, 1.5000000000000000, 0.0},
    {1.0304254272321143, 4.5000000000000000, 2.0000000000000000, 0.0},
    {1.9272813149850065, 4.5000000000000000, 2.5000000000000000, 0.0},
    {3.0251997872703771, 4.5000000000000000, 3.0000000000000000, 0.0},
    {4.2209284961909361, 4.5000000000000000, 3.5000000000000000, 0.0},
    {5.4186846774199164, 4.5000000000000000, 4.0000000000000000, 0.0},
    {6.5454737962920220, 4.5000000000000000, 4.5000000000000000, 0.0},
    {7.5549795998088349, 4.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const lower_incomplete_gamma_fixture<double> fixture_0010[11] = {
    {0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0},
    {0.0041307751189401786, 5.0000000000000000, 0.50000000000000000, 0.0},
    {0.087836323856249093, 5.0000000000000000, 1.0000000000000000, 0.0},
    {0.44582246933137620, 5.0000000000000000, 1.5000000000000000, 0.0},
    {1.2636724162490678, 5.0000000000000000, 2.0000000000000000, 0.0},
    {2.6117275460603704, 5.0000000000000000, 2.5000000000000000, 0.0},
    {4.4336821314294701, 5.0000000000000000, 3.0000000000000000, 0.0},
    {6.5893211205694895, 5.0000000000000000, 3.5000000000000000, 0.0},
    {8.9079135556830362, 5.0000000000000000, 4.0000000000000000, 0.0},
    {11.229514167006828, 5.0000000000000000, 4.5000000000000000, 0.0},
    {13.428161158434902, 5.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0010 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const lower_incomplete_gamma_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::lower_incomplete_gamma(fixture.a, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(LowerIncompleteGammaTest, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
}
