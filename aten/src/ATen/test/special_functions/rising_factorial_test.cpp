#include <gtest/gtest.h>
#include <ATen/native/special_functions/rising_factorial.h>

template<typename T1>
struct rising_factorial_fixture {
  T1 f0;
  T1 a;
  T1 x;
  T1 f;
};

const rising_factorial_fixture<double> fixture_0001[8] = {
    {1.0000000000000000, 0.25000000000000000, 0.0000000000000000, 0.0},
    {0.25000000000000000, 0.25000000000000000, 1.0000000000000000, 0.0},
    {0.31250000000000000, 0.25000000000000000, 2.0000000000000000, 0.0},
    {9.7119140625000000, 0.25000000000000000, 5.0000000000000000, 0.0},
    {176310.36293506622, 0.25000000000000000, 10.000000000000000, 0.0},
    {70619879085128896., 0.25000000000000000, 20.000000000000000, 0.0},
    {4.4529789803918110e+62, 0.25000000000000000, 50.000000000000000, 0.0},
    {8.1323318185788312e+155, 0.25000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0002[8] = {
    {1.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0},
    {0.50000000000000000, 0.50000000000000000, 1.0000000000000000, 0.0},
    {0.75000000000000000, 0.50000000000000000, 2.0000000000000000, 0.0},
    {29.531249999999996, 0.50000000000000000, 5.0000000000000000, 0.0},
    {639383.86230468750, 0.50000000000000000, 10.000000000000000, 0.0},
    {3.0501459767616064e+17, 0.50000000000000000, 20.000000000000000, 0.0},
    {2.4206344837469458e+63, 0.50000000000000000, 50.000000000000000, 0.0},
    {5.2587902919564293e+156, 0.50000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0002 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0003[8] = {
    {1.0000000000000000, 0.75000000000000000, 0.0000000000000000, 0.0},
    {0.75000000000000000, 0.75000000000000000, 1.0000000000000000, 0.0},
    {1.3125000000000000, 0.75000000000000000, 2.0000000000000000, 0.0},
    {64.291992187500000, 0.75000000000000000, 5.0000000000000000, 0.0},
    {1649843.9631700516, 0.75000000000000000, 10.000000000000000, 0.0},
    {9.3445029406828723e+17, 0.75000000000000000, 20.000000000000000, 0.0},
    {9.3161321630923168e+63, 0.75000000000000000, 50.000000000000000, 0.0},
    {2.4060965407256963e+157, 0.75000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0004[8] = {
    {1.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0},
    {1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.0},
    {2.0000000000000000, 1.0000000000000000, 2.0000000000000000, 0.0},
    {120.00000000000000, 1.0000000000000000, 5.0000000000000000, 0.0},
    {3628800.0000000005, 1.0000000000000000, 10.000000000000000, 0.0},
    {2.4329020081766400e+18, 1.0000000000000000, 20.000000000000000, 0.0},
    {3.0414093201713381e+64, 1.0000000000000000, 50.000000000000000, 0.0},
    {9.3326215443944151e+157, 1.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0004 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0005[8] = {
    {1.0000000000000000, 1.2500000000000000, 0.0000000000000000, 0.0},
    {1.2500000000000000, 1.2500000000000000, 1.0000000000000000, 0.0},
    {2.8125000000000000, 1.2500000000000000, 2.0000000000000000, 0.0},
    {203.95019531250000, 1.2500000000000000, 5.0000000000000000, 0.0},
    {7228724.8803377151, 1.2500000000000000, 10.000000000000000, 0.0},
    {5.7202102058954414e+18, 1.2500000000000000, 20.000000000000000, 0.0},
    {8.9504877505875406e+64, 1.2500000000000000, 50.000000000000000, 0.0},
    {3.2610650592501111e+158, 1.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0006[8] = {
    {1.0000000000000000, 1.5000000000000000, 0.0000000000000000, 0.0},
    {1.5000000000000000, 1.5000000000000000, 1.0000000000000000, 0.0},
    {3.7500000000000000, 1.5000000000000000, 2.0000000000000000, 0.0},
    {324.84375000000000, 1.5000000000000000, 5.0000000000000000, 0.0},
    {13427061.108398438, 1.5000000000000000, 10.000000000000000, 0.0},
    {1.2505598504722584e+19, 1.5000000000000000, 20.000000000000000, 0.0},
    {2.4448408285844155e+65, 1.5000000000000000, 50.000000000000000, 0.0},
    {1.0570168486832425e+159, 1.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0006 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0007[8] = {
    {1.0000000000000000, 1.7500000000000000, 0.0000000000000000, 0.0},
    {1.7500000000000000, 1.7500000000000000, 1.0000000000000000, 0.0},
    {4.8125000000000000, 1.7500000000000000, 2.0000000000000000, 0.0},
    {492.90527343750006, 1.7500000000000000, 5.0000000000000000, 0.0},
    {23647763.472104073, 1.7500000000000000, 10.000000000000000, 0.0},
    {2.5853124802555945e+19, 1.7500000000000000, 20.000000000000000, 0.0},
    {6.3039160970257999e+65, 1.7500000000000000, 50.000000000000000, 0.0},
    {3.2321896863748521e+159, 1.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0008[8] = {
    {1.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0},
    {2.0000000000000000, 2.0000000000000000, 1.0000000000000000, 0.0},
    {6.0000000000000000, 2.0000000000000000, 2.0000000000000000, 0.0},
    {720.00000000000000, 2.0000000000000000, 5.0000000000000000, 0.0},
    {39916800.000000000, 2.0000000000000000, 10.000000000000000, 0.0},
    {5.1090942171709440e+19, 2.0000000000000000, 20.000000000000000, 0.0},
    {1.5511187532873824e+66, 2.0000000000000000, 50.000000000000000, 0.0},
    {9.4259477598383599e+159, 2.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0008 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0009[8] = {
    {1.0000000000000000, 2.2500000000000000, 0.0000000000000000, 0.0},
    {2.2500000000000000, 2.2500000000000000, 1.0000000000000000, 0.0},
    {7.3124999999999991, 2.2500000000000000, 2.0000000000000000, 0.0},
    {1019.7509765625000, 2.2500000000000000, 5.0000000000000000, 0.0},
    {65058523.923039436, 2.2500000000000000, 10.000000000000000, 0.0},
    {9.7243573500222505e+19, 2.2500000000000000, 20.000000000000000, 0.0},
    {3.6696999777408920e+66, 2.2500000000000000, 50.000000000000000, 0.0},
    {2.6414626979925898e+160, 2.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0010[8] = {
    {1.0000000000000000, 2.5000000000000000, 0.0000000000000000, 0.0},
    {2.5000000000000000, 2.5000000000000000, 1.0000000000000000, 0.0},
    {8.7500000000000000, 2.5000000000000000, 2.0000000000000000, 0.0},
    {1407.6562500000000, 2.5000000000000000, 5.0000000000000000, 0.0},
    {102940801.83105469, 2.5000000000000000, 10.000000000000000, 0.0},
    {1.7924691190102373e+20, 2.5000000000000000, 20.000000000000000, 0.0},
    {8.3939535114731585e+66, 2.5000000000000000, 50.000000000000000, 0.0},
    {7.1524806760899398e+160, 2.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0010 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0011[8] = {
    {1.0000000000000000, 2.7500000000000000, 0.0000000000000000, 0.0},
    {2.7500000000000000, 2.7500000000000000, 1.0000000000000000, 0.0},
    {10.312500000000000, 2.7500000000000000, 2.0000000000000000, 0.0},
    {1901.2060546875000, 2.7500000000000000, 5.0000000000000000, 0.0},
    {158777840.45555592, 2.7500000000000000, 10.000000000000000, 0.0},
    {3.2131740826033816e+20, 2.7500000000000000, 20.000000000000000, 0.0},
    {1.8641580458347725e+67, 2.7500000000000000, 50.000000000000000, 0.0},
    {1.8792874319350927e+161, 2.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0011 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0012[8] = {
    {1.0000000000000000, 3.0000000000000000, 0.0000000000000000, 0.0},
    {3.0000000000000000, 3.0000000000000000, 1.0000000000000000, 0.0},
    {12.000000000000000, 3.0000000000000000, 2.0000000000000000, 0.0},
    {2520.0000000000000, 3.0000000000000000, 5.0000000000000000, 0.0},
    {239500800.00000000, 3.0000000000000000, 10.000000000000000, 0.0},
    {5.6200036388880377e+20, 3.0000000000000000, 20.000000000000000, 0.0},
    {4.0329087585471938e+67, 3.0000000000000000, 50.000000000000000, 0.0},
    {4.8072333575175635e+161, 3.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0012 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0013[8] = {
    {1.0000000000000000, 3.2500000000000000, 0.0000000000000000, 0.0},
    {3.2500000000000000, 3.2500000000000000, 1.0000000000000000, 0.0},
    {13.812499999999998, 3.2500000000000000, 2.0000000000000000, 0.0},
    {3285.8642578125000, 3.2500000000000000, 5.0000000000000000, 0.0},
    {354207519.13654804, 3.2500000000000000, 10.000000000000000, 0.0},
    {9.6163089350220028e+20, 3.2500000000000000, 20.000000000000000, 0.0},
    {8.5218588371982933e+67, 3.2500000000000000, 50.000000000000000, 0.0},
    {1.2003980483099661e+162, 3.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0013 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0014[8] = {
    {1.0000000000000000, 3.5000000000000000, 0.0000000000000000, 0.0},
    {3.5000000000000000, 3.5000000000000000, 1.0000000000000000, 0.0},
    {15.750000000000000, 3.5000000000000000, 2.0000000000000000, 0.0},
    {4222.9687500000000, 3.5000000000000000, 5.0000000000000000, 0.0},
    {514704009.15527344, 3.5000000000000000, 10.000000000000000, 0.0},
    {1.6132222071092132e+21, 3.5000000000000000, 20.000000000000000, 0.0},
    {1.7627302374093634e+68, 3.5000000000000000, 50.000000000000000, 0.0},
    {2.9325170771968750e+162, 3.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0014 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0015[8] = {
    {1.0000000000000000, 3.7500000000000000, 0.0000000000000000, 0.0},
    {3.7500000000000000, 3.7500000000000000, 1.0000000000000000, 0.0},
    {17.812500000000000, 3.7500000000000000, 2.0000000000000000, 0.0},
    {5357.9443359375000, 3.7500000000000000, 5.0000000000000000, 0.0},
    {736151805.74848652, 3.7500000000000000, 10.000000000000000, 0.0},
    {2.6581712865173428e+21, 3.7500000000000000, 20.000000000000000, 0.0},
    {3.5757940697376094e+68, 3.7500000000000000, 50.000000000000000, 0.0},
    {7.0217012229574833e+162, 3.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0015 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0016[8] = {
    {1.0000000000000000, 4.0000000000000000, 0.0000000000000000, 0.0},
    {4.0000000000000000, 4.0000000000000000, 1.0000000000000000, 0.0},
    {20.000000000000000, 4.0000000000000000, 2.0000000000000000, 0.0},
    {6719.9999999999991, 4.0000000000000000, 5.0000000000000000, 0.0},
    {1037836800.0000000, 4.0000000000000000, 10.000000000000000, 0.0},
    {4.3086694564808297e+21, 4.0000000000000000, 20.000000000000000, 0.0},
    {7.1248054734333768e+68, 4.0000000000000000, 50.000000000000000, 0.0},
    {1.6504834527476967e+163, 4.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0016 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0017[8] = {
    {1.0000000000000000, 4.2500000000000000, 0.0000000000000000, 0.0},
    {4.2500000000000000, 4.2500000000000000, 1.0000000000000000, 0.0},
    {22.312500000000000, 4.2500000000000000, 2.0000000000000000, 0.0},
    {8341.0400390625000, 4.2500000000000000, 5.0000000000000000, 0.0},
    {1444076808.7874651, 4.2500000000000000, 10.000000000000000, 0.0},
    {6.8793594689003559e+21, 4.2500000000000000, 20.000000000000000, 0.0},
    {1.3962737940947973e+69, 4.2500000000000000, 50.000000000000000, 0.0},
    {3.8135722611693530e+163, 4.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0017 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0018[8] = {
    {1.0000000000000000, 4.5000000000000000, 0.0000000000000000, 0.0},
    {4.5000000000000000, 4.5000000000000000, 1.0000000000000000, 0.0},
    {24.749999999999996, 4.5000000000000000, 2.0000000000000000, 0.0},
    {10255.781250000000, 4.5000000000000000, 5.0000000000000000, 0.0},
    {1985286892.4560544, 4.5000000000000000, 10.000000000000000, 0.0},
    {1.0831634819161862e+22, 4.5000000000000000, 20.000000000000000, 0.0},
    {2.6944590771828837e+69, 4.5000000000000000, 50.000000000000000, 0.0},
    {8.6718719282821878e+163, 4.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0018 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0019[8] = {
    {1.0000000000000000, 4.7500000000000000, 0.0000000000000000, 0.0},
    {4.7500000000000000, 4.7500000000000000, 1.0000000000000000, 0.0},
    {27.312500000000000, 4.7500000000000000, 2.0000000000000000, 0.0},
    {12501.870117187498, 4.7500000000000000, 5.0000000000000000, 0.0},
    {2699223287.7444506, 4.7500000000000000, 10.000000000000000, 0.0},
    {1.6835084814609839e+22, 4.7500000000000000, 20.000000000000000, 0.0},
    {5.1253048332905732e+69, 4.7500000000000000, 50.000000000000000, 0.0},
    {1.9426706716849034e+164, 4.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0019 = 2.5000000000000020e-13;

const rising_factorial_fixture<double> fixture_0020[8] = {
    {1.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0},
    {5.0000000000000000, 5.0000000000000000, 1.0000000000000000, 0.0},
    {30.000000000000000, 5.0000000000000000, 2.0000000000000000, 0.0},
    {15119.999999999998, 5.0000000000000000, 5.0000000000000000, 0.0},
    {3632428800.0000000, 5.0000000000000000, 10.000000000000000, 0.0},
    {2.5852016738884974e+22, 5.0000000000000000, 20.000000000000000, 0.0},
    {9.6184873891350585e+69, 5.0000000000000000, 50.000000000000000, 0.0},
    {4.2912569771440110e+164, 5.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0020 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const rising_factorial_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::rising_factorial(fixture.a, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(RisingFactorialTest, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
  test(fixture_0011, tolerance_0011);
  test(fixture_0012, tolerance_0012);
  test(fixture_0013, tolerance_0013);
  test(fixture_0014, tolerance_0014);
  test(fixture_0015, tolerance_0015);
  test(fixture_0016, tolerance_0016);
  test(fixture_0017, tolerance_0017);
  test(fixture_0018, tolerance_0018);
  test(fixture_0019, tolerance_0019);
  test(fixture_0020, tolerance_0020);
}