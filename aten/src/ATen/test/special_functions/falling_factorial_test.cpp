#include <gtest/gtest.h>
#include <ATen/native/special_functions/falling_factorial.h>

template<typename T1>
struct falling_factorial_fixture {
  T1 f0;
  T1 a;
  T1 x;
  T1 f;
};

const falling_factorial_fixture<double> fixture_0001[8] = {
    {1.0000000000000000, 0.25000000000000000, 0.0000000000000000, 0.0},
    {0.25000000000000000, 0.25000000000000000, 1.0000000000000000, 0.0},
    {-0.18750000000000000, 0.25000000000000000, 2.0000000000000000, 0.0},
    {3.3837890625000000, 0.25000000000000000, 5.0000000000000000, 0.0},
    {-42303.691363334656, 0.25000000000000000, 10.000000000000000, 0.0},
    {-11828484735041610., 0.25000000000000000, 20.000000000000000, 0.0},
    {-4.6814734487901089e+61, 0.25000000000000000, 50.000000000000000, 0.0},
    {-6.0303171446759310e+154, 0.25000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0002[8] = {
    {1.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0},
    {0.50000000000000000, 0.50000000000000000, 1.0000000000000000, 0.0},
    {-0.25000000000000000, 0.50000000000000000, 2.0000000000000000, 0.0},
    {3.2812499999999996, 0.50000000000000000, 5.0000000000000000, 0.0},
    {-33651.782226562500, 0.50000000000000000, 10.000000000000000, 0.0},
    {-7820887119901554.0, 0.50000000000000000, 20.000000000000000, 0.0},
    {-2.4450853371181271e+61, 0.50000000000000000, 50.000000000000000, 0.0},
    {-2.6426081869127788e+154, 0.50000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0002 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0003[8] = {
    {1.0000000000000000, 0.75000000000000000, 0.0000000000000000, 0.0},
    {0.75000000000000000, 0.75000000000000000, 1.0000000000000000, 0.0},
    {-0.18750000000000000, 0.75000000000000000, 2.0000000000000000, 0.0},
    {1.7138671875000000, 0.75000000000000000, 5.0000000000000000, 0.0},
    {-14295.434832572937, 0.75000000000000000, 10.000000000000000, 0.0},
    {-2751423860459567.5, 0.75000000000000000, 20.000000000000000, 0.0},
    {-6.7811862645560589e+60, 0.75000000000000000, 50.000000000000000, 0.0},
    {-6.1453389057270772e+153, 0.75000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0004[8] = {
    {1.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0},
    {1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.0},
    {0.0000000000000000, 1.0000000000000000, 2.0000000000000000, 0.0},
    {0.0000000000000000, 1.0000000000000000, 5.0000000000000000, 0.0},
    {0.0000000000000000, 1.0000000000000000, 10.000000000000000, 0.0},
    {0.0000000000000000, 1.0000000000000000, 20.000000000000000, 0.0},
    {0.0000000000000000, 1.0000000000000000, 50.000000000000000, 0.0},
    {0.0000000000000000, 1.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0004 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0005[8] = {
    {1.0000000000000000, 1.2500000000000000, 0.0000000000000000, 0.0},
    {1.2500000000000000, 1.2500000000000000, 1.0000000000000000, 0.0},
    {0.31250000000000000, 1.2500000000000000, 2.0000000000000000, 0.0},
    {-1.1279296875000000, 1.2500000000000000, 5.0000000000000000, 0.0},
    {6043.3844804763794, 1.2500000000000000, 10.000000000000000, 0.0},
    {788565649002774.00, 1.2500000000000000, 20.000000000000000, 0.0},
    {1.2003778073820791e+60, 1.2500000000000000, 50.000000000000000, 0.0},
    {7.6333128413619383e+152, 1.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0006[8] = {
    {1.0000000000000000, 1.5000000000000000, 0.0000000000000000, 0.0},
    {1.5000000000000000, 1.5000000000000000, 1.0000000000000000, 0.0},
    {0.75000000000000000, 1.5000000000000000, 2.0000000000000000, 0.0},
    {-1.4062500000000000, 1.5000000000000000, 5.0000000000000000, 0.0},
    {5938.5498046875000, 1.5000000000000000, 10.000000000000000, 0.0},
    {634125982694720.50, 1.5000000000000000, 20.000000000000000, 0.0},
    {7.5621195993344138e+59, 1.5000000000000000, 50.000000000000000, 0.0},
    {4.0242764267707290e+152, 1.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0006 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0007[8] = {
    {1.0000000000000000, 1.7500000000000000, 0.0000000000000000, 0.0},
    {1.7500000000000000, 1.7500000000000000, 1.0000000000000000, 0.0},
    {1.3125000000000000, 1.7500000000000000, 2.0000000000000000, 0.0},
    {-0.92285156250000000, 1.7500000000000000, 5.0000000000000000, 0.0},
    {3032.3649644851685, 1.7500000000000000, 10.000000000000000, 0.0},
    {263835164701602.38, 1.7500000000000000, 20.000000000000000, 0.0},
    {2.4594976089063422e+59, 1.7500000000000000, 50.000000000000000, 0.0},
    {1.0945896269742883e+152, 1.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0008[8] = {
    {1.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0},
    {2.0000000000000000, 2.0000000000000000, 1.0000000000000000, 0.0},
    {2.0000000000000000, 2.0000000000000000, 2.0000000000000000, 0.0},
    {0.0000000000000000, 2.0000000000000000, 5.0000000000000000, 0.0},
    {0.0000000000000000, 2.0000000000000000, 10.000000000000000, 0.0},
    {0.0000000000000000, 2.0000000000000000, 20.000000000000000, 0.0},
    {0.0000000000000000, 2.0000000000000000, 50.000000000000000, 0.0},
    {0.0000000000000000, 2.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0008 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0009[8] = {
    {1.0000000000000000, 2.2500000000000000, 0.0000000000000000, 0.0},
    {2.2500000000000000, 2.2500000000000000, 1.0000000000000000, 0.0},
    {2.8125000000000000, 2.2500000000000000, 2.0000000000000000, 0.0},
    {0.92285156250000000, 2.2500000000000000, 5.0000000000000000, 0.0},
    {-1754.5309782028198, 2.2500000000000000, 10.000000000000000, 0.0},
    {-99959025929929.078, 2.2500000000000000, 20.000000000000000, 0.0},
    {-5.6562305059888551e+58, 2.2500000000000000, 50.000000000000000, 0.0},
    {-1.7570285312597814e+151, 2.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0010[8] = {
    {1.0000000000000000, 2.5000000000000000, 0.0000000000000000, 0.0},
    {2.5000000000000000, 2.5000000000000000, 1.0000000000000000, 0.0},
    {3.7500000000000000, 2.5000000000000000, 2.0000000000000000, 0.0},
    {1.4062500000000000, 2.5000000000000000, 5.0000000000000000, 0.0},
    {-1979.5166015625000, 2.5000000000000000, 10.000000000000000, 0.0},
    {-90589426099245.797, 2.5000000000000000, 20.000000000000000, 0.0},
    {-3.9800629470181124e+58, 2.5000000000000000, 50.000000000000000, 0.0},
    {-1.0318657504540329e+151, 2.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0010 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0011[8] = {
    {1.0000000000000000, 2.7500000000000000, 0.0000000000000000, 0.0},
    {2.7500000000000000, 2.7500000000000000, 1.0000000000000000, 0.0},
    {4.8125000000000000, 2.7500000000000000, 2.0000000000000000, 0.0},
    {1.1279296875000000, 2.7500000000000000, 5.0000000000000000, 0.0},
    {-1150.2074003219604, 2.7500000000000000, 10.000000000000000, 0.0},
    {-42060678430690.234, 2.7500000000000000, 20.000000000000000, 0.0},
    {-1.4314536348132149e+58, 2.7500000000000000, 50.000000000000000, 0.0},
    {-3.0952405904157255e+150, 2.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0011 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0012[8] = {
    {1.0000000000000000, 3.0000000000000000, 0.0000000000000000, 0.0},
    {3.0000000000000000, 3.0000000000000000, 1.0000000000000000, 0.0},
    {6.0000000000000000, 3.0000000000000000, 2.0000000000000000, 0.0},
    {0.0000000000000000, 3.0000000000000000, 5.0000000000000000, 0.0},
    {0.0000000000000000, 3.0000000000000000, 10.000000000000000, 0.0},
    {0.0000000000000000, 3.0000000000000000, 20.000000000000000, 0.0},
    {0.0000000000000000, 3.0000000000000000, 50.000000000000000, 0.0},
    {0.0000000000000000, 3.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0012 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0013[8] = {
    {1.0000000000000000, 3.2500000000000000, 0.0000000000000000, 0.0},
    {3.2500000000000000, 3.2500000000000000, 1.0000000000000000, 0.0},
    {7.3125000000000000, 3.2500000000000000, 2.0000000000000000, 0.0},
    {-1.7138671875000000, 3.2500000000000000, 5.0000000000000000, 0.0},
    {844.77417469024670, 3.2500000000000000, 10.000000000000000, 0.0},
    {19395034881926.543, 3.2500000000000000, 20.000000000000000, 0.0},
    {3.9321388544307538e+57, 3.2500000000000000, 50.000000000000000, 0.0},
    {5.9021630249036580e+149, 3.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0013 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0014[8] = {
    {1.0000000000000000, 3.5000000000000000, 0.0000000000000000, 0.0},
    {3.5000000000000000, 3.5000000000000000, 1.0000000000000000, 0.0},
    {8.7500000000000000, 3.5000000000000000, 2.0000000000000000, 0.0},
    {-3.2812500000000000, 3.5000000000000000, 5.0000000000000000, 0.0},
    {1065.8935546875000, 3.5000000000000000, 10.000000000000000, 0.0},
    {19215938869536.988, 3.5000000000000000, 20.000000000000000, 0.0},
    {2.9957463042071814e+57, 3.5000000000000000, 50.000000000000000, 0.0},
    {3.7425182658954563e+149, 3.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0014 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0015[8] = {
    {1.0000000000000000, 3.7500000000000000, 0.0000000000000000, 0.0},
    {3.7500000000000000, 3.7500000000000000, 1.0000000000000000, 0.0},
    {10.312500000000000, 3.7500000000000000, 2.0000000000000000, 0.0},
    {-3.3837890625000000, 3.7500000000000000, 5.0000000000000000, 0.0},
    {690.12444019317627, 3.7500000000000000, 10.000000000000000, 0.0},
    {9706310407082.3613, 3.7500000000000000, 20.000000000000000, 0.0},
    {1.1606380822809851e+57, 3.7500000000000000, 50.000000000000000, 0.0},
    {1.2059378923697631e+149, 3.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0015 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0016[8] = {
    {1.0000000000000000, 4.0000000000000000, 0.0000000000000000, 0.0},
    {4.0000000000000000, 4.0000000000000000, 1.0000000000000000, 0.0},
    {12.000000000000000, 4.0000000000000000, 2.0000000000000000, 0.0},
    {0.0000000000000000, 4.0000000000000000, 5.0000000000000000, 0.0},
    {0.0000000000000000, 4.0000000000000000, 10.000000000000000, 0.0},
    {0.0000000000000000, 4.0000000000000000, 20.000000000000000, 0.0},
    {0.0000000000000000, 4.0000000000000000, 50.000000000000000, 0.0},
    {0.0000000000000000, 4.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0016 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0017[8] = {
    {1.0000000000000000, 4.2500000000000000, 0.0000000000000000, 0.0},
    {4.2500000000000000, 4.2500000000000000, 1.0000000000000000, 0.0},
    {13.812500000000000, 4.2500000000000000, 2.0000000000000000, 0.0},
    {9.7119140625000000, 4.2500000000000000, 5.0000000000000000, 0.0},
    {-624.39830303192139, 4.2500000000000000, 10.000000000000000, 0.0},
    {-5233580841154.7803, 4.2500000000000000, 20.000000000000000, 0.0},
    {-3.6528065860832145e+56, 4.2500000000000000, 50.000000000000000, 0.0},
    {-2.6197590449964016e+148, 4.2500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0017 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0018[8] = {
    {1.0000000000000000, 4.5000000000000000, 0.0000000000000000, 0.0},
    {4.5000000000000000, 4.5000000000000000, 1.0000000000000000, 0.0},
    {15.750000000000000, 4.5000000000000000, 2.0000000000000000, 0.0},
    {29.531250000000000, 4.5000000000000000, 5.0000000000000000, 0.0},
    {-872.09472656249989, 4.5000000000000000, 10.000000000000000, 0.0},
    {-5578820962123.6416, 4.5000000000000000, 20.000000000000000, 0.0},
    {-2.9628260151499600e+56, 4.5000000000000000, 50.000000000000000, 0.0},
    {-1.7634902823591160e+148, 4.5000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0018 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0019[8] = {
    {1.0000000000000000, 4.7500000000000000, 0.0000000000000000, 0.0},
    {4.7500000000000000, 4.7500000000000000, 1.0000000000000000, 0.0},
    {17.812500000000000, 4.7500000000000000, 2.0000000000000000, 0.0},
    {64.291992187500000, 4.7500000000000000, 5.0000000000000000, 0.0},
    {-624.39830303192139, 4.7500000000000000, 10.000000000000000, 0.0},
    {-3023277012042.0469, 4.7500000000000000, 20.000000000000000, 0.0},
    {-1.2183493681402606e+56, 4.7500000000000000, 50.000000000000000, 0.0},
    {-6.0138635052560362e+147, 4.7500000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0019 = 2.5000000000000020e-13;

const falling_factorial_fixture<double> fixture_0020[8] = {
    {1.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0},
    {5.0000000000000000, 5.0000000000000000, 1.0000000000000000, 0.0},
    {20.000000000000000, 5.0000000000000000, 2.0000000000000000, 0.0},
    {120.00000000000000, 5.0000000000000000, 5.0000000000000000, 0.0},
    {0.0000000000000000, 5.0000000000000000, 10.000000000000000, 0.0},
    {0.0000000000000000, 5.0000000000000000, 20.000000000000000, 0.0},
    {0.0000000000000000, 5.0000000000000000, 50.000000000000000, 0.0},
    {0.0000000000000000, 5.0000000000000000, 100.00000000000000, 0.0},
};

const double tolerance_0020 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const falling_factorial_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::falling_factorial(fixture.a, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(FallingFactorialTest, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
  test(fixture_0011, tolerance_0011);
  test(fixture_0012, tolerance_0012);
  test(fixture_0013, tolerance_0013);
  test(fixture_0014, tolerance_0014);
  test(fixture_0015, tolerance_0015);
  test(fixture_0016, tolerance_0016);
  test(fixture_0017, tolerance_0017);
  test(fixture_0018, tolerance_0018);
  test(fixture_0019, tolerance_0019);
  test(fixture_0020, tolerance_0020);
}
