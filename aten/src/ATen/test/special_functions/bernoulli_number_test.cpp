#include <gtest/gtest.h>
#include <ATen/native/special_functions/bernoulli_number.h>

template<typename T1>
struct bernoulli_number_fixture {
  T1 f0;
  unsigned int n;
  T1 f;
};

const bernoulli_number_fixture<double> fixture_0001[101] = {
    {1.0000000000000000, 0, 0.0},
    {-0.50000000000000000, 1, 0.0},
    {0.16666666666666666, 2, 0.0},
    {0.0000000000000000, 3, 0.0},
    {-0.033333333333333333, 4, 0.0},
    {0.0000000000000000, 5, 0.0},
    {0.023809523809523808, 6, 0.0},
    {0.0000000000000000, 7, 0.0},
    {-0.033333333333333333, 8, 0.0},
    {0.0000000000000000, 9, 0.0},
    {0.075757575757575760, 10, 0.0},
    {0.0000000000000000, 11, 0.0},
    {-0.25311355311355310, 12, 0.0},
    {0.0000000000000000, 13, 0.0},
    {1.1666666666666667, 14, 0.0},
    {0.0000000000000000, 15, 0.0},
    {-7.0921568627450977, 16, 0.0},
    {0.0000000000000000, 17, 0.0},
    {54.971177944862156, 18, 0.0},
    {0.0000000000000000, 19, 0.0},
    {-529.12424242424242, 20, 0.0},
    {0.0000000000000000, 21, 0.0},
    {6192.1231884057970, 22, 0.0},
    {0.0000000000000000, 23, 0.0},
    {-86580.253113553117, 24, 0.0},
    {0.0000000000000000, 25, 0.0},
    {1425517.1666666667, 26, 0.0},
    {0.0000000000000000, 27, 0.0},
    {-27298231.067816094, 28, 0.0},
    {0.0000000000000000, 29, 0.0},
    {601580873.90064240, 30, 0.0},
    {0.0000000000000000, 31, 0.0},
    {-15116315767.092157, 32, 0.0},
    {0.0000000000000000, 33, 0.0},
    {429614643061.16669, 34, 0.0},
    {0.0000000000000000, 35, 0.0},
    {-13711655205088.332, 36, 0.0},
    {0.0000000000000000, 37, 0.0},
    {488332318973593.19, 38, 0.0},
    {0.0000000000000000, 39, 0.0},
    {-19296579341940068., 40, 0.0},
    {0.0000000000000000, 41, 0.0},
    {8.4169304757368256e+17, 42, 0.0},
    {0.0000000000000000, 43, 0.0},
    {-4.0338071854059454e+19, 44, 0.0},
    {0.0000000000000000, 45, 0.0},
    {2.1150748638081993e+21, 46, 0.0},
    {0.0000000000000000, 47, 0.0},
    {-1.2086626522296526e+23, 48, 0.0},
    {0.0000000000000000, 49, 0.0},
    {7.5008667460769642e+24, 50, 0.0},
    {0.0000000000000000, 51, 0.0},
    {-5.0387781014810688e+26, 52, 0.0},
    {0.0000000000000000, 53, 0.0},
    {3.6528776484818122e+28, 54, 0.0},
    {0.0000000000000000, 55, 0.0},
    {-2.8498769302450882e+30, 56, 0.0},
    {0.0000000000000000, 57, 0.0},
    {2.3865427499683627e+32, 58, 0.0},
    {0.0000000000000000, 59, 0.0},
    {-2.1399949257225335e+34, 60, 0.0},
    {0.0000000000000000, 61, 0.0},
    {2.0500975723478097e+36, 62, 0.0},
    {0.0000000000000000, 63, 0.0},
    {-2.0938005911346379e+38, 64, 0.0},
    {0.0000000000000000, 65, 0.0},
    {2.2752696488463515e+40, 66, 0.0},
    {0.0000000000000000, 67, 0.0},
    {-2.6257710286239577e+42, 68, 0.0},
    {0.0000000000000000, 69, 0.0},
    {3.2125082102718032e+44, 70, 0.0},
    {0.0000000000000000, 71, 0.0},
    {-4.1598278166794712e+46, 72, 0.0},
    {0.0000000000000000, 73, 0.0},
    {5.6920695482035283e+48, 74, 0.0},
    {0.0000000000000000, 75, 0.0},
    {-8.2183629419784578e+50, 76, 0.0},
    {0.0000000000000000, 77, 0.0},
    {1.2502904327166994e+53, 78, 0.0},
    {0.0000000000000000, 79, 0.0},
    {-2.0015583233248370e+55, 80, 0.0},
    {0.0000000000000000, 81, 0.0},
    {3.3674982915364376e+57, 82, 0.0},
    {0.0000000000000000, 83, 0.0},
    {-5.9470970503135450e+59, 84, 0.0},
    {0.0000000000000000, 85, 0.0},
    {1.1011910323627977e+62, 86, 0.0},
    {0.0000000000000000, 87, 0.0},
    {-2.1355259545253502e+64, 88, 0.0},
    {0.0000000000000000, 89, 0.0},
    {4.3328896986641194e+66, 90, 0.0},
    {0.0000000000000000, 91, 0.0},
    {-9.1885528241669332e+68, 92, 0.0},
    {0.0000000000000000, 93, 0.0},
    {2.0346896776329074e+71, 94, 0.0},
    {0.0000000000000000, 95, 0.0},
    {-4.7003833958035730e+73, 96, 0.0},
    {0.0000000000000000, 97, 0.0},
    {1.1318043445484249e+76, 98, 0.0},
    {0.0000000000000000, 99, 0.0},
    {-2.8382249570693707e+78, 100, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const bernoulli_number_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::bernoulli_number<T1>(fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}