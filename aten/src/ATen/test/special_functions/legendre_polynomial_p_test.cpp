#include <gtest/gtest.h>
#include <ATen/native/special_functions/legendre_polynomial_p.h>

template<typename T1>
struct legendre_polynomial_p_fixture {
  T1 f0;
  unsigned int l;
  T1 x;
  T1 f;
};

const legendre_polynomial_p_fixture<double> fixture_0001[21] = {
    {1.0000000000000000, 0, -1.0000000000000000, 0.0},
    {1.0000000000000000, 0, -0.90000000000000002, 0.0},
    {1.0000000000000000, 0, -0.80000000000000004, 0.0},
    {1.0000000000000000, 0, -0.69999999999999996, 0.0},
    {1.0000000000000000, 0, -0.59999999999999998, 0.0},
    {1.0000000000000000, 0, -0.50000000000000000, 0.0},
    {1.0000000000000000, 0, -0.39999999999999991, 0.0},
    {1.0000000000000000, 0, -0.29999999999999993, 0.0},
    {1.0000000000000000, 0, -0.19999999999999996, 0.0},
    {1.0000000000000000, 0, -0.099999999999999978, 0.0},
    {1.0000000000000000, 0, 0.0000000000000000, 0.0},
    {1.0000000000000000, 0, 0.10000000000000009, 0.0},
    {1.0000000000000000, 0, 0.20000000000000018, 0.0},
    {1.0000000000000000, 0, 0.30000000000000004, 0.0},
    {1.0000000000000000, 0, 0.40000000000000013, 0.0},
    {1.0000000000000000, 0, 0.50000000000000000, 0.0},
    {1.0000000000000000, 0, 0.60000000000000009, 0.0},
    {1.0000000000000000, 0, 0.70000000000000018, 0.0},
    {1.0000000000000000, 0, 0.80000000000000004, 0.0},
    {1.0000000000000000, 0, 0.90000000000000013, 0.0},
    {1.0000000000000000, 0, 1.0000000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const legendre_polynomial_p_fixture<double> fixture_0002[21] = {
    {-1.0000000000000000, 1, -1.0000000000000000, 0.0},
    {-0.90000000000000002, 1, -0.90000000000000002, 0.0},
    {-0.80000000000000004, 1, -0.80000000000000004, 0.0},
    {-0.69999999999999996, 1, -0.69999999999999996, 0.0},
    {-0.59999999999999998, 1, -0.59999999999999998, 0.0},
    {-0.50000000000000000, 1, -0.50000000000000000, 0.0},
    {-0.39999999999999991, 1, -0.39999999999999991, 0.0},
    {-0.29999999999999993, 1, -0.29999999999999993, 0.0},
    {-0.19999999999999996, 1, -0.19999999999999996, 0.0},
    {-0.099999999999999978, 1, -0.099999999999999978, 0.0},
    {0.0000000000000000, 1, 0.0000000000000000, 0.0},
    {0.10000000000000009, 1, 0.10000000000000009, 0.0},
    {0.20000000000000018, 1, 0.20000000000000018, 0.0},
    {0.30000000000000004, 1, 0.30000000000000004, 0.0},
    {0.40000000000000013, 1, 0.40000000000000013, 0.0},
    {0.50000000000000000, 1, 0.50000000000000000, 0.0},
    {0.60000000000000009, 1, 0.60000000000000009, 0.0},
    {0.70000000000000018, 1, 0.70000000000000018, 0.0},
    {0.80000000000000004, 1, 0.80000000000000004, 0.0},
    {0.90000000000000013, 1, 0.90000000000000013, 0.0},
    {1.0000000000000000, 1, 1.0000000000000000, 0.0},
};

const double tolerance_0002 = 2.5000000000000020e-13;

const legendre_polynomial_p_fixture<double> fixture_0003[21] = {
    {1.0000000000000000, 2, -1.0000000000000000, 0.0},
    {0.71500000000000008, 2, -0.90000000000000002, 0.0},
    {0.46000000000000013, 2, -0.80000000000000004, 0.0},
    {0.23499999999999990, 2, -0.69999999999999996, 0.0},
    {0.039999999999999959, 2, -0.59999999999999998, 0.0},
    {-0.12500000000000000, 2, -0.50000000000000000, 0.0},
    {-0.26000000000000012, 2, -0.39999999999999991, 0.0},
    {-0.36500000000000005, 2, -0.29999999999999993, 0.0},
    {-0.44000000000000000, 2, -0.19999999999999996, 0.0},
    {-0.48499999999999999, 2, -0.099999999999999978, 0.0},
    {-0.50000000000000000, 2, 0.0000000000000000, 0.0},
    {-0.48499999999999999, 2, 0.10000000000000009, 0.0},
    {-0.43999999999999989, 2, 0.20000000000000018, 0.0},
    {-0.36499999999999994, 2, 0.30000000000000004, 0.0},
    {-0.25999999999999984, 2, 0.40000000000000013, 0.0},
    {-0.12500000000000000, 2, 0.50000000000000000, 0.0},
    {0.040000000000000160, 2, 0.60000000000000009, 0.0},
    {0.23500000000000038, 2, 0.70000000000000018, 0.0},
    {0.46000000000000013, 2, 0.80000000000000004, 0.0},
    {0.71500000000000041, 2, 0.90000000000000013, 0.0},
    {1.0000000000000000, 2, 1.0000000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const legendre_polynomial_p_fixture<double> fixture_0004[21] = {
    {-1.0000000000000000, 5, -1.0000000000000000, 0.0},
    {0.041141249999999858, 5, -0.90000000000000002, 0.0},
    {0.39951999999999993, 5, -0.80000000000000004, 0.0},
    {0.36519874999999991, 5, -0.69999999999999996, 0.0},
    {0.15263999999999994, 5, -0.59999999999999998, 0.0},
    {-0.089843750000000000, 5, -0.50000000000000000, 0.0},
    {-0.27064000000000010, 5, -0.39999999999999991, 0.0},
    {-0.34538625000000001, 5, -0.29999999999999993, 0.0},
    {-0.30751999999999996, 5, -0.19999999999999996, 0.0},
    {-0.17882874999999995, 5, -0.099999999999999978, 0.0},
    {0.0000000000000000, 5, 0.0000000000000000, 0.0},
    {0.17882875000000015, 5, 0.10000000000000009, 0.0},
    {0.30752000000000018, 5, 0.20000000000000018, 0.0},
    {0.34538625000000001, 5, 0.30000000000000004, 0.0},
    {0.27063999999999983, 5, 0.40000000000000013, 0.0},
    {0.089843750000000000, 5, 0.50000000000000000, 0.0},
    {-0.15264000000000022, 5, 0.60000000000000009, 0.0},
    {-0.36519875000000029, 5, 0.70000000000000018, 0.0},
    {-0.39951999999999993, 5, 0.80000000000000004, 0.0},
    {-0.041141249999999144, 5, 0.90000000000000013, 0.0},
    {1.0000000000000000, 5, 1.0000000000000000, 0.0},
};

const double tolerance_0004 = 2.5000000000000020e-13;

const legendre_polynomial_p_fixture<double> fixture_0005[21] = {
    {1.0000000000000000, 10, -1.0000000000000000, 0.0},
    {-0.26314561785585955, 10, -0.90000000000000002, 0.0},
    {0.30052979559999993, 10, -0.80000000000000004, 0.0},
    {0.085805795531640444, 10, -0.69999999999999996, 0.0},
    {-0.24366274560000004, 10, -0.59999999999999998, 0.0},
    {-0.18822860717773438, 10, -0.50000000000000000, 0.0},
    {0.096839064400000244, 10, -0.39999999999999991, 0.0},
    {0.25147634951601561, 10, -0.29999999999999993, 0.0},
    {0.12907202559999989, 10, -0.19999999999999996, 0.0},
    {-0.12212499738710943, 10, -0.099999999999999978, 0.0},
    {-0.24609375000000000, 10, 0.0000000000000000, 0.0},
    {-0.12212499738710918, 10, 0.10000000000000009, 0.0},
    {0.12907202560000042, 10, 0.20000000000000018, 0.0},
    {0.25147634951601561, 10, 0.30000000000000004, 0.0},
    {0.096839064399999633, 10, 0.40000000000000013, 0.0},
    {-0.18822860717773438, 10, 0.50000000000000000, 0.0},
    {-0.24366274559999987, 10, 0.60000000000000009, 0.0},
    {0.085805795531641360, 10, 0.70000000000000018, 0.0},
    {0.30052979559999993, 10, 0.80000000000000004, 0.0},
    {-0.26314561785586033, 10, 0.90000000000000013, 0.0},
    {1.0000000000000000, 10, 1.0000000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const legendre_polynomial_p_fixture<double> fixture_0006[21] = {
    {1.0000000000000000, 20, -1.0000000000000000, 0.0},
    {-0.14930823530984846, 20, -0.90000000000000002, 0.0},
    {0.22420460541741333, 20, -0.80000000000000004, 0.0},
    {-0.20457394463834164, 20, -0.69999999999999996, 0.0},
    {0.15916752910098111, 20, -0.59999999999999998, 0.0},
    {-0.048358381067373557, 20, -0.50000000000000000, 0.0},
    {-0.10159261558628116, 20, -0.39999999999999991, 0.0},
    {0.18028715947998045, 20, -0.29999999999999993, 0.0},
    {-0.098042194344594769, 20, -0.19999999999999996, 0.0},
    {-0.082077130944527663, 20, -0.099999999999999978, 0.0},
    {0.17619705200195312, 20, 0.0000000000000000, 0.0},
    {-0.082077130944528010, 20, 0.10000000000000009, 0.0},
    {-0.098042194344594089, 20, 0.20000000000000018, 0.0},
    {0.18028715947998047, 20, 0.30000000000000004, 0.0},
    {-0.10159261558628194, 20, 0.40000000000000013, 0.0},
    {-0.048358381067373557, 20, 0.50000000000000000, 0.0},
    {0.15916752910098078, 20, 0.60000000000000009, 0.0},
    {-0.20457394463834142, 20, 0.70000000000000018, 0.0},
    {0.22420460541741333, 20, 0.80000000000000004, 0.0},
    {-0.14930823530984735, 20, 0.90000000000000013, 0.0},
    {1.0000000000000000, 20, 1.0000000000000000, 0.0},
};

const double tolerance_0006 = 2.5000000000000020e-13;

const legendre_polynomial_p_fixture<double> fixture_0007[21] = {
    {1.0000000000000000, 50, -1.0000000000000000, 0.0},
    {-0.17003765994383679, 50, -0.90000000000000002, 0.0},
    {0.13879737345093096, 50, -0.80000000000000004, 0.0},
    {-0.014572731645892786, 50, -0.69999999999999996, 0.0},
    {-0.058860798844002152, 50, -0.59999999999999998, 0.0},
    {-0.031059099239609821, 50, -0.50000000000000000, 0.0},
    {0.041569033381824688, 50, -0.39999999999999991, 0.0},
    {0.10911051574714785, 50, -0.29999999999999993, 0.0},
    {0.083432272204197480, 50, -0.19999999999999996, 0.0},
    {-0.038205812661313565, 50, -0.099999999999999978, 0.0},
    {-0.11227517265921705, 50, 0.0000000000000000, 0.0},
    {-0.038205812661314162, 50, 0.10000000000000009, 0.0},
    {0.083432272204196606, 50, 0.20000000000000018, 0.0},
    {0.10911051574714806, 50, 0.30000000000000004, 0.0},
    {0.041569033381826034, 50, 0.40000000000000013, 0.0},
    {-0.031059099239609821, 50, 0.50000000000000000, 0.0},
    {-0.058860798844001375, 50, 0.60000000000000009, 0.0},
    {-0.014572731645890714, 50, 0.70000000000000018, 0.0},
    {0.13879737345093096, 50, 0.80000000000000004, 0.0},
    {-0.17003765994383682, 50, 0.90000000000000013, 0.0},
    {1.0000000000000000, 50, 1.0000000000000000, 0.0},
};

const double tolerance_0007 = 5.0000000000000039e-13;

const legendre_polynomial_p_fixture<double> fixture_0008[21] = {
    {1.0000000000000000, 100, -1.0000000000000000, 0.0},
    {0.10226582055871888, 100, -0.90000000000000002, 0.0},
    {0.050861167913584041, 100, -0.80000000000000004, 0.0},
    {-0.077132507199778780, 100, -0.69999999999999996, 0.0},
    {-0.023747023905133068, 100, -0.59999999999999998, 0.0},
    {-0.060518025961861184, 100, -0.50000000000000000, 0.0},
    {-0.072258202125685025, 100, -0.39999999999999991, 0.0},
    {0.057127392202801011, 100, -0.29999999999999993, 0.0},
    {0.014681835355659688, 100, -0.19999999999999996, 0.0},
    {-0.063895098434750275, 100, -0.099999999999999978, 0.0},
    {0.079589237387178768, 100, 0.0000000000000000, 0.0},
    {-0.063895098434749734, 100, 0.10000000000000009, 0.0},
    {0.014681835355657888, 100, 0.20000000000000018, 0.0},
    {0.057127392202801691, 100, 0.30000000000000004, 0.0},
    {-0.072258202125684026, 100, 0.40000000000000013, 0.0},
    {-0.060518025961861184, 100, 0.50000000000000000, 0.0},
    {-0.023747023905134265, 100, 0.60000000000000009, 0.0},
    {-0.077132507199780473, 100, 0.70000000000000018, 0.0},
    {0.050861167913584041, 100, 0.80000000000000004, 0.0},
    {0.10226582055872055, 100, 0.90000000000000013, 0.0},
    {1.0000000000000000, 100, 1.0000000000000000, 0.0},
};

const double tolerance_0008 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const legendre_polynomial_p_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::legendre_polynomial_p(fixture.l, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(LegendrePolynomialPTest, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
}