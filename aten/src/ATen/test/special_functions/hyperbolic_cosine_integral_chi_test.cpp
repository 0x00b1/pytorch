#include <gtest/gtest.h>
#include <ATen/native/special_functions/hyperbolic_cosine_integral_chi.h>

template<typename T1>
struct hyperbolic_cosine_integral_chi_fixture {
  T1 f0;
  T1 x;
  T1 f;
};

const hyperbolic_cosine_integral_chi_fixture<double> fixture_0001[100] = {
    {-1.72286838619432e+00, 1.00000000000001e-01, 0.0},
    {-1.02220556604314e+00, 2.00000000000001e-01, 0.0},
    {-6.04172595470834e-01, 3.00000000000001e-01, 0.0},
    {-2.98807450123168e-01, 4.00000000000000e-01, 0.0},
    {-5.27768449564934e-02, 5.00000000000000e-01, 0.0},
    {1.57750893373982e-01, 6.00000000000001e-01, 0.0},
    {3.45569175695393e-01, 7.00000000000001e-01, 0.0},
    {5.18399984833393e-01, 8.00000000000001e-01, 0.0},
    {6.81313887185435e-01, 9.00000000000000e-01, 0.0},
    {8.37866940980208e-01, 1.00000000000000e+00, 0.0},
    {9.90693687513684e-01, 1.10000000000000e+00, 0.0},
    {1.14184192417060e+00, 1.20000000000000e+00, 0.0},
    {1.29297396119145e+00, 1.30000000000000e+00, 0.0},
    {1.44549407578964e+00, 1.40000000000000e+00, 0.0},
    {1.60063293336158e+00, 1.50000000000000e+00, 0.0},
    {1.75950580766097e+00, 1.60000000000000e+00, 0.0},
    {1.92315427847683e+00, 1.70000000000000e+00, 0.0},
    {2.09257721406203e+00, 1.80000000000000e+00, 0.0},
    {2.26875465438953e+00, 1.90000000000000e+00, 0.0},
    {2.45266692264691e+00, 2.00000000000000e+00, 0.0},
    {2.64531050907370e+00, 2.10000000000000e+00, 0.0},
    {2.84771178138123e+00, 2.20000000000000e+00, 0.0},
    {3.06093926208094e+00, 2.30000000000000e+00, 0.0},
    {3.28611500770737e+00, 2.40000000000000e+00, 0.0},
    {3.52442548835417e+00, 2.50000000000000e+00, 0.0},
    {3.77713227399176e+00, 2.60000000000000e+00, 0.0},
    {4.04558277169773e+00, 2.70000000000000e+00, 0.0},
    {4.33122121568198e+00, 2.80000000000000e+00, 0.0},
    {4.63560008366954e+00, 2.90000000000000e+00, 0.0},
    {4.96039209476561e+00, 3.00000000000000e+00, 0.0},
    {5.30740293267208e+00, 3.10000000000000e+00, 0.0},
    {5.67858483223469e+00, 3.20000000000000e+00, 0.0},
    {6.07605116554042e+00, 3.30000000000000e+00, 0.0},
    {6.50209216531744e+00, 3.40000000000000e+00, 0.0},
    {6.95919192764739e+00, 3.50000000000000e+00, 0.0},
    {7.45004684260265e+00, 3.60000000000000e+00, 0.0},
    {7.97758561013006e+00, 3.70000000000000e+00, 0.0},
    {8.54499100917221e+00, 3.80000000000000e+00, 0.0},
    {9.15572360058091e+00, 3.90000000000000e+00, 0.0},
    {9.81354755882319e+00, 4.00000000000000e+00, 0.0},
    {1.05225588438436e+01, 4.10000000000000e+00, 0.0},
    {1.12872159428001e+01, 4.20000000000000e+00, 0.0},
    {1.21123734318422e+01, 4.30000000000000e+00, 0.0},
    {1.30033186307823e+01, 4.40000000000000e+00, 0.0},
    {1.39658116485924e+01, 4.50000000000000e+00, 0.0},
    {1.50061291453292e+01, 4.60000000000000e+00, 0.0},
    {1.61311121665626e+01, 4.70000000000000e+00, 0.0},
    {1.73482184399192e+01, 4.80000000000000e+00, 0.0},
    {1.86655795602091e+01, 4.90000000000000e+00, 0.0},
    {2.00920635301060e+01, 5.00000000000000e+00, 0.0},
    {2.16373431678268e+01, 5.10000000000000e+00, 0.0},
    {2.33119709420922e+01, 5.20000000000000e+00, 0.0},
    {2.51274608482481e+01, 5.30000000000000e+00, 0.0},
    {2.70963779982646e+01, 5.40000000000000e+00, 0.0},
    {2.92324366618870e+01, 5.50000000000000e+00, 0.0},
    {3.15506075670648e+01, 5.60000000000000e+00, 0.0},
    {3.40672353455289e+01, 5.70000000000000e+00, 0.0},
    {3.68001670946957e+01, 5.80000000000000e+00, 0.0},
    {3.97688931206893e+01, 5.90000000000000e+00, 0.0},
    {4.29947010299935e+01, 6.00000000000000e+00, 0.0},
    {4.65008444499679e+01, 6.10000000000000e+00, 0.0},
    {5.03127277821583e+01, 6.20000000000000e+00, 0.0},
    {5.44581085280789e+01, 6.30000000000000e+00, 0.0},
    {5.89673188761131e+01, 6.40000000000000e+00, 0.0},
    {6.38735084016796e+01, 6.50000000000000e+00, 0.0},
    {6.92129099122437e+01, 6.60000000000000e+00, 0.0},
    {7.50251306656994e+01, 6.70000000000000e+00, 0.0},
    {8.13534714068196e+01, 6.80000000000000e+00, 0.0},
    {8.82452759037372e+01, 6.90000000000000e+00, 0.0},
    {9.57523139268849e+01, 7.00000000000000e+00, 0.0},
    {1.03931200898726e+02, 7.10000000000000e+00, 0.0},
    {1.12843857756473e+02, 7.20000000000000e+00, 0.0},
    {1.22558014914565e+02, 7.30000000000000e+00, 0.0},
    {1.33147764591958e+02, 7.40000000000000e+00, 0.0},
    {1.44694166184626e+02, 7.50000000000000e+00, 0.0},
    {1.57285909819656e+02, 7.60000000000000e+00, 0.0},
    {1.71020043728046e+02, 7.70000000000000e+00, 0.0},
    {1.86002771623081e+02, 7.80000000000000e+00, 0.0},
    {2.02350326874874e+02, 7.90000000000000e+00, 0.0},
    {2.20189930934608e+02, 8.00000000000000e+00, 0.0},
    {2.39660844190035e+02, 8.10000000000000e+00, 0.0},
    {2.60915518233285e+02, 8.20000000000000e+00, 0.0},
    {2.84120859400128e+02, 8.30000000000000e+00, 0.0},
    {3.09459614404162e+02, 8.40000000000000e+00, 0.0},
    {3.37131889948608e+02, 8.50000000000000e+00, 0.0},
    {3.67356819361733e+02, 8.60000000000000e+00, 0.0},
    {4.00374390579764e+02, 8.70000000000000e+00, 0.0},
    {4.36447451204811e+02, 8.80000000000000e+00, 0.0},
    {4.75863907907133e+02, 8.90000000000000e+00, 0.0},
    {5.18939139134868e+02, 9.00000000000000e+00, 0.0},
    {5.66018641955018e+02, 9.10000000000000e+00, 0.0},
    {6.17480935893578e+02, 9.20000000000000e+00, 0.0},
    {6.73740748888459e+02, 9.30000000000000e+00, 0.0},
    {7.35252512936146e+02, 9.40000000000000e+00, 0.0},
    {8.02514199723782e+02, 9.50000000000000e+00, 0.0},
    {8.76071529516956e+02, 9.60000000000000e+00, 0.0},
    {9.56522589845954e+02, 9.70000000000000e+00, 0.0},
    {1.04452290412938e+03, 9.80000000000000e+00, 0.0},
    {1.14079099432533e+03, 9.90000000000000e+00, 0.0},
    {1.24611448604245e+03, 1.00000000000000e+01, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const hyperbolic_cosine_integral_chi_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::hyperbolic_cosine_integral_chi(fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(hyperbolic_cosine_integral_chi_test, GSL) { test(fixture_0001, tolerance_0001); }