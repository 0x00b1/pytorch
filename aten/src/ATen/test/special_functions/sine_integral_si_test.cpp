#include <gtest/gtest.h>
#include <ATen/native/special_functions/sine_integral_si.h>

template<typename T1>
struct sine_integral_si_fixture {
  T1 f0;
  T1 x;
  T1 f;
};

const sine_integral_si_fixture<double> fixture_0001[100] = {
    {0.099944461108276969, 0.10000000000000001, 0.0},
    {0.19955608852623385, 0.20000000000000001, 0.0},
    {0.29850404380704321, 0.30000000000000004, 0.0},
    {0.39646146475137289, 0.40000000000000002, 0.0},
    {0.49310741804306674, 0.50000000000000000, 0.0},
    {0.58812880960808012, 0.60000000000000009, 0.0},
    {0.68122223911661139, 0.70000000000000007, 0.0},
    {0.77209578548199664, 0.80000000000000004, 0.0},
    {0.86047071074529291, 0.90000000000000002, 0.0},
    {0.94608307036718298, 1.0000000000000000, 0.0},
    {1.0286852186737336, 1.1000000000000001, 0.0},
    {1.1080471990137188, 1.2000000000000002, 0.0},
    {1.1839580090760631, 1.3000000000000000, 0.0},
    {1.2562267327792180, 1.4000000000000001, 0.0},
    {1.3246835311721197, 1.5000000000000000, 0.0},
    {1.3891804858704386, 1.6000000000000001, 0.0},
    {1.4495922896833213, 1.7000000000000002, 0.0},
    {1.5058167802555786, 1.8000000000000000, 0.0},
    {1.5577753137488186, 1.9000000000000001, 0.0},
    {1.6054129768026948, 2.0000000000000000, 0.0},
    {1.6486986362444189, 2.1000000000000001, 0.0},
    {1.6876248272410985, 2.2000000000000002, 0.0},
    {1.7222074818055033, 2.3000000000000003, 0.0},
    {1.7524855007617677, 2.4000000000000004, 0.0},
    {1.7785201734438267, 2.5000000000000000, 0.0},
    {1.8003944505267702, 2.6000000000000001, 0.0},
    {1.8182120764708660, 2.7000000000000002, 0.0},
    {1.8320965890813223, 2.8000000000000003, 0.0},
    {1.8421901946458585, 2.9000000000000004, 0.0},
    {1.8486525279994683, 3.0000000000000000, 0.0},
    {1.8516593076745198, 3.1000000000000001, 0.0},
    {1.8514008970184399, 3.2000000000000002, 0.0},
    {1.8480807827952115, 3.3000000000000003, 0.0},
    {1.8419139833261431, 3.4000000000000004, 0.0},
    {1.8331253986659970, 3.5000000000000000, 0.0},
    {1.8219481156495034, 3.6000000000000001, 0.0},
    {1.8086216808784537, 3.7000000000000002, 0.0},
    {1.7933903548495700, 3.8000000000000003, 0.0},
    {1.7765013604478053, 3.9000000000000004, 0.0},
    {1.7582031389490531, 4.0000000000000000, 0.0},
    {1.7387436264917688, 4.1000000000000005, 0.0},
    {1.7183685636908683, 4.2000000000000002, 0.0},
    {1.6973198506824685, 4.2999999999999998, 0.0},
    {1.6758339594083742, 4.4000000000000004, 0.0},
    {1.6541404143792440, 4.5000000000000000, 0.0},
    {1.6324603525003496, 4.6000000000000005, 0.0},
    {1.6110051718097811, 4.7000000000000002, 0.0},
    {1.5899752781723655, 4.8000000000000007, 0.0},
    {1.5695589381006518, 4.9000000000000004, 0.0},
    {1.5499312449446740, 5.0000000000000000, 0.0},
    {1.5312532047129215, 5.1000000000000005, 0.0},
    {1.5136709467664804, 5.2000000000000002, 0.0},
    {1.4973150635753310, 5.3000000000000007, 0.0},
    {1.4823000826492898, 5.4000000000000004, 0.0},
    {1.4687240726650985, 5.5000000000000000, 0.0},
    {1.4566683847148312, 5.6000000000000005, 0.0},
    {1.4461975285082345, 5.7000000000000002, 0.0},
    {1.4373591822818204, 5.8000000000000007, 0.0},
    {1.4301843341093661, 5.9000000000000004, 0.0},
    {1.4246875512805066, 6.0000000000000000, 0.0},
    {1.4208673734246202, 6.1000000000000005, 0.0},
    {1.4187068241140941, 6.2000000000000002, 0.0},
    {1.4181740347917269, 6.3000000000000007, 0.0},
    {1.4192229740384332, 6.4000000000000004, 0.0},
    {1.4217942744358816, 6.5000000000000000, 0.0},
    {1.4258161485899785, 6.6000000000000005, 0.0},
    {1.4312053852702635, 6.7000000000000002, 0.0},
    {1.4378684160916848, 6.8000000000000007, 0.0},
    {1.4457024427225011, 6.9000000000000004, 0.0},
    {1.4545966142480935, 7.0000000000000000, 0.0},
    {1.4644332440573409, 7.1000000000000005, 0.0},
    {1.4750890554472462, 7.2000000000000002, 0.0},
    {1.4864364450631682, 7.3000000000000007, 0.0},
    {1.4983447533060557, 7.4000000000000004, 0.0},
    {1.5106815309433859, 7.5000000000000000, 0.0},
    {1.5233137913552581, 7.6000000000000005, 0.0},
    {1.5361092381286596, 7.7000000000000002, 0.0},
    {1.5489374580779958, 7.8000000000000007, 0.0},
    {1.5616710702145500, 7.9000000000000004, 0.0},
    {1.5741868217069421, 8.0000000000000000, 0.0},
    {1.5863666224636430, 8.0999999999999996, 0.0},
    {1.5980985106213734, 8.2000000000000011, 0.0},
    {1.6092775419334209, 8.3000000000000007, 0.0},
    {1.6198065968128845, 8.4000000000000004, 0.0},
    {1.6295970995903857, 8.5000000000000000, 0.0},
    {1.6385696453865486, 8.5999999999999996, 0.0},
    {1.6466545308687810, 8.7000000000000011, 0.0},
    {1.6537921860518139, 8.8000000000000007, 0.0},
    {1.6599335052041071, 8.9000000000000004, 0.0},
    {1.6650400758296022, 9.0000000000000000, 0.0},
    {1.6690843055985152, 9.0999999999999996, 0.0},
    {1.6720494479940158, 9.2000000000000011, 0.0},
    {1.6739295283161346, 9.3000000000000007, 0.0},
    {1.6747291725325948, 9.4000000000000004, 0.0},
    {1.6744633422814330, 9.5000000000000000, 0.0},
    {1.6731569801054447, 9.6000000000000014, 0.0},
    {1.6708445697273633, 9.7000000000000011, 0.0},
    {1.6675696168513867, 9.8000000000000007, 0.0},
    {1.6633840565958646, 9.9000000000000004, 0.0},
    {1.6583475942188739, 10.000000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const sine_integral_si_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::sine_integral_si(fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(SineIntegralSiTest, GSL) {
  test(fixture_0001, tolerance_0001);
}
