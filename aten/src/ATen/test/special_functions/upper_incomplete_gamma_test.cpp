#include <gtest/gtest.h>
#include <ATen/native/special_functions/upper_incomplete_gamma.h>

template<typename T1>
struct upper_incomplete_gamma_fixture {
  T1 f0;
  T1 a;
  T1 x;
  T1 f;
};

const upper_incomplete_gamma_fixture<double> fixture_0001[11] = {
    {1.7724538509055161, 0.50000000000000000, 0.0000000000000000, 0.0},
    {0.56241823159440707, 0.50000000000000000, 0.50000000000000000, 0.0},
    {0.27880558528066196, 0.50000000000000000, 1.0000000000000000, 0.0},
    {0.14758251320409640, 0.50000000000000000, 1.5000000000000000, 0.0},
    {0.080647117960317691, 0.50000000000000000, 2.0000000000000000, 0.0},
    {0.044926952600007938, 0.50000000000000000, 2.5000000000000000, 0.0},
    {0.025356509323463443, 0.50000000000000000, 3.0000000000000000, 0.0},
    {0.014447220989525332, 0.50000000000000000, 3.5000000000000000, 0.0},
    {0.0082910693806726669, 0.50000000000000000, 4.0000000000000000, 0.0},
    {0.0047852639289850743, 0.50000000000000000, 4.5000000000000000, 0.0},
    {0.0027746032604128094, 0.50000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const upper_incomplete_gamma_fixture<double> fixture_0002[11] = {
    {1.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0},
    {0.60653065971263342, 1.0000000000000000, 0.50000000000000000, 0.0},
    {0.36787944117144233, 1.0000000000000000, 1.0000000000000000, 0.0},
    {0.22313016014842982, 1.0000000000000000, 1.5000000000000000, 0.0},
    {0.13533528323661270, 1.0000000000000000, 2.0000000000000000, 0.0},
    {0.082084998623898800, 1.0000000000000000, 2.5000000000000000, 0.0},
    {0.049787068367863944, 1.0000000000000000, 3.0000000000000000, 0.0},
    {0.030197383422318501, 1.0000000000000000, 3.5000000000000000, 0.0},
    {0.018315638888734179, 1.0000000000000000, 4.0000000000000000, 0.0},
    {0.011108996538242306, 1.0000000000000000, 4.5000000000000000, 0.0},
    {0.0067379469990854670, 1.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0002 = 2.5000000000000015e-12;

const upper_incomplete_gamma_fixture<double> fixture_0003[11] = {
    {0.88622692545275805, 1.5000000000000000, 0.0000000000000000, 0.0},
    {0.71009105827755692, 1.5000000000000000, 0.50000000000000000, 0.0},
    {0.50728223381177329, 1.5000000000000000, 1.0000000000000000, 0.0},
    {0.34706877589662155, 1.5000000000000000, 1.5000000000000000, 0.0},
    {0.23171655200098068, 1.5000000000000000, 2.0000000000000000, 0.0},
    {0.15225125499165762, 1.5000000000000000, 2.5000000000000000, 0.0},
    {0.098911986634777363, 1.5000000000000000, 3.0000000000000000, 0.0},
    {0.063717741866444161, 1.5000000000000000, 3.5000000000000000, 0.0},
    {0.040776812467804693, 1.5000000000000000, 4.0000000000000000, 0.0},
    {0.025958372317599586, 1.5000000000000000, 4.5000000000000000, 0.0},
    {0.016453809148952222, 1.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const upper_incomplete_gamma_fixture<double> fixture_0004[11] = {
    {1.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0},
    {0.90979598956895014, 2.0000000000000000, 0.50000000000000000, 0.0},
    {0.73575888234288467, 2.0000000000000000, 1.0000000000000000, 0.0},
    {0.55782540037107453, 2.0000000000000000, 1.5000000000000000, 0.0},
    {0.40600584970983805, 2.0000000000000000, 2.0000000000000000, 0.0},
    {0.28729749518364578, 2.0000000000000000, 2.5000000000000000, 0.0},
    {0.19914827347145578, 2.0000000000000000, 3.0000000000000000, 0.0},
    {0.13588822540043324, 2.0000000000000000, 3.5000000000000000, 0.0},
    {0.091578194443670907, 2.0000000000000000, 4.0000000000000000, 0.0},
    {0.061099480960332686, 2.0000000000000000, 4.5000000000000000, 0.0},
    {0.040427681994512805, 2.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0004 = 2.5000000000000015e-12;

const upper_incomplete_gamma_fixture<double> fixture_0005[11] = {
    {1.3293403881791370, 2.5000000000000000, 0.0000000000000000, 0.0},
    {1.2795775586565121, 2.5000000000000000, 0.50000000000000000, 0.0},
    {1.1288027918891024, 2.5000000000000000, 1.0000000000000000, 0.0},
    {0.93051944278679244, 2.5000000000000000, 1.5000000000000000, 0.0},
    {0.73036081404311470, 2.5000000000000000, 2.0000000000000000, 0.0},
    {0.55284632921662058, 2.5000000000000000, 2.5000000000000000, 0.0},
    {0.40706917587130298, 2.5000000000000000, 3.0000000000000000, 0.0},
    {0.29330607260055147, 2.5000000000000000, 3.5000000000000000, 0.0},
    {0.20769032981158048, 2.5000000000000000, 4.0000000000000000, 0.0},
    {0.14498339006538111, 2.5000000000000000, 4.5000000000000000, 0.0},
    {0.10001325131715742, 2.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const upper_incomplete_gamma_fixture<double> fixture_0006[11] = {
    {2.0000000000000000, 3.0000000000000000, 0.0000000000000000, 0.0},
    {1.9712246440660586, 3.0000000000000000, 0.50000000000000000, 0.0},
    {1.8393972058572117, 3.0000000000000000, 1.0000000000000000, 0.0},
    {1.6176936610761163, 3.0000000000000000, 1.5000000000000000, 0.0},
    {1.3533528323661270, 3.0000000000000000, 2.0000000000000000, 0.0},
    {1.0876262317666590, 3.0000000000000000, 2.5000000000000000, 0.0},
    {0.84638016225368706, 3.0000000000000000, 3.0000000000000000, 0.0},
    {0.64169439772426817, 3.0000000000000000, 3.5000000000000000, 0.0},
    {0.47620661110708867, 3.0000000000000000, 4.0000000000000000, 0.0},
    {0.34715614182007209, 3.0000000000000000, 4.5000000000000000, 0.0},
    {0.24930403896616229, 3.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0006 = 2.5000000000000015e-12;

const upper_incomplete_gamma_fixture<double> fixture_0007[11] = {
    {3.3233509704478426, 3.5000000000000000, 0.0000000000000000, 0.0},
    {3.3061643822613687, 3.5000000000000000, 0.50000000000000000, 0.0},
    {3.1898864208941982, 3.5000000000000000, 1.0000000000000000, 0.0},
    {2.9411730253797712, 3.5000000000000000, 1.5000000000000000, 0.0},
    {2.5914740071910742, 3.5000000000000000, 2.0000000000000000, 0.0},
    {2.1932894398643867, 3.5000000000000000, 2.5000000000000000, 0.0},
    {1.7937765274356683, 3.5000000000000000, 3.0000000000000000, 0.0},
    {1.4253182908044768, 3.5000000000000000, 3.5000000000000000, 0.0},
    {1.1053262689684449, 3.5000000000000000, 4.0000000000000000, 0.0},
    {0.83966471731387049, 3.5000000000000000, 4.5000000000000000, 0.0},
    {0.62669581626153903, 3.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const upper_incomplete_gamma_fixture<double> fixture_0008[11] = {
    {6.0000000000000000, 4.0000000000000000, 0.0000000000000000, 0.0},
    {5.9894902646622548, 4.0000000000000000, 0.50000000000000000, 0.0},
    {5.8860710587430773, 4.0000000000000000, 1.0000000000000000, 0.0},
    {5.6061452737292994, 4.0000000000000000, 1.5000000000000000, 0.0},
    {5.1427407629912825, 4.0000000000000000, 2.0000000000000000, 0.0},
    {4.5454567987983960, 4.0000000000000000, 2.5000000000000000, 0.0},
    {3.8833913326933875, 4.0000000000000000, 3.0000000000000000, 0.0},
    {3.2197960074047103, 4.0000000000000000, 3.5000000000000000, 0.0},
    {2.6008207222002535, 4.0000000000000000, 4.0000000000000000, 0.0},
    {2.0537757350075463, 4.0000000000000000, 4.5000000000000000, 0.0},
    {1.5901554917841703, 4.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0008 = 2.5000000000000015e-12;

const upper_incomplete_gamma_fixture<double> fixture_0009[11] = {
    {11.631728396567448, 4.5000000000000000, 0.0000000000000000, 0.0},
    {11.625185580724835, 4.5000000000000000, 0.50000000000000000, 0.0},
    {11.532481914301135, 4.5000000000000000, 1.0000000000000000, 0.0},
    {11.216417216448384, 4.5000000000000000, 1.5000000000000000, 0.0},
    {10.601302969335334, 4.5000000000000000, 2.0000000000000000, 0.0},
    {9.7044470815824422, 4.5000000000000000, 2.5000000000000000, 0.0},
    {8.6065286092970723, 4.5000000000000000, 3.0000000000000000, 0.0},
    {7.4107999003765128, 4.5000000000000000, 3.5000000000000000, 0.0},
    {6.2130437191475325, 4.5000000000000000, 4.0000000000000000, 0.0},
    {5.0862546002754270, 4.5000000000000000, 4.5000000000000000, 0.0},
    {4.0767487967586140, 4.5000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const upper_incomplete_gamma_fixture<double> fixture_0010[11] = {
    {24.000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0},
    {23.995869224881059, 5.0000000000000000, 0.50000000000000000, 0.0},
    {23.912163676143752, 5.0000000000000000, 1.0000000000000000, 0.0},
    {23.554177530668625, 5.0000000000000000, 1.5000000000000000, 0.0},
    {22.736327583750931, 5.0000000000000000, 2.0000000000000000, 0.0},
    {21.388272453939631, 5.0000000000000000, 2.5000000000000000, 0.0},
    {19.566317868570529, 5.0000000000000000, 3.0000000000000000, 0.0},
    {17.410678879430510, 5.0000000000000000, 3.5000000000000000, 0.0},
    {15.092086444316964, 5.0000000000000000, 4.0000000000000000, 0.0},
    {12.770485832993172, 5.0000000000000000, 4.5000000000000000, 0.0},
    {10.571838841565098, 5.0000000000000000, 5.0000000000000000, 0.0},
};

const double tolerance_0010 = 2.5000000000000015e-12;

template<typename T1, unsigned int T2>
void
test(const upper_incomplete_gamma_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::upper_incomplete_gamma(fixture.a, fixture.x);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(UpperIncompleteGammaTest, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
}
