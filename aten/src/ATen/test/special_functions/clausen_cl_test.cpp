#include <gtest/gtest.h>
#include <ATen/native/special_functions/clausen_cl.h>

template<typename T1>
struct clausen_cl_fixture {
  T1 f0;
  unsigned int m;
  T1 w;
  T1 f;
};

const clausen_cl_fixture<double> fixture_0001[41] = {
    {0.39071647608680155, 2, -10.000000000000000, 0.0},
    {0.052122207190274598, 2, -9.5000000000000000, 0.0},
    {-0.29122555781958798, 2, -9.0000000000000000, 0.0},
    {-0.60731897904008003, 2, -8.5000000000000000, 0.0},
    {-0.86027963733231172, 2, -8.0000000000000000, 0.0},
    {-1.0032427051361714, 2, -7.5000000000000000, 0.0},
    {-0.96059820624535719, 2, -7.0000000000000000, 0.0},
    {-0.54840355866757695, 2, -6.5000000000000000, 0.0},
    {0.64078266570172315, 2, -6.0000000000000000, 0.0},
    {0.98127747477447369, 2, -5.5000000000000000, 0.0},
    {0.99282013254695667, 2, -5.0000000000000000, 0.0},
    {0.83183922082321915, 2, -4.5000000000000000, 0.0},
    {0.56814394442986960, 2, -4.0000000000000000, 0.0},
    {0.24650453023476912, 2, -3.5000000000000000, 0.0},
    {-0.098026209391301133, 2, -3.0000000000000000, 0.0},
    {-0.43359820323553289, 2, -2.5000000000000000, 0.0},
    {-0.72714605086327944, 2, -2.0000000000000000, 0.0},
    {-0.93921859275409214, 2, -1.5000000000000000, 0.0},
    {-1.0139591323607684, 2, -1.0000000000000000, 0.0},
    {-0.84831187770367933, 2, -0.50000000000000000, 0.0},
    {0.0000000000000000, 2, 0.0000000000000000, 0.0},
    {0.84831187770367933, 2, 0.50000000000000000, 0.0},
    {1.0139591323607684, 2, 1.0000000000000000, 0.0},
    {0.93921859275409214, 2, 1.5000000000000000, 0.0},
    {0.72714605086327944, 2, 2.0000000000000000, 0.0},
    {0.43359820323553289, 2, 2.5000000000000000, 0.0},
    {0.098026209391301133, 2, 3.0000000000000000, 0.0},
    {-0.24650453023476912, 2, 3.5000000000000000, 0.0},
    {-0.56814394442986960, 2, 4.0000000000000000, 0.0},
    {-0.83183922082321915, 2, 4.5000000000000000, 0.0},
    {-0.99282013254695667, 2, 5.0000000000000000, 0.0},
    {-0.98127747477447369, 2, 5.5000000000000000, 0.0},
    {-0.64078266570172315, 2, 6.0000000000000000, 0.0},
    {0.54840355866757695, 2, 6.5000000000000000, 0.0},
    {0.96059820624535719, 2, 7.0000000000000000, 0.0},
    {1.0032427051361714, 2, 7.5000000000000000, 0.0},
    {0.86027963733231172, 2, 8.0000000000000000, 0.0},
    {0.60731897904008003, 2, 8.5000000000000000, 0.0},
    {0.29122555781958798, 2, 9.0000000000000000, 0.0},
    {-0.052122207190274598, 2, 9.5000000000000000, 0.0},
    {-0.39071647608680155, 2, 10.000000000000000, 0.0},
};

const double tolerance_0001 = 5.0000000000000039e-13;

template<typename T1, unsigned int T2>
void
test(const clausen_cl_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::clausen_cl(fixture.m, fixture.w);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(ClausenCLTest, GSL) {
  test(fixture_0001, tolerance_0001);
}
