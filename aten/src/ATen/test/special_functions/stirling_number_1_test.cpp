#include <gtest/gtest.h>
#include <ATen/native/special_functions/stirling_number_1.h>

template<typename T1>
struct stirling_number_1_fixture {
  T1 f0;
  unsigned int n;
  unsigned int m;
  T1 f;
};

const stirling_number_1_fixture<double> fixture_0001[11] = {
    {1.0000000000000000, 0, 0, 0.0},
    {0.0000000000000000, 0, 1, 0.0},
    {0.0000000000000000, 0, 2, 0.0},
    {0.0000000000000000, 0, 3, 0.0},
    {0.0000000000000000, 0, 4, 0.0},
    {0.0000000000000000, 0, 5, 0.0},
    {0.0000000000000000, 0, 6, 0.0},
    {0.0000000000000000, 0, 7, 0.0},
    {0.0000000000000000, 0, 8, 0.0},
    {0.0000000000000000, 0, 9, 0.0},
    {0.0000000000000000, 0, 10, 0.0},
};

const double tolerance_0001 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0002[11] = {
    {0.0000000000000000, 1, 0, 0.0},
    {1.0000000000000000, 1, 1, 0.0},
    {0.0000000000000000, 1, 2, 0.0},
    {0.0000000000000000, 1, 3, 0.0},
    {0.0000000000000000, 1, 4, 0.0},
    {0.0000000000000000, 1, 5, 0.0},
    {0.0000000000000000, 1, 6, 0.0},
    {0.0000000000000000, 1, 7, 0.0},
    {0.0000000000000000, 1, 8, 0.0},
    {0.0000000000000000, 1, 9, 0.0},
    {0.0000000000000000, 1, 10, 0.0},
};

const double tolerance_0002 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0003[11] = {
    {0.0000000000000000, 2, 0, 0.0},
    {-1.0000000000000000, 2, 1, 0.0},
    {1.0000000000000000, 2, 2, 0.0},
    {0.0000000000000000, 2, 3, 0.0},
    {0.0000000000000000, 2, 4, 0.0},
    {0.0000000000000000, 2, 5, 0.0},
    {0.0000000000000000, 2, 6, 0.0},
    {0.0000000000000000, 2, 7, 0.0},
    {0.0000000000000000, 2, 8, 0.0},
    {0.0000000000000000, 2, 9, 0.0},
    {0.0000000000000000, 2, 10, 0.0},
};

const double tolerance_0003 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0004[11] = {
    {0.0000000000000000, 3, 0, 0.0},
    {2.0000000000000000, 3, 1, 0.0},
    {-3.0000000000000000, 3, 2, 0.0},
    {1.0000000000000000, 3, 3, 0.0},
    {0.0000000000000000, 3, 4, 0.0},
    {0.0000000000000000, 3, 5, 0.0},
    {0.0000000000000000, 3, 6, 0.0},
    {0.0000000000000000, 3, 7, 0.0},
    {0.0000000000000000, 3, 8, 0.0},
    {0.0000000000000000, 3, 9, 0.0},
    {0.0000000000000000, 3, 10, 0.0},
};

const double tolerance_0004 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0005[11] = {
    {0.0000000000000000, 4, 0, 0.0},
    {-6.0000000000000000, 4, 1, 0.0},
    {11.000000000000000, 4, 2, 0.0},
    {-6.0000000000000000, 4, 3, 0.0},
    {1.0000000000000000, 4, 4, 0.0},
    {0.0000000000000000, 4, 5, 0.0},
    {0.0000000000000000, 4, 6, 0.0},
    {0.0000000000000000, 4, 7, 0.0},
    {0.0000000000000000, 4, 8, 0.0},
    {0.0000000000000000, 4, 9, 0.0},
    {0.0000000000000000, 4, 10, 0.0},
};

const double tolerance_0005 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0006[11] = {
    {0.0000000000000000, 5, 0, 0.0},
    {24.000000000000000, 5, 1, 0.0},
    {-50.000000000000000, 5, 2, 0.0},
    {35.000000000000000, 5, 3, 0.0},
    {-10.000000000000000, 5, 4, 0.0},
    {1.0000000000000000, 5, 5, 0.0},
    {0.0000000000000000, 5, 6, 0.0},
    {0.0000000000000000, 5, 7, 0.0},
    {0.0000000000000000, 5, 8, 0.0},
    {0.0000000000000000, 5, 9, 0.0},
    {0.0000000000000000, 5, 10, 0.0},
};

const double tolerance_0006 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0007[11] = {
    {0.0000000000000000, 6, 0, 0.0},
    {-120.00000000000000, 6, 1, 0.0},
    {274.00000000000000, 6, 2, 0.0},
    {-225.00000000000000, 6, 3, 0.0},
    {85.000000000000000, 6, 4, 0.0},
    {-15.000000000000000, 6, 5, 0.0},
    {1.0000000000000000, 6, 6, 0.0},
    {0.0000000000000000, 6, 7, 0.0},
    {0.0000000000000000, 6, 8, 0.0},
    {0.0000000000000000, 6, 9, 0.0},
    {0.0000000000000000, 6, 10, 0.0},
};

const double tolerance_0007 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0008[11] = {
    {0.0000000000000000, 7, 0, 0.0},
    {720.00000000000000, 7, 1, 0.0},
    {-1764.0000000000000, 7, 2, 0.0},
    {1624.0000000000000, 7, 3, 0.0},
    {-735.00000000000000, 7, 4, 0.0},
    {175.00000000000000, 7, 5, 0.0},
    {-21.000000000000000, 7, 6, 0.0},
    {1.0000000000000000, 7, 7, 0.0},
    {0.0000000000000000, 7, 8, 0.0},
    {0.0000000000000000, 7, 9, 0.0},
    {0.0000000000000000, 7, 10, 0.0},
};

const double tolerance_0008 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0009[11] = {
    {0.0000000000000000, 8, 0, 0.0},
    {-5040.0000000000000, 8, 1, 0.0},
    {13068.000000000000, 8, 2, 0.0},
    {-13132.000000000000, 8, 3, 0.0},
    {6769.0000000000000, 8, 4, 0.0},
    {-1960.0000000000000, 8, 5, 0.0},
    {322.00000000000000, 8, 6, 0.0},
    {-28.000000000000000, 8, 7, 0.0},
    {1.0000000000000000, 8, 8, 0.0},
    {0.0000000000000000, 8, 9, 0.0},
    {0.0000000000000000, 8, 10, 0.0},
};

const double tolerance_0009 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0010[11] = {
    {0.0000000000000000, 9, 0, 0.0},
    {40320.000000000000, 9, 1, 0.0},
    {-109584.00000000000, 9, 2, 0.0},
    {118124.00000000000, 9, 3, 0.0},
    {-67284.000000000000, 9, 4, 0.0},
    {22449.000000000000, 9, 5, 0.0},
    {-4536.0000000000000, 9, 6, 0.0},
    {546.00000000000000, 9, 7, 0.0},
    {-36.000000000000000, 9, 8, 0.0},
    {1.0000000000000000, 9, 9, 0.0},
    {0.0000000000000000, 9, 10, 0.0},
};

const double tolerance_0010 = 2.5000000000000020e-13;

const stirling_number_1_fixture<double> fixture_0011[11] = {
    {0.0000000000000000, 10, 0, 0.0},
    {-362880.00000000000, 10, 1, 0.0},
    {1026576.0000000000, 10, 2, 0.0},
    {-1172700.0000000000, 10, 3, 0.0},
    {723680.00000000000, 10, 4, 0.0},
    {-269325.00000000000, 10, 5, 0.0},
    {63273.000000000000, 10, 6, 0.0},
    {-9450.0000000000000, 10, 7, 0.0},
    {870.00000000000000, 10, 8, 0.0},
    {-45.000000000000000, 10, 9, 0.0},
    {1.0000000000000000, 10, 10, 0.0},
};

const double tolerance_0011 = 2.5000000000000020e-13;

template<typename T1, unsigned int T2>
void
test(const stirling_number_1_fixture<T1>(&fixtures)[T2], T1 tolerance) {
  const T1 epsilon = std::numeric_limits<T1>::epsilon();

  T1 maximum_absolute_difference = T1(-1);
  T1 maximum_absolute_fraction = T1(-1);

  auto error = 0;

  for (auto fixture: fixtures) {
    const T1 g = aten::native::special_functions::stirling_number_1<T1>(fixture.n, fixture.m);

    if (std::isnan(g) && !error) {
      error = 1;
    }

    if (!std::isnan(g)) {
      const T1 f = fixture.f0;

      const auto difference = g - f;

      const auto absolute_difference = std::abs(difference);

      if (absolute_difference > maximum_absolute_difference) {
        maximum_absolute_difference = absolute_difference;
      }

      const auto abs_f = std::abs(f);
      const auto abs_g = std::abs(g);

      if (abs_f > T1(10) * epsilon && abs_g > T1(10) * epsilon) {
        const auto fraction = difference / f;

        const auto absolute_fraction = std::abs(fraction);

        if (absolute_fraction > maximum_absolute_fraction) {
          maximum_absolute_fraction = absolute_fraction;
        }
      }
    }
  }

  EXPECT_TRUE(!error && maximum_absolute_fraction < tolerance);
}

TEST(StirlingNumber1, GSL) {
  test(fixture_0001, tolerance_0001);
  test(fixture_0002, tolerance_0002);
  test(fixture_0003, tolerance_0003);
  test(fixture_0004, tolerance_0004);
  test(fixture_0005, tolerance_0005);
  test(fixture_0006, tolerance_0006);
  test(fixture_0007, tolerance_0007);
  test(fixture_0008, tolerance_0008);
  test(fixture_0009, tolerance_0009);
  test(fixture_0010, tolerance_0010);
  test(fixture_0011, tolerance_0011);
}
